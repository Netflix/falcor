var falcor = module.exports = {};
var $TYPE = "$type",
    $SIZE = "$size",
    $EXPIRES = "$expires",
    $TIMESTAMP = "$timestamp";

var SENTINEL = "sentinel",
    ERROR = "error",
    VALUE = "value",
    EXPIRED = "expired",
    GROUP = "group";

var __GENERATION_GUID = 0,
    __GENERATION_VERSION = 0,
    __CONTAINER = "__reference_container",
    __CONTEXT = "__context",
    __GENERATION = "__generation",
    __GENERATION_UPDATED = "__generation_updated",
    __INVALIDATED = "__invalidated",
    __KEY = "__key",
    __KEYS = "__keys",
    __IS_KEY_SET = "__is_key_set",
    __NULL = "__null",
    __SELF = "./",
    __PARENT = "../",
    __REF = "__ref",
    __REF_INDEX = "__ref_index",
    __REFS_LENGTH = "__refs_length",
    __ROOT = "/",
    __OFFSET = "__offset",
    __FALKOR_EMPTY_OBJECT = '__FALKOR_EMPTY_OBJECT',
    __REFERENCE_KEYS = [__CONTAINER, __CONTEXT, __REF_INDEX],
    __NODE_KEYS = [
        "__next", "__prev",
        __GENERATION, __GENERATION_UPDATED,
        __INVALIDATED, __REFS_LENGTH,
        __KEY, __SELF, __PARENT, __ROOT,
        $TYPE, $SIZE, $EXPIRES, $TIMESTAMP
    ],
    __JSON_KEYS = [__GENERATION, __KEY],
    __props     = Object.create(null);

function now() {
    return Date.now();
}

function NOOP() {};

falcor.__Internals = {};
falcor.Observable = Rx.Observable;
falcor.EXPIRES_NOW = 0;
falcor.EXPIRES_NEVER = 1;

var ModelResponse = (function(falcor) {
    
    var valuesMixin = { format: { value: "AsValues"  } },
        jsonMixin   = { format: { value: "AsPathMap" } },
        jsongMixin  = { format: { value: "AsJSONG"   } };
    
    function ModelResponse(forEach) {
        this._subscribe = forEach;
    }
    
    ModelResponse.create = function(forEach) {
        return new ModelResponse(forEach);
    };
    
    function noop() {};
    function mixin(self) {
        var mixins = Array.prototype.slice.call(arguments, 1);
        return new ModelResponse(function(other) {
            return self.subscribe(mixins.reduce(function(proto, mixin) {
                return Object.create(proto, mixin);
            }, other));
        });
    };
    
    ModelResponse.prototype = falcor.Observable.create(noop);
    ModelResponse.prototype.format = "AsPathMap";
    ModelResponse.prototype.toPathValues = function() {
        return mixin(this, valuesMixin);
    };
    ModelResponse.prototype.toJSON = function() {
        return mixin(this, jsonMixin);
    };
    ModelResponse.prototype.toJSONG = function() {
        return mixin(this, jsongMixin);
    };
    return ModelResponse;
}(falcor));
falcor.ImmediateScheduler = ImmediateScheduler;

function ImmediateScheduler() {
}

ImmediateScheduler.prototype = {
    schedule: function(action) {
        action();
    }
};

falcor.TimeoutScheduler = TimeoutScheduler;

function TimeoutScheduler(delay) {
    this.delay = delay;
}

TimeoutScheduler.prototype = {
    schedule: function(action) {
        setTimeout(action, this.delay);
    }
};


// Ties the requestQueue to a jsongModel.
// For dataSource purposes.
var RequestQueue = falcor.RequestQueue = function(jsongModel, scheduler) {
    this._scheduler = scheduler;
    this._jsongModel = jsongModel;

    this._scheduled = false;
    this._requests = [];
};

RequestQueue.prototype = {
    _get: function() {
        var i = -1;
        var requests = this._requests;
        while (++i < requests.length) {
            if (!requests[i].pending && requests[i].isGet) {
                return requests[i];
            }
        }
        return requests[requests.length] = new GetRequest(this._jsongModel, this);
    },
    _set: function() {
        var i = -1;
        var requests = this._requests;
        
        // TODO: Set always sends off a request immediately, so there is no batching.
        while (++i < requests.length) {
            if (!requests[i].pending && requests[i].isSet) {
                return requests[i];
            }
        }
        return requests[requests.length] = new SetRequest(this._jsongModel, this);
    },

    remove: function(request) {
        for (var i = this._requests.length - 1; i > -1; i--) {
            if (this._requests[i].id === request.id && this._requests.splice(i, 1)) {
                break;
            }
        }
    },
    
    set: function(jsongEnv, observer) {
        var self = this;
        var disposable = self._set().batch(jsongEnv, observer).flush();

        return {
            dispose: function() {
                disposable.dispose();
            }
        };
    },

    get: function(requestedPaths, optimizedPaths, observer) {
        var self = this;
        var disposable = null;

        // TODO: get does not batch across requests.
        self._get().batch(requestedPaths, optimizedPaths, observer);

        if (!self._scheduled) {
            self._scheduled = true;
            disposable = self._scheduler.schedule(self._flush.bind(self));
        }

        return {
            dispose: function() {
                disposable.dispose();
            }
        };
    },

    _flush: function() {
        this._scheduled = false;

        var requests = this._requests, i = -1;
        var disposables = [];
        while (++i < requests.length) {
            if (!requests[i].pending) {
                disposables[disposables.length] = requests[i].flush();
            }
        }

        return {
            dispose: function() {
                disposables.forEach(function(d) { d.dispose(); });
            }
        }
    }
};

var REQUEST_ID = 0;

var SetRequest = function(model, queue) {
    var self = this;
    self._jsongModel = model;
    self._queue = queue;
    self.observers = [];
    self.jsongEnvs = [];
    self.pending = false;
    self.id = ++REQUEST_ID;
    self.isSet = true;
};

SetRequest.prototype = {
    batch: function(jsongEnv, observer) {
        var self = this;
        observer.onNext = observer.onNext || NOOP;
        observer.onError = observer.onError || NOOP;
        observer.onCompleted = observer.onCompleted || NOOP;

        if (!observer.__observerId) {
            observer.__observerId = ++REQUEST_ID;
        }
        observer._requestId = self.id;

        self.observers[self.observers.length] = observer;
        self.jsongEnvs[self.jsongEnvs.length] = jsongEnv;

        return self;
    },
    flush: function() {
        var incomingValues, query, op, len;
        var self = this;
        var jsongs = self.jsongEnvs;
        var observers = self.observers;
        var model = self._jsongModel;
        self.pending = true;

        // TODO: Set does not batch.
        return model._dataSource.
            set(jsongs[0]).
            subscribe(function(response) {
                incomingValues = response;
            }, function(err) {
                var i = -1;
                var n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onError && obs.onError(err);
                }
            }, function() {
                var i, n, obs;
                self._queue.remove(self);
                i = -1;
                n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onNext && obs.onNext({
                        jsong: incomingValues.jsong || incomingValues.value,
                        paths: incomingValues.paths
                    });
                    obs.onCompleted && obs.onCompleted();
                }
            });
    }
};



var GetRequest = function(jsongModel, queue) {
    var self = this;
    self._jsongModel = jsongModel;
    self._queue = queue;
    self.observers = [];
    self.optimizedPaths = [];
    self.requestedPaths = [];
    self.pending = false;
    self.id = ++REQUEST_ID;
    self.isGet = true;
};

GetRequest.prototype = {

    batch: function(requestedPaths, optimizedPaths, observer) {
        // TODO: Do we need to gap fill?
        var self = this;
        observer.onNext = observer.onNext || NOOP;
        observer.onError = observer.onError || NOOP;
        observer.onCompleted = observer.onCompleted || NOOP;

        if (!observer.__observerId) {
            observer.__observerId = ++REQUEST_ID;
        }
        observer._requestId = self.id;

        self.observers[self.observers.length] = observer;
        self.optimizedPaths[self.optimizedPaths.length] = optimizedPaths;
        self.requestedPaths[self.requestedPaths.length] = requestedPaths;

        return self;
    },

    flush: function() {
        var incomingValues, query, op, len;
        var self = this;
        var requested = self.requestedPaths;
        var optimized = self.optimizedPaths;
        var observers = self.observers;
        var disposables = [];
        var results = [];
        var model = self._jsongModel;
        self._scheduled = false;
        self.pending = true;

        var optimizedMaps = {};
        var requestedMaps = {};
        var r, o, i, j, obs, resultIndex;
        for (i = 0, len = requested.length; i < len; i++) {
            r = requested[i];
            o = optimized[i];
            obs = observers[i];
            for (j = 0; j < r.length; j++) {
                pathsToMapWithObservers(r[j], 0, readyNode(requestedMaps, null, obs), obs);
                pathsToMapWithObservers(o[j], 0, readyNode(optimizedMaps, null, obs), obs);
            }
        }
        return model._dataSource.
            get(collapse(optimizedMaps)).
            subscribe(function(response) {
                incomingValues = response;
            }, function(err) {
                var i = -1;
                var n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onError && obs.onError(err);
                }
            }, function() {
                var i, n, obs;
                self._queue.remove(self);
                i = -1;
                n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onNext && obs.onNext({
                        jsong: incomingValues.jsong || incomingValues.value,
                        paths: incomingValues.paths
                    });
                    obs.onCompleted && obs.onCompleted();
                }
            });
    },
    // Returns the paths that are contained within this request.
    contains: function(requestedPaths, optimizedPaths) {
        // TODO: 
    }
};

function pathsToMapWithObservers(path, idx, branch, observer) {
    var curr = path[idx];

    // Object / Array
    if (typeof curr === 'object') {
        if (Array.isArray(curr)) {
            curr.forEach(function(v) {
                readyNode(branch, v, observer);
                if (path.length > idx + 1) {
                    pathsToMapWithObservers(path, idx + 1, branch[v], observer);
                }
            });
        } else {
            var from = curr.from || 0;
            var to = curr.to >= 0 ? curr.to : curr.length;
            for (var i = from; i <= to; i++) {
                readyNode(branch, i, observer);
                if (path.length > idx + 1) {
                    pathsToMapWithObservers(path, idx + 1, branch[i], observer);
                }
            }
        }
    } else {
        readyNode(branch, curr, observer);
        if (path.length > idx + 1) {
            pathsToMapWithObservers(path, idx + 1, branch[curr], observer);
        }
    }
}

/**
 * Builds the set of collapsed
 * queries by traversing the tree
 * once
 */
var charPattern = /\D/i;

function readyNode(branch, key, observer) {
    if (key === null) {
        branch.__observers = branch.__observers || [];
        !containsObserver(branch.__observers, observer) && branch.__observers.push(observer);
        return branch;
    }

    if (!branch[key]) {
        branch[key] = {__observers: []};
    }

    !containsObserver(branch[key].__observers, observer) && branch[key].__observers.push(observer);
    return branch;
}

function containsObserver(observers, observer) {
    if (!observer) {
        return;
    }
    return observers.reduce(function(acc, x) {
        return acc || x.__observerId === observer.__observerId;
    }, false);
}

function collapse(pathMap) {
    return rangeCollapse(buildQueries(pathMap));
}

/**
 * Collapse ranges, e.g. when there is a continuous range
 * in an array, turn it into an object instead
 *
 * [1,2,3,4,5,6] => {"from":1, "to":6}
 *
 */
function rangeCollapse(paths) {
    paths.forEach(function (path) {
        path.forEach(function (elt, index) {
            var range;
            if (Array.isArray(elt) && elt.every(isNumber) && allUnique(elt)) {
                elt.sort(function(a, b) {
                    return a - b;
                });
                if (elt[elt.length-1] - elt[0] === elt.length-1) {
                    // create range
                    range = {};
                    range.from = elt[0];
                    range.to = elt[elt.length-1];
                    path[index] = range;
                }
            }
        });
    });
    return paths;
}

/* jshint forin: false */
function buildQueries(root) {

    if (root == null || typeof root !== 'object') {
        return [ [] ];
    }

    var children = Object.keys(root).filter(notPathMapInternalKeys),
        child, memo, paths, key, childIsNum,
        list, head, tail, clone, results,
        i = -1, n = children.length,
        j, k, x;

    if (n === 0 || Array.isArray(root) === true) {
        return [ [] ];
    }

    memo = {};
    while(++i < n) {
        child = children[i];
        paths = buildQueries(root[child]);
        key = createKey(paths);

        childIsNum = typeof child === 'string' && !charPattern.test(child);

        if ((list = memo[key]) && (head = list.head)) {
            head[head.length] = childIsNum ? parseInt(child, 10) : child;
        } else {
            memo[key] = {
                head: [childIsNum ? parseInt(child, 10) : child],
                tail: paths
            };
        }
    }

    results = [];
    for(x in memo) {
        head = (list = memo[x]).head;
        tail = list.tail;
        i = -1;
        n = tail.length;
        while(++i < n) {
            list = tail[i];
            j = -1;
            k = list.length;
            if(head[0] === '') {
                clone = [];
            } else {
                clone = [head.length === 1 ? head[0] : head];
                while(++j < k) {
                    clone[j + 1] = list[j];
                }
            }
            results[results.length] = clone;
        }
    }
    return results;
}

function notPathMapInternalKeys(key) {
    return (
        key !== "__observers" &&
        key !== "__pending" &&
        key !== "__batchID"
        );
}

/**
 * Return true if argument is a number
 */
function isNumber(val) {
    return typeof val === "number";
}

/**
 * allUnique
 * return true if every number in an array is unique
 */
function allUnique(arr) {
    var hash = {},
        index,
        len;

    for (index = 0, len = arr.length; index < len; index++) {
        if (hash[arr[index]]) {
            return false;
        }
        hash[arr[index]] = true;
    }
    return true;
}

/**
 * Sort a list-of-lists
 * Used for generating a unique hash
 * key for each subtree; used by the
 * memoization
 */
function sortLol(lol) {
    return lol.reduce(function (result, curr) {
        if (curr instanceof Array) {
            result.push(sortLol(curr).slice(0).sort());
            return result;
        }
        return result.concat(curr);
    }, []).slice(0).sort();
}

/**
 * Create a unique hash key for a set
 * of paths
 */
function createKey(list) {
    return JSON.stringify(sortLol(list));
}
// Note: For testing
falcor.__Internals.buildQueries = buildQueries;

function modelOperation(name) {
    return function() {

        var model = this, root = model._root,
            args = Array.prototype.slice.call(arguments),
            selector = args[args.length - 1];

        selector = typeof selector === "function" ? args.pop() : undefined;

        return ModelResponse.create(function(options) {

            var onNext = options.onNext.bind(options),
                onError = options.onError.bind(options),
                onCompleted = options.onCompleted.bind(options),
                isProgressive = options.isProgressive,
                valuesCount = selector && selector.length || 0;
            var operationalName = name;
            var disposed = false;
            var hasSelector = !!selector;
            var format = hasSelector && 'AsJSON' || options.format || 'AsPathMap';
            var isJSONG = format === 'AsJSONG';
            var seedRequired = isSeedRequired(format);
            var isValues = format === 'AsValues';
            var pathSetValues = [];
            var errors = [];
            var indices = [];
            var undefineds = [];
            var jsongPaths = [];
            var errorSelector = options.errorSelector || model._errorSelector;
            var atLeastOneValue = false;
            var shouldRequest = true;
            var shouldRoute = true;
            var isSlave = !!(model._dataSource || model._router);
            var routeMisses = {};
            var isFirstSet = name === 'set' && isSlave;
            var firstSetJSONGPaths;
            var firstSetModel = model;
            var firstSetRequested = [];

            if (hasSelector) {
                for (var i = 0; i < args.length; i++) {
                    if (i < valuesCount) {
                        pathSetValues[pathSetValues.length] = Object.create(null);
                    }
                    undefineds[undefineds.length] = false;
                    indices[indices.length] = i;
                }
            } else if (seedRequired) {
                pathSetValues[0] = Object.create(null);
                undefineds[0] = true;
            }

            function recurse(requested, relativePathSetValues) {
                if (disposed) { return; }
                var setSeed = false;

                // Note: We have to swap seeds for the first set since we must enforce jsong.
                // TODO: This does not consider setProgressively.
                if (isFirstSet) {
                    setSeed = [{}];
                    
                    // If there is a bound path then we have to do some real magik
                    if (model._path && model._path.length) {
                        firstSetModel = model.clone(['_path', []]);
                    }
                }

                var operations = getOperationArgGroups(requested, operationalName, format, setSeed || relativePathSetValues, hasSelector, !isFirstSet && isValues && onNext, errorSelector, isFirstSet, model._path);
                var results = processOperations(isFirstSet && firstSetModel || model, operations);
                isFirstSet && (firstSetJSONGPaths = []);

                errors = errors.concat(results.errors);
                atLeastOneValue = atLeastOneValue || results.valuesReceived;

                // from each of the operations, the results must be remerged back into the values array
                operations.forEach(function(op) {
                    if (!isFirstSet && hasSelector) {
                        var absoluteIndex;
                        var hasIndex;
                        op.values.forEach(function(valueObject, i) {
                            absoluteIndex = indices[i + op.valuesOffset];
                            hasIndex = typeof absoluteIndex === 'number';
                            if (hasIndex) {
                                if (valueObject) {
                                    if (valueObject.json !== undefined) {
                                        pathSetValues[absoluteIndex] = valueObject;
                                    } else {
                                        pathSetValues[absoluteIndex] = {json: valueObject};
                                    }
                                    undefineds[absoluteIndex] = false;
                                } else {
                                    undefineds[absoluteIndex] = undefineds[absoluteIndex] && true;
                                }
                            }
                        });
                    } else if (seedRequired && !isFirstSet) {
                        if (op.values[0]) {
                            pathSetValues = op.values;
                            undefineds[0] = false;
                            if (isJSONG && !isFirstSet) {
                                jsongPaths = jsongPaths.concat(op.values[0].paths);
                            }
                        } else {
                            undefineds[0] = true;
                        }
                    } else if (isFirstSet) {
                        firstSetJSONGPaths = firstSetJSONGPaths.concat(op.values[0].paths);
                    }
                });
                var nextRequest = results.requestedMissingPaths;
                var missingLength = nextRequest.length;

                // There is never missing paths on a set since we set through values
                if (isFirstSet) {
                    missingLength = 1;
                    nextRequest = {jsong: setSeed[0], paths: firstSetJSONGPaths};
                }

                // no need to inform the user of the current state if in value mode
                if (isProgressive && missingLength && !isValues) {
                    emitValues();
                }

                // We access the router first before going off to the source.
                if (missingLength && model._router && shouldRoute) {
                    routerRecurse(nextRequest, results, relativePathSetValues);
                }

                // We contine looking into the modelSource if the router does not exist / shouldRoute
                // is no longer true.
                else if (missingLength && shouldRequest && model._dataSource) {
                    modelSourceRequest(nextRequest, results, relativePathSetValues);
                }

                // Once we have exhausted all external resources or found all data we
                // emit values and complete.
                else {
                    emitValues();
                    executeOnErrorOrCompleted();
                }
            }

            function routerRecurse(nextRequest, results, relativePathSetValues) {
                var incomingValues;
                var optPaths = results.optimizedMissingPaths;
                for (var i = 0; i < nextRequest.length; i++) {
                    nextRequest[i]._routerIndex = i;
                    optPaths[i]._routerIndex = i;
                }
                var opts = optPaths.filter(function(p) { return !PathLibrary.simplePathInMap(p, routeMisses); });
                if (opts.length && opts.length !== optPaths.length) {
                    var optMap = opts.reduce(function(acc, o) {
                        acc[o._routerIndex] = true;
                        return acc;
                    }, {});
                    nextRequest = nextRequest.filter(function(r) { return optMap[r._routerIndex]; });
                }

                if (opts.length) {
                    model._router[name](opts).
                        subscribe(function(jsongEnv) {
                            incomingValues = jsongEnv;
                            incomingValues.paths = nextRequest;
                        }, function(err) {
                            // TODO: Should this ever happen?
                        }, function() {
                            opts.forEach(function(p) { PathLibrary.pathToMap(p, routeMisses); });
                            completeRecursion(nextRequest, incomingValues, relativePathSetValues);
                        });
                } else {

                    // TODO: support both router and modelSource (note selector functions).
                    shouldRoute = false;
                    shouldRequest = false;
                    completeRecursion([], {jsong: {}, paths: [[]]}, relativePathSetValues);
                }
            }

            function modelSourceRequest(nextRequest, results, relativePathSetValues) {
                var incomingValues;
                var requestedPaths = isFirstSet ? nextRequest.paths : nextRequest;
                var observer = {
                    onNext: function(jsongEnvelop) {
                        incomingValues = jsongEnvelop;
                    },
                    onError: function(err) {
                        // When an error is thrown, all currently requested paths are
                        // inserted as errors and the output format is not needed.
                        // TODO: There must be a way to make this more efficient.
                        var out = model._setPathSetsAsValues.apply(null, [model].concat(
                            requestedPaths.
                                reduce(function(acc, r) {
                                    acc[0].push({
                                        path: r,
                                        value: err
                                    });
                                    return acc;
                                }, [[]]),
                            undefined,
                            model._errorSelector
                        ));
                        errors = errors.concat(out.errors);

                        // there could still be values within the cache
                        emitValues();
                        executeOnErrorOrCompleted();
                    },
                    onCompleted: function() {
                        shouldRequest = false;
                        completeRecursion(requestedPaths, incomingValues, relativePathSetValues);
                    }
                };

                if (name === 'set') {
                    model._request.set(nextRequest, observer);
                } else {
                    model._request.get(nextRequest, results.optimizedMissingPaths, observer);
                }
            }

            function completeRecursion(requestedPaths, incomingValues, relativePathSetValues) {
                var out = getOperationsPartitionedByPathIndex(
                    requestedPaths,
                    incomingValues,
                    indices,
                    !isFirstSet && hasSelector,
                    isFirstSet || seedRequired,
                    valuesCount,
                    isFirstSet,
                    args,
                    model._path
                );

                var newOperations = out.ops;
                indices = out.indices;

                operationalName = 'set';
                isFirstSet = false;

                // Note: We do not request missing paths again.
                if (hasSelector) {
                    var arr = [];
                    for (var i = 0; i < indices.length; i++) {
                        arr[arr.length] = relativePathSetValues[indices[i]];
                    }
                    recurse(newOperations, arr);
                } else if (seedRequired) {
                    recurse(newOperations, pathSetValues);
                } else {
                    recurse(newOperations, []);
                }
            }

            try {
                recurse(args, pathSetValues);
            } catch(e) {
                errors = [e];
                executeOnErrorOrCompleted();
            }

            function emitValues() {
                if (disposed) {
                    return;
                }

                root.allowSync = true;
                if (atLeastOneValue) {
                    if (hasSelector) {
                        if (valuesCount > 0) {
                            // they should be wrapped in json items
                            onNext(selector.apply(model, pathSetValues.map(function(x, i) {
                                if (undefineds[i]) {
                                    return undefined;
                                }

                                return x && x.json;
                            })));
                        } else {
                            onNext(selector.call(model));
                        }
                    } else if (!isValues && !model._progressive) {
                        // this means there is an onNext function that is not AsValues or progressive,
                        // therefore there must only be one onNext call, which should only be the 0
                        // index of the values of the array
                        if (isJSONG) {
                            pathSetValues[0].paths = jsongPaths;
                        }
                        onNext(pathSetValues[0]);
                    }
                }
                root.allowSync = false;
            }

            function executeOnErrorOrCompleted() {
                if (disposed) {
                    return;
                }

                root.allowSync = true;
                if (errors.length) {
                    onError(errors);
                } else {
                    onCompleted();
                }
                root.allowSync = false;
            }

            return {
                dispose: function() {
                    disposed = true;
                }
            };
        });
    }
}

function fastCollapse(paths) {
    return paths.reduce(function(acc, p) {
        var curr = acc[0];
        if (!curr) {
            acc[0] = p;
        } else {
            p.forEach(function(v, i) {
                // i think
                if (typeof v === 'object') {
                    v.forEach(function(value) {
                        curr[i][curr[i].length] = value;
                    });
                }
            });
        }
        return acc;
    }, []);
}

falcor.__Internals.fastCollapse = fastCollapse;

// TODO: There is a performance win.  If i request from the core the requested paths,
// then i should not have to collapse the JSON paths.
function convertArgumentsToFromJSONG(args, remoteMessage, boundPath) {
    var newArgs = [];
    for (var i = 0, len = args.length; i < len; i++) {
        var argI = args[i];
        var paths;
        if (isJSONG(argI)) {
            paths = argI.paths;
        } else if (isPathOrPathValue(argI)) {
            paths = [argI.path || argI];
        } else {
            paths = collapse(argI);
        }
        newArgs[newArgs.length] = {
            jsong: remoteMessage.jsong,
            paths: paths,
            boundPath: boundPath && boundPath.length && boundPath || undefined
        };
    }
    

    return newArgs;
}

function getOperationsPartitionedByPathIndex(requestedPaths, incomingValues, previousIndices, hasSelector, seedRequired, valuesCount, isFirstSet, originalArgs, boundPath) {
    var newOperations = [];
    var indices = [];

    if (isFirstSet) {
        indices = previousIndices;
        newOperations = convertArgumentsToFromJSONG(originalArgs, incomingValues, boundPath);
    } else {
        requestedPaths.forEach(function (r) {
            var op = newOperations[newOperations.length - 1];
            if (!op) {
                op = newOperations[newOperations.length] = {jsong: incomingValues.jsong, paths: []};
            }
            if (hasSelector) {
                if (typeof r.pathSetIndex !== 'undefined') {
                    var pathSetIndex = r.pathSetIndex;
                    var absoluteIndex = previousIndices[pathSetIndex];
                    var hasIndex = typeof absoluteIndex === 'number' && absoluteIndex < valuesCount;
                    if (op && op.pathSetIndex !== pathSetIndex && typeof op.pathSetIndex !== 'undefined') {
                        if (op && op.paths.length > 1) {
                            op.paths = fastCollapse(op.paths);
                        }
                        op = newOperations[newOperations.length] = {jsong: incomingValues.jsong, paths: []};
                        op.pathSetIndex = pathSetIndex;
                        hasIndex && (indices[indices.length] = absoluteIndex);
                    } else if (typeof op.pathSetIndex === 'undefined') {
                        hasIndex && (op.pathSetIndex = pathSetIndex);
                        hasIndex && (indices[indices.length] = absoluteIndex);
                    }
                }
            } else if (seedRequired) {
                // single seed white board
            } else {
                // isValues
            }
            op.paths[op.paths.length] = r;
            op.boundPath = op.boundPath || boundPath && boundPath.length && boundPath || undefined;
        });

        // Note: We have fast collapsed all operations at their closing for the next operation.
        // so the last one needs to be collapsed
        if (hasSelector) {
            var op = newOperations[newOperations.length - 1];
            if (op && op.paths.length > 1) {
                op.paths = fastCollapse(op.paths);
            }
        }
    }

    return {ops: newOperations, indices: indices};
}

function getOperationArgGroups(ops, name, format, values, hasSelector, onNext, errorSelector, isFirstSet, boundPath) {
    var opFormat = (isFirstSet && 'AsJSONG' || format);
    var seedRequired = isSeedRequired(opFormat);
    var isValues = !seedRequired;
    var valuesIndex = 0, valueEnvelope;
    return ops.
        map(cloneIfPathOrPathValue).
        reduce(function(groups, argument, index) {
            var group = groups[groups.length - 1],
                type  = isPathOrPathValue(argument) ? "PathSets" :
                    isJSONG(argument) ? "JSONGs" : "PathMaps",
                groupType = group && group.type,
                methodName = name + type + opFormat;

            // Sets the operation to jsong if its the first set.
            // We need this
            var op = Model.prototype['_' + methodName];

            if (type !== groupType) {
                group = groups[groups.length] = [];
            }

            group.boundPath = type === "JSONGs" && argument.boundPath || undefined;

            if (groupType === null || type !== groupType) {
                group.methodName = methodName;
                group.format = opFormat;
                group.type = type;
                group.op = op;
                group.isSeedRequired = seedRequired;
                group.isValues = isValues;
                group.values = [];
                group.onNext = onNext;
                group.valuesOffset = valuesIndex;
                group.errorSelector = errorSelector;
            }
            
            if (isFirstSet && boundPath && boundPath.length) {
                group[group.length] = appendBoundPathToArgument(boundPath, argument, type);
            } else {
                group[group.length] = argument;
            }
            
            valueEnvelope = values[valuesIndex];
            if (seedRequired && hasSelector && !isFirstSet && valuesIndex < values.length && valueEnvelope) {
                // This is the relative offset into the values array
                group.values[group.values.length] = valueEnvelope.json || valueEnvelope.jsong || valueEnvelope;
                valuesIndex++;
            } else if (((!hasSelector && seedRequired) || isFirstSet) && valueEnvelope) {
                // no need to know the value index
                group.values[group.values.length] = valueEnvelope.json || valueEnvelope.jsong || valueEnvelope;
            }

            return groups;
        }, []);
}

function appendBoundPathToArgument(boundPath, argument, type) {
    // Clones on PathValues so we can mutate.
    if (type === 'Paths') {
        if (argument.path) {
            argument.path = boundPath.concat(argument.path);
            return argument;
        }
        return boundPath.concat(argument);
    } 
    
    else if (type === 'PathMaps') {
        var prefix = {};
        var curr = prefix;
        for (var i = 0, len = boundPath.length; i < len - 1; i++) {
            curr[boundPath[i]] = {};
            curr = curr[boundPath[i]];
        }

        prefix[boundPath[i]] = argument;
        return prefix;
    }

    var paths = [];
    for (var i = 0, len = argument.paths.length; i < len; i++) {
        paths[paths.length] = boundPath.concat(argument.paths[i]);
    }
    return {jsong: argument.jsong, paths: paths};
}

function processOperations(model, operations) {
    // no value has to be kept track of since its all in the 'values' array that is attached
    // to each operation
    return operations.reduce(function(memo, operation) {

        var boundPath = model._path;

        if(boundPath.length > 0 && operation.format === "AsJSONG") {
            throw new Error("It is not legal to use the JSON Graph format from a bound Model. JSON Graph format can only be used from a root model.");
        }

        var results = operation.isValues ?
            operation.op(model, operation, operation.onNext, operation.errorSelector, operation.boundPath) :
            operation.op(model, operation, operation.values, operation.errorSelector, operation.boundPath);
        var missing = results.requestedMissingPaths;
        var offset = operation.valuesOffset;

        for (var i = 0, len = missing.length; i < len; i++) {
            missing[i].boundPath = boundPath;
            missing[i].pathSetIndex += offset;
        }

        memo.requestedMissingPaths = memo.requestedMissingPaths.concat(missing);
        memo.optimizedMissingPaths = memo.optimizedMissingPaths.concat(results.optimizedMissingPaths);
        memo.errors = memo.errors.concat(results.errors);
        memo.valuesReceived = memo.valuesReceived || results.requestedPaths.length > 0;

        return memo;
    }, {
        errors: [],
        requestedMissingPaths: [],
        optimizedMissingPaths: [],
        valuesReceived: false
    });
}

function not() {
    var fns = Array.prototype.slice.call(arguments);
    return function() {
        var args = arguments;
        return !fns.every(function(fn) {
            return fn.apply(null, args);
        });
    }
}

function isPathOrPathValue(x) {
    return !!(Array.isArray(x)) || (
        x.hasOwnProperty("path") && x.hasOwnProperty("value"));
}

function isJSONG(x) {
    return x.hasOwnProperty("jsong");
}

function isSeedRequired(format) {
    return format === 'AsJSON' || format === 'AsJSONG' || format === 'AsPathMap';
}

function cloneIfPathOrPathValue(x) {
    return (Array.isArray(x) && x.concat()) || (
        x.hasOwnProperty("path") && x.hasOwnProperty("value") && (
        x.path = x.path.concat()) && x || x) || x;
}



falcor.Model = Model;

Model.EXPIRES_NOW = falcor.EXPIRES_NOW;
Model.EXPIRES_NEVER = falcor.EXPIRES_NEVER;

function Model(options) {
    options || (options = {});
    this._dataSource = options.source;
    this._maxSize = options.maxSize || Math.pow(2, 53) - 1;
    this._collectRatio = options.collectRatio || 0.75;
    this._scheduler = new falcor.ImmediateScheduler();
    this._request = new RequestQueue(this, this._scheduler);
    this._errorSelector = options.errorSelector || Model.prototype._errorSelector;
    this._router = options.router;
    this._materialized = options.materialized;
    this._root = options.root || {
        expired: [],
        allowSync: false,
        unsafeMode: true
    };
    if (options.cache && typeof options.cache === "object") {
        this.setCache(options.cache);
    } else {
        this._cache = {};
    }
    this._path = [];
}

Model.prototype = {
    _boxed: false,
    _progressive: false,
    _request: new falcor.RequestQueue(new falcor.ImmediateScheduler()),
    _errorSelector: function(x, y) { return y; },
    get: modelOperation("get"),
    set: modelOperation("set"),
    invalidate: modelOperation("inv"),
    call: call,
    getValue: function(path) {
        return this.get(path, function(x) { return x });
    },
    setValue: function(path, value) {
        return this.set(Array.isArray(path) ?
            {path: path, value: value} :
            path, function(x) { return x; });
    },
    setCache: function(cache) {
        return (this._cache = {}) && setCache(this, cache);
    },
    bind: function(boundPath) {
        
        var model = this, root = model._root,
            paths = new Array(arguments.length - 1),
            i = -1, n = arguments.length - 1;
        
        while(++i < n) {
            paths[i] = arguments[i + 1];
        }
        
        if(n === 0) { throw new Error("Model#bind requires at least one value path."); }
        
        return falcor.Observable.create(function(observer) {
            
            var boundModel;
            
            try {
                root.allowSync = true;
                if(!(boundModel = model.bindSync(model._path.concat(boundPath)))) {
                    throw false;
                }
                root.allowSync = false;
                observer.onNext(boundModel);
                observer.onCompleted();
            } catch (e) {
                root.allowSync = false;
                return model.get.apply(model, paths.map(function(path) {
                    return boundPath.concat(path);
                }).concat(function(){})).subscribe(
                    function onNext() {},
                    function onError(err)  { observer.onError(err); },
                    function onCompleted() {
                        try {
                            if(boundModel = model.bindSync(boundPath)) {
                                observer.onNext(boundModel);
                            }
                            observer.onCompleted();
                        } catch(e) {
                            observer.onError(e);
                        }
                });
            }
        });
    },
    setRetryCount: function(x) {
        return this.clone(["_retryMax", x]);
    },
    getBoundPath: function() {
        return this.syncCheck("getBoundPath") && this._getBoundPath(this);
    },
    getValueSync: function(path) {
        if(Array.isArray(path) === false) {
            throw new Error("Model#getValueSync must be called with an Array path.");
        }
        var value = this.syncCheck("getValueSync") && this._getValueSync(this, this._path.concat(path));
        if(value[$TYPE] === ERROR) {
            throw value;
        }
        return value;
    },
    setValueSync: function(path, value, errorSelector) {
        if(Array.isArray(path) === false) {
            if(typeof errorSelector !== "function") {
                errorSelector = value || this._errorSelector;
            }
            value = path.value;
            path  = path.path;
        }
        if(Array.isArray(path) === false) {
            throw new Error("Model#setValueSync must be called with an Array path.");
        }
        if(this._dataSource) {
            throw new Error("Model#setValueSync can not be invoked on a Model with a DataSource. Please use the withoutDataSource() method followed by setValueSync if you would like to modify only the local cache.");
        }
        var value = this.syncCheck("setValueSync") && this._setValueSync(this, this._path.concat(path), value, errorSelector);
        if(value[$TYPE] === ERROR) {
            throw value;
        }
        return value;
    },
    bindSync: function(path) {
        if(Array.isArray(path) === false) {
            throw new Error("Model#bindSync must be called with an Array path.");
        }
        var boundValue = this.syncCheck("bindSync") && getBoundPath(this, this._path.concat(path));
        if(boundValue.shorted) {
            if(boundValue = boundValue.value) {
                if(boundValue[$TYPE] === ERROR) {
                    throw boundValue;
                    // throw new Error("Model#bindSync can\'t bind to or beyond an error: " + boundValue.toString());
                }
            }
            return undefined;
        } else if(boundValue.value && boundValue.value[$TYPE] === ERROR) {
            throw boundValue.value;
        }
        return this.clone(["_path", boundValue.path]);
    },
    // TODO: This seems like a great place for optimizations
    clone: function() {
        var self = this;
        var clone = new Model();
        
        Object.keys(self).forEach(function(key) {
            clone[key] = self[key];
        });
        
        Array.prototype.slice.call(arguments).forEach(function(tuple) {
            clone[tuple[0]] = tuple[1];
        });
        
        return clone;
    },
    batch: function(schedulerOrDelay) {
        if(typeof schedulerOrDelay === "number") {
            schedulerOrDelay = new falcor.TimeoutScheduler(Math.round(Math.abs(schedulerOrDelay)));
        } else if(!schedulerOrDelay || !schedulerOrDelay.schedule) {
            schedulerOrDelay = new falcor.ImmediateScheduler();
        }
        return this.clone(["_request", new falcor.RequestQueue(this, schedulerOrDelay)]);
    },
    unbatch: function() {
        return this.clone(["_request", new falcor.RequestQueue(this, new ImmediateScheduler())]);
    },
    boxValues: function() {
        return this.clone(["_boxed", true]);
    },
    unboxValues: function() {
        return this.clone(["_boxed", false]);
    },
    withoutDataSource: function() {
        return this.clone(["_dataSource", null]);
    },
    syncCheck: function(name) {
        if(this._root.allowSync === false && this._root.unsafeMode === false) {
            throw new Error("Model#" + name + " may only be called within the context of a request selector.");
        }
        return true;
    },
    addVirtualPaths: function(pathsAndActions) {
        this._virtualPaths = addVirtualPaths(pathsAndActions, this);
    },
    
    _getBoundPath            :            getBoundPath,
    
    _getValueSync            :              getPathSet,
    _setValueSync            :              setPathSet,
    
    _getPath                 :                 getPath,
    _getPathSet              :              getPathSet,
    _getPathSetsAsValues     :     getPathSetsAsValues,
    _getPathSetsAsJSON       :       getPathSetsAsJSON,
    _getPathSetsAsPathMap    :    getPathSetsAsPathMap,
    _getPathSetsAsJSONG      :      getPathSetsAsJSONG,
    
    _getPathMap              :              getPathMap,
    _getPathMapsAsValues     :     getPathMapsAsValues,
    _getPathMapsAsJSON       :       getPathMapsAsJSON,
    _getPathMapsAsPathMap    :    getPathMapsAsPathMap,
    _getPathMapsAsJSONG      :      getPathMapsAsJSONG,
    
    _setCache                :                setCache,
    _setPath                 :                 setPath,
    _setPathSet              :              setPathSet,
    _setPathSetsAsValues     :     setPathSetsAsValues,
    _setPathSetsAsJSON       :       setPathSetsAsJSON,
    _setPathSetsAsPathMap    :    setPathSetsAsPathMap,
    _setPathSetsAsJSONG      :      setPathSetsAsJSONG,
    
    _setPathMap              :              setPathMap,
    _setPathMapsAsValues     :     setPathMapsAsValues,
    _setPathMapsAsJSON       :       setPathMapsAsJSON,
    _setPathMapsAsPathMap    :    setPathMapsAsPathMap,
    _setPathMapsAsJSONG      :      setPathMapsAsJSONG,
    
    _setJSONGsAsValues       :       setJSONGsAsValues,
    _setJSONGsAsJSON         :         setJSONGsAsJSON,
    _setJSONGsAsPathMap      :      setJSONGsAsPathMap,
    _setJSONGsAsJSONG        :        setJSONGsAsJSONG,
    
    _invPathSetsAsValues     :      invalidatePathSets,
    _invPathSetsAsJSON       :      invalidatePathSets,
    _invPathSetsAsPathMap    :      invalidatePathSets,
    _invPathSetsAsJSONG      :      invalidatePathSets,
    
    _invPathMapsAsValues     :      invalidatePathMaps,
    _invPathMapsAsJSON       :      invalidatePathMaps,
    _invPathMapsAsPathMap    :      invalidatePathMaps,
    _invPathMapsAsJSONG      :      invalidatePathMaps
};


var PathLibrary = {
    simplePathToMap: simplePathToMap,
    pathToMap: pathToMap,
    simplePathInMap: simplePathInMap
};

function simplePathToMap(path, seed) {
    seed = seed || {};
    var curr = seed;
    for (var i = 0, len = path.length; i < len; i++) {
        if (curr[path[i]]) {
            curr = curr[path[i]];
        } else {
            curr = curr[path[i]] = {};
        }
    }
    return seed;
}

// TODO: Paul, teach me how to macro
function intersect(map, pathSet) {
    
}

function pathToMap(path, seed, depth) {
    depth = depth || 0;
    var curr = path[depth];

    // Object / Array
    if (typeof curr === 'object') {
        if (Array.isArray(curr)) {
            curr.forEach(function(v) {
                if (!seed[v]) {
                    seed[v] = {};
                }
                if (depth < path.length) {
                    pathToMap(path, seed[v], depth + 1);
                }
            });
        } else {
            var from = curr.from || 0;
            var to = curr.to >= 0 ? curr.to : curr.length;
            for (var i = from; i <= to; i++) {
                if (!seed[i]) {
                    seed[i] = {};
                }
                if (depth < path.length) {
                    pathToMap(path, seed[i], depth + 1);
                }
            }
        }
    } else {
        if (depth < path.length) {
            if (!seed[curr]) {
                seed[curr] = {};
            }
            pathToMap(path, seed[curr], depth + 1);
        }
    }
}

function simplePathInMap(path, map) {
    var curr = map;
    for (var i = 0, len = path.length; i < len; i++) {
        if (curr[path[i]]) {
            curr = curr[path[i]];
        } else {
            return false;
        }
    }
    return true;
}

function call(path, args, suffixes, paths, selector) {
    var model = this;
    args && Array.isArray(args) || (args = []);
    suffixes && Array.isArray(suffixes) || (suffixes = []);
    paths = Array.prototype.slice.call(arguments, 3);
    if (typeof (selector = paths[paths.length - 1]) !== 'function') {
        selector = undefined;
    } else {
        paths = paths.slice(0, -1);
    }
    return ModelResponse.create(function (options) {
        var rootModel = model.clone([
                '_path',
                []
            ]), localRoot = rootModel.withoutDataSource(), dataSource = model._dataSource, boundPath = model._path, callPath = boundPath.concat(path), thisPath = callPath.slice(0, -1);
        var disposable = model.getValue(path).flatMap(function (localFn) {
                if (typeof localFn === 'function') {
                    return falcor.Observable.return(localFn.apply(rootModel.bindSync(thisPath), args).map(function (pathValue) {
                        return {
                            path: thisPath.concat(pathValue.path),
                            value: pathValue.value
                        };
                    }).toArray().flatMap(function (pathValues) {
                        return localRoot.set.apply(localRoot, pathValues).toJSONG();
                    }).flatMap(function (envelope) {
                        return rootModel.get.apply(rootModel, envelope.paths.reduce(function (paths$2, path$2) {
                            return paths$2.concat(suffixes.map(function (suffix) {
                                return path$2.concat(suffix);
                            }));
                        }, []).concat(paths.reduce(function (paths$2, path$2) {
                            return paths$2.concat(thisPath.concat(path$2));
                        }, []))).toJSONG();
                    }));
                }
                return falcor.Observable.empty();
            }).defaultIfEmpty(dataSource.call(path, args, suffixes, paths)).mergeAll().subscribe(function (envelope) {
                var invalidated = envelope.invalidated;
                if (invalidated && invalidated.length) {
                    invalidatePaths(rootModel, invalidated, undefined, model._errorSelector);
                }
                disposable = localRoot.set(envelope, function () {
                    return model;
                }).subscribe(function (model$2) {
                    var getPaths = envelope.paths.map(function (path$2) {
                            return path$2.slice(boundPath.length);
                        });
                    if (selector) {
                        getPaths[getPaths.length] = function () {
                            return selector.call(model$2, getPaths);
                        };
                    }
                    disposable = model$2.get.apply(model$2, getPaths).subscribe(options);
                });
            });
        return {
            dispose: function () {
                disposable && disposable.dispose();
                disposable = undefined;
            }
        };
    });
}
function getBoundPath(model, path, value, boxed) {
    model || (model = this);
    path || (path = model._path || []);
    if (path.length > 0) {
        model._boxed = (boxed = model._boxed) || true;
        value = getPath(model, path);
        model._boxed = boxed;
    } else {
        value = {
            path: path,
            value: model._cache
        };
    }
    return value;
}
function getPath(model, path) {
    var root = model._root, expired = root.expired;
    var depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, optimizedPath = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    /* Walk Path */
    var key, isKeySet = false;
    height = path.length;
    node = nodeParent = nodeRoot;
    depth = depth;
    follow_path_3814:
        do {
            nodeType = node && node[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
            if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                    nodeType = void 0;
                    nodeValue = void 0;
                    node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                linkPath = nodeValue;
                linkIndex = depth;
                optimizedPath.length = 0;
                linkDepth = 0;
                linkHeight = 0;
                var location, container = linkPath[__CONTAINER] || linkPath;
                if ((location = container[__CONTEXT]) !== void 0) {
                    node = location;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    linkHeight = linkPath.length;
                    while (linkDepth < linkHeight) {
                        optimizedPath[linkDepth] = linkPath[linkDepth++];
                    }
                    optimizedPath.length = linkDepth;
                } else {
                    /* Walk Link */
                    var key$2, isKeySet$2 = false;
                    linkHeight = linkPath.length;
                    node = nodeParent = nodeRoot;
                    linkDepth = linkDepth;
                    follow_link_3956:
                        do {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                    nodeType = void 0;
                                    nodeValue = void 0;
                                    node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                    optimizedPath[optimizedPath.length] = null;
                                }
                                if (node != null && typeof node === 'object') {
                                    var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                    // Set up the hard-link so we don't have to do all
                                    // this work the next time we follow this linkPath.
                                    if (refContext === void 0) {
                                        var backRefs = node[__REFS_LENGTH] || 0;
                                        node[__REF + backRefs] = refContainer;
                                        node[__REFS_LENGTH] = backRefs + 1;
                                        // create a forward link
                                        refContainer[__REF_INDEX] = backRefs;
                                        refContainer[__CONTEXT] = node;
                                        refContainer = backRefs = void 0;
                                    }
                                }
                                node = node;
                                break follow_link_3956;
                            }
                            key$2 = linkPath[linkDepth];
                            nodeParent = node;
                            if (key$2 != null) {
                                node = nodeParent && nodeParent[key$2];
                                optimizedPath[optimizedPath.length = linkDepth] = key$2;
                            }
                            node = node;
                            linkDepth = linkDepth + 1;
                            continue follow_link_3956;
                        } while (true);
                    node = node;
                }
                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                    key = null;
                    node = node;
                    depth = depth;
                    continue follow_path_3814;
                }
            } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                    nodeType = void 0;
                    nodeValue = void 0;
                    node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                node = node;
                break follow_path_3814;
            }
            key = path[depth];
            nodeParent = node;
            if (key != null) {
                node = nodeParent && nodeParent[key];
                optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
            }
            node = node;
            depth = depth + 1;
            continue follow_path_3814;
        } while (true);
    node = node;
    return {
        path: optimizedPath,
        value: node
    };
}
function getPathMap(model, map, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot = Object.create(null), jsonParent = jsonRoot, json = jsonParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 1] = jsonRoot;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    mapStack[0] = map;
    while (depth > -1) {
        var ref = linkIndex = depth;
        refs.length = depth + 1;
        while (linkIndex >= -1) {
            if (!!(ref = refs[linkIndex])) {
                ~linkIndex || ++linkIndex;
                linkHeight = ref.length;
                var i = 0, j = 0;
                while (i < linkHeight) {
                    optimizedPath[j++] = ref[i++];
                }
                i = linkIndex;
                while (i < depth) {
                    optimizedPath[j++] = requestedPath[i++];
                }
                requestedPath.length = i;
                optimizedPath.length = j;
                break;
            }
            --linkIndex;
        }
        /* Walk Path Map */
        var isTerminus = false, offset$2 = 0, keys = void 0, index = void 0, key = void 0, isKeySet = false;
        node = nodeParent = nodes[depth - 1];
        depth = depth;
        follow_path_map_5754:
            do {
                height = depth;
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_5913:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_5913;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_5913;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_map_5754;
                        }
                    } else {
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                if (node !== head) {
                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                    (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                    root$2.__head = root$2.__next = head = node;
                                    head.__next = next;
                                    head.__prev = void 0;
                                }
                                if (tail == null || node === tail) {
                                    root$2.__tail = root$2.__prev = tail = prev || node;
                                }
                                root$2 = head = tail = next = prev = void 0;
                            }
                            ;
                            var i = -1, n = requestedPath.length, copy = new Array(n);
                            while (++i < n) {
                                copy[i] = requestedPath[i];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                            while (++i$2 < n$2) {
                                copy$2[i$2] = optimizedPath[i$2];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$3 = -1, n$3, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$3 = src.length);
                                                        while (++i$3 < n$3) {
                                                            dest[i$3] = src[i$3];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$4 = -1, n$4, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$4 = src$2.length);
                                                        while (++i$4 < n$4) {
                                                            dest$2[i$4] = src$2[i$4];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$5 = -1, n$5, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$5 = src$3.length);
                                                    while (++i$5 < n$5) {
                                                        dest$3[i$5] = src$3[i$5];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$6 = -1, n$6, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$6 = src$4.length);
                                                        while (++i$6 < n$6) {
                                                            dest$4[i$6] = src$4[i$6];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$7 = -1, n$7, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$7 = src$5.length);
                                                        while (++i$7 < n$7) {
                                                            dest$5[i$7] = src$5[i$7];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                if (node !== head$2) {
                                    next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                    prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                    (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                    root$3.__head = root$3.__next = head$2 = node;
                                    head$2.__next = next$2;
                                    head$2.__prev = void 0;
                                }
                                if (tail$2 == null || node === tail$2) {
                                    root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                }
                                root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            var pbv = Object.create(null), i$8 = -1, n$8 = requestedPath.length, val, copy$3 = new Array(n$8);
                            while (++i$8 < n$8) {
                                copy$3[i$8] = requestedPath[i$8];
                            }
                            var dest$6 = node, src$6 = dest$6, i$9 = -1, n$9, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$9 = src$6.length);
                                    while (++i$9 < n$9) {
                                        dest$6[i$9] = src$6[i$9];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$10 = -1, j = -1, l = -1, o, n$10 = nodePath.length, k = requestedPath.length, req = [], opt = [], x$7, map$2, offset$3, keys$2, key$3, index$2;
                            while (++i$10 < n$10) {
                                req[i$10] = nodePath[i$10];
                            }
                            while (++j < k) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$10++] = (keys$2 = mapStack[(offset$3 = ++l * 4) + 1]) && keys$2.length > 1 && [x$7] || x$7;
                                }
                            }
                            j = -1;
                            n$10 = optimizedPath.length;
                            while (++j < n$10) {
                                opt[j] = optimizedPath[j];
                            }
                            o = n$10 - depth;
                            i$10 = (j = depth) - 1;
                            while (j > i$10) {
                                if ((map$2 = mapStack[offset$3 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$2 = mapStack[offset$3 + 1] || (mapStack[offset$3 + 1] = Object.keys(map$2))) && ((index$2 = mapStack[offset$3 + 2] || (mapStack[offset$3 + 2] = 0)) || true) && keys$2.length > 0) {
                                    if ((mapStack[offset$3 + 2] = ++index$2) - 1 < keys$2.length) {
                                        key$3 = keys$2[index$2 - 1];
                                        if (keys$2.length > 1) {
                                            keys$2 = req[j] || (req[j] = []);
                                            if (key$3 === __NULL) {
                                                keys$2[keys$2.length] = null;
                                            } else {
                                                keys$2[keys$2.length] = key$3;
                                                keys$2 = opt[j + o] || (opt[j + o] = []);
                                                keys$2[keys$2.length] = key$3;
                                            }
                                        } else if (key$3 === __NULL) {
                                            req[j] = null;
                                        } else {
                                            req[j] = opt[j + o] = key$3;
                                        }
                                        mapStack[offset$3 = ++j * 4] = map$2[key$3];
                                        continue;
                                    }
                                }
                                delete mapStack[offset$3 = j-- * 4];
                                delete mapStack[offset$3 + 1];
                                delete mapStack[offset$3 + 2];
                                delete mapStack[offset$3 + 3];
                            }
                            j = -1;
                            i$10 = -1;
                            n$10 = opt.length;
                            while (++j < n$10) {
                                opt[j] != null && (opt[++i$10] = opt[j]);
                            }
                            req.pathSetIndex = 0;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        ;
                        node = node;
                        break follow_path_map_5754;
                    }
                }
                if ((key = keys[index]) == null) {
                    node = node;
                    break follow_path_map_5754;
                } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                    mapStack[(depth + 1) * 4 + 3] = key;
                } else {
                    mapStack[offset$2 + 2] = index + 1;
                    node = node;
                    depth = depth;
                    continue follow_path_map_5754;
                }
                nodes[depth - 1] = nodeParent = node;
                requestedPath[requestedPath.length = depth] = key;
                keysets[keysets.length = depth] = isKeySet ? key : void 0;
                if (key != null) {
                    node = nodeParent && nodeParent[key];
                    optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                    // Only create a branch if:
                    //  1. The current key is a keyset.
                    //  2. The caller supplied a JSON root seed.
                    //  3. The path depth is past the bound path length.
                    //  4. The current node is a branch or reference.
                    if (isKeySet === true && jsonRoot != null && depth >= offset) {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            var jsonKey$2 = void 0, jsonDepth$2 = depth;
                            do {
                                if (jsonKey$2 == null) {
                                    jsonKey$2 = keysets[jsonDepth$2];
                                }
                                if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                    if ((json = jsonParent[jsonKey$2]) == null) {
                                        json = jsonParent[jsonKey$2] = Object.create(null);
                                    }
                                    jsonParent = json;
                                    break;
                                }
                            } while (jsonDepth$2 >= offset - 2);
                            jsons[depth] = jsonParent;
                        }
                    }
                }
                node = node;
                depth = depth + 1;
                continue follow_path_map_5754;
            } while (true);
        node = node;
        var offset$4 = depth * 4, keys$3, index$3;
        do {
            delete mapStack[offset$4 + 0];
            delete mapStack[offset$4 + 1];
            delete mapStack[offset$4 + 2];
            delete mapStack[offset$4 + 3];
        } while ((keys$3 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$3 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$3) >= keys$3.length);
    }
    return {
        'values': [{ json: jsons[offset - 1] }],
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathMapsAsJSON(model, pathMaps, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, map, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[index];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_4402:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_4561:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                requestedPath[requestedPath.length] = null;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_4561;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        if (key$2 != null) {
                                            node = nodeParent && nodeParent[key$2];
                                            optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        }
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_4561;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_4402;
                            }
                        } else {
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    if (node !== head) {
                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                        root$2.__head = root$2.__next = head = node;
                                        head.__next = next;
                                        head.__prev = void 0;
                                    }
                                    if (tail == null || node === tail) {
                                        root$2.__tail = root$2.__prev = tail = prev || node;
                                    }
                                    root$2 = head = tail = next = prev = void 0;
                                }
                                ;
                                var i = -1, n = requestedPath.length, copy = new Array(n);
                                while (++i < n) {
                                    copy[i] = requestedPath[i];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                                while (++i$2 < n$2) {
                                    copy$2[i$2] = optimizedPath[i$2];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Insert the JSON value if:
                                //  1. The caller supplied a JSON root seed.
                                //  2. The path depth is past the bound path length.
                                //  3. The current node is a leaf or reference.
                                if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    var jsonKey = void 0, jsonDepth = depth;
                                    do {
                                        if (jsonKey == null) {
                                            jsonKey = keysets[jsonDepth];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                            if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest = node, src = dest, i$3 = -1, n$3, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$3 = src.length);
                                                            while (++i$3 < n$3) {
                                                                dest[i$3] = src[i$3];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$4 = -1, n$4, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$4 = src$2.length);
                                                            while (++i$4 < n$4) {
                                                                dest$2[i$4] = src$2[i$4];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                }
                                            } else if (boxed === true) {
                                                var dest$3 = node, src$3 = dest$3, i$5 = -1, n$5, x$3;
                                                if (dest$3 != null && typeof dest$3 === 'object') {
                                                    if (Array.isArray(src$3)) {
                                                        dest$3 = new Array(n$5 = src$3.length);
                                                        while (++i$5 < n$5) {
                                                            dest$3[i$5] = src$3[i$5];
                                                        }
                                                    } else {
                                                        dest$3 = Object.create(null);
                                                        for (x$3 in src$3) {
                                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                        }
                                                    }
                                                }
                                                json = dest$3;
                                                if (nodeType === SENTINEL) {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$6 = -1, n$6, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$6 = src$4.length);
                                                            while (++i$6 < n$6) {
                                                                dest$4[i$6] = src$4[i$6];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json.value = dest$4;
                                                }
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$7 = -1, n$7, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$7 = src$5.length);
                                                            while (++i$7 < n$7) {
                                                                dest$5[i$7] = src$5[i$7];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[jsonKey] = json;
                                            break;
                                        }
                                    } while (jsonDepth >= offset - 2);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                    if (node !== head$2) {
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                        root$3.__head = root$3.__next = head$2 = node;
                                        head$2.__next = next$2;
                                        head$2.__prev = void 0;
                                    }
                                    if (tail$2 == null || node === tail$2) {
                                        root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                    }
                                    root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                var pbv = Object.create(null), i$8 = -1, n$8 = requestedPath.length, val, copy$3 = new Array(n$8);
                                while (++i$8 < n$8) {
                                    copy$3[i$8] = requestedPath[i$8];
                                }
                                var dest$6 = node, src$6 = dest$6, i$9 = -1, n$9, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$9 = src$6.length);
                                        while (++i$9 < n$9) {
                                            dest$6[i$9] = src$6[i$9];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val = dest$6;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$10 = -1, j = -1, l = -1, o, n$10 = nodePath.length, k = requestedPath.length, req = [], opt = [], x$7, map$2, offset$3, keys$2, key$3, index$3;
                                while (++i$10 < n$10) {
                                    req[i$10] = nodePath[i$10];
                                }
                                while (++j < k) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$10++] = (keys$2 = mapStack[(offset$3 = ++l * 4) + 1]) && keys$2.length > 1 && [x$7] || x$7;
                                    }
                                }
                                j = -1;
                                n$10 = optimizedPath.length;
                                while (++j < n$10) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$10 - depth;
                                i$10 = (j = depth) - 1;
                                while (j > i$10) {
                                    if ((map$2 = mapStack[offset$3 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$2 = mapStack[offset$3 + 1] || (mapStack[offset$3 + 1] = Object.keys(map$2))) && ((index$3 = mapStack[offset$3 + 2] || (mapStack[offset$3 + 2] = 0)) || true) && keys$2.length > 0) {
                                        if ((mapStack[offset$3 + 2] = ++index$3) - 1 < keys$2.length) {
                                            key$3 = keys$2[index$3 - 1];
                                            if (keys$2.length > 1) {
                                                keys$2 = req[j] || (req[j] = []);
                                                if (key$3 === __NULL) {
                                                    keys$2[keys$2.length] = null;
                                                } else {
                                                    keys$2[keys$2.length] = key$3;
                                                    keys$2 = opt[j + o] || (opt[j + o] = []);
                                                    keys$2[keys$2.length] = key$3;
                                                }
                                            } else if (key$3 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$3;
                                            }
                                            mapStack[offset$3 = ++j * 4] = map$2[key$3];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$3 = j-- * 4];
                                    delete mapStack[offset$3 + 1];
                                    delete mapStack[offset$3 + 2];
                                    delete mapStack[offset$3 + 3];
                                }
                                j = -1;
                                i$10 = -1;
                                n$10 = opt.length;
                                while (++j < n$10) {
                                    opt[j] != null && (opt[++i$10] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_4402;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_4402;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_4402;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = isKeySet ? key : void 0;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        // Only create a branch if:
                        //  1. The current key is a keyset.
                        //  2. The caller supplied a JSON root seed.
                        //  3. The path depth is past the bound path length.
                        //  4. The current node is a branch or reference.
                        if (isKeySet === true && jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        }
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_4402;
                } while (true);
            node = node;
            var offset$4 = depth * 4, keys$3, index$4;
            do {
                delete mapStack[offset$4 + 0];
                delete mapStack[offset$4 + 1];
                delete mapStack[offset$4 + 2];
                delete mapStack[offset$4 + 3];
            } while ((keys$3 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$4 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$4) >= keys$3.length);
        }
        values && (values[index] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathMapsAsJSONG(model, pathMaps, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = true, map, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            json = jsonParent = jsons[depth - 1];
            depth = depth;
            follow_path_map_6517:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            json = jsonParent = jsonRoot;
                            linkDepth = linkDepth;
                            follow_link_6663:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_6663;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    jsonParent = json;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        json = jsonParent && jsonParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        // Create a JSONG branch, or insert the value if:
                                        //  1. The caller provided a JSONG root seed.
                                        //  2. The node is a branch or value, or materialized mode is on.
                                        if (jsonRoot != null) {
                                            if (node != null) {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = node[$TYPE] === SENTINEL ? node[VALUE] : node;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (boxed === true) {
                                                        var dest = node, src = dest, i = -1, n, x;
                                                        if (dest != null && typeof dest === 'object') {
                                                            if (Array.isArray(src)) {
                                                                dest = new Array(n = src.length);
                                                                while (++i < n) {
                                                                    dest[i] = src[i];
                                                                }
                                                            } else {
                                                                dest = Object.create(null);
                                                                for (x in src) {
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                            }
                                                        }
                                                        json = dest;
                                                    } else {
                                                        var dest$2 = nodeValue, src$2 = dest$2, i$2 = -1, n$2, x$2;
                                                        if (dest$2 != null && typeof dest$2 === 'object') {
                                                            if (Array.isArray(src$2)) {
                                                                dest$2 = new Array(n$2 = src$2.length);
                                                                while (++i$2 < n$2) {
                                                                    dest$2[i$2] = src$2[i$2];
                                                                }
                                                            } else {
                                                                dest$2 = Object.create(null);
                                                                for (x$2 in src$2) {
                                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$2;
                                                    }
                                                } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                                    if ((json = jsonParent[key$2]) == null) {
                                                        json = Object.create(null);
                                                    } else if (typeof json !== 'object') {
                                                        throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                                    }
                                                } else if (materialized === true) {
                                                    if (node == null) {
                                                        json = Object.create(null);
                                                        json[$TYPE] = SENTINEL;
                                                    } else if (nodeValue === void 0) {
                                                        var dest$3 = node, src$3 = dest$3, i$3 = -1, n$3, x$3;
                                                        if (dest$3 != null && typeof dest$3 === 'object') {
                                                            if (Array.isArray(src$3)) {
                                                                dest$3 = new Array(n$3 = src$3.length);
                                                                while (++i$3 < n$3) {
                                                                    dest$3[i$3] = src$3[i$3];
                                                                }
                                                            } else {
                                                                dest$3 = Object.create(null);
                                                                for (x$3 in src$3) {
                                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$3;
                                                    } else {
                                                        var dest$4 = nodeValue, src$4 = dest$4, i$4 = -1, n$4, x$4;
                                                        if (dest$4 != null && typeof dest$4 === 'object') {
                                                            if (Array.isArray(src$4)) {
                                                                dest$4 = new Array(n$4 = src$4.length);
                                                                while (++i$4 < n$4) {
                                                                    dest$4[i$4] = src$4[i$4];
                                                                }
                                                            } else {
                                                                dest$4 = Object.create(null);
                                                                for (x$4 in src$4) {
                                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$4;
                                                    }
                                                } else if (boxed === true) {
                                                    json = node;
                                                } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                    if (node != null) {
                                                        var dest$5 = nodeValue, src$5 = dest$5, i$5 = -1, n$5, x$5;
                                                        if (dest$5 != null && typeof dest$5 === 'object') {
                                                            if (Array.isArray(src$5)) {
                                                                dest$5 = new Array(n$5 = src$5.length);
                                                                while (++i$5 < n$5) {
                                                                    dest$5[i$5] = src$5[i$5];
                                                                }
                                                            } else {
                                                                dest$5 = Object.create(null);
                                                                for (x$5 in src$5) {
                                                                    !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$5;
                                                    } else {
                                                        json = void 0;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else if (materialized === true) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[key$2] = json;
                                        }
                                    }
                                    node = node;
                                    json = json;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_6663;
                                } while (true);
                            node = node;
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                json = json;
                                depth = depth;
                                continue follow_path_map_6517;
                            }
                        } else {
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    if (node !== head) {
                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                        root$2.__head = root$2.__next = head = node;
                                        head.__next = next;
                                        head.__prev = void 0;
                                    }
                                    if (tail == null || node === tail) {
                                        root$2.__tail = root$2.__prev = tail = prev || node;
                                    }
                                    root$2 = head = tail = next = prev = void 0;
                                }
                                ;
                                var i$6 = -1, n$6 = requestedPath.length, copy = new Array(n$6);
                                while (++i$6 < n$6) {
                                    copy[i$6] = requestedPath[i$6];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$7 = -1, n$7 = optimizedPath.length, copy$2 = new Array(n$7);
                                while (++i$7 < n$7) {
                                    copy$2[i$7] = optimizedPath[i$7];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Create a JSONG value if:
                                //  1. The caller provided a JSONG root seed.
                                //  2. The key isn't null.
                                //  3. The current node is a value or reference.
                                if (jsonRoot != null && key != null && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if (materialized === true) {
                                        if (node == null) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else if (nodeValue === void 0) {
                                            var dest$6 = node, src$6 = dest$6, i$8 = -1, n$8, x$6;
                                            if (dest$6 != null && typeof dest$6 === 'object') {
                                                if (Array.isArray(src$6)) {
                                                    dest$6 = new Array(n$8 = src$6.length);
                                                    while (++i$8 < n$8) {
                                                        dest$6[i$8] = src$6[i$8];
                                                    }
                                                } else {
                                                    dest$6 = Object.create(null);
                                                    for (x$6 in src$6) {
                                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                                    }
                                                }
                                            }
                                            json = dest$6;
                                        } else {
                                            var dest$7 = nodeValue, src$7 = dest$7, i$9 = -1, n$9, x$7;
                                            if (dest$7 != null && typeof dest$7 === 'object') {
                                                if (Array.isArray(src$7)) {
                                                    dest$7 = new Array(n$9 = src$7.length);
                                                    while (++i$9 < n$9) {
                                                        dest$7[i$9] = src$7[i$9];
                                                    }
                                                } else {
                                                    dest$7 = Object.create(null);
                                                    for (x$7 in src$7) {
                                                        !(!(x$7[0] !== '_' || x$7[1] !== '_') || (x$7 === __SELF || x$7 === __PARENT || x$7 === __ROOT)) && (dest$7[x$7] = src$7[x$7]);
                                                    }
                                                }
                                            }
                                            json = dest$7;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        }
                                    } else if (boxed === true) {
                                        var dest$8 = node, src$8 = dest$8, i$10 = -1, n$10, x$8;
                                        if (dest$8 != null && typeof dest$8 === 'object') {
                                            if (Array.isArray(src$8)) {
                                                dest$8 = new Array(n$10 = src$8.length);
                                                while (++i$10 < n$10) {
                                                    dest$8[i$10] = src$8[i$10];
                                                }
                                            } else {
                                                dest$8 = Object.create(null);
                                                for (x$8 in src$8) {
                                                    !(!(x$8[0] !== '_' || x$8[1] !== '_') || (x$8 === __SELF || x$8 === __PARENT || x$8 === __ROOT)) && (dest$8[x$8] = src$8[x$8]);
                                                }
                                            }
                                        }
                                        json = dest$8;
                                        if (nodeType === SENTINEL) {
                                            var dest$9 = nodeValue, src$9 = dest$9, i$11 = -1, n$11, x$9;
                                            if (dest$9 != null && typeof dest$9 === 'object') {
                                                if (Array.isArray(src$9)) {
                                                    dest$9 = new Array(n$11 = src$9.length);
                                                    while (++i$11 < n$11) {
                                                        dest$9[i$11] = src$9[i$11];
                                                    }
                                                } else {
                                                    dest$9 = Object.create(null);
                                                    for (x$9 in src$9) {
                                                        !(!(x$9[0] !== '_' || x$9[1] !== '_') || (x$9 === __SELF || x$9 === __PARENT || x$9 === __ROOT)) && (dest$9[x$9] = src$9[x$9]);
                                                    }
                                                }
                                            }
                                            json.value = dest$9;
                                        }
                                    } else if (errorsAsValues === true || nodeType !== ERROR) {
                                        if (node != null) {
                                            var dest$10 = nodeValue, src$10 = dest$10, i$12 = -1, n$12, x$10;
                                            if (dest$10 != null && typeof dest$10 === 'object') {
                                                if (Array.isArray(src$10)) {
                                                    dest$10 = new Array(n$12 = src$10.length);
                                                    while (++i$12 < n$12) {
                                                        dest$10[i$12] = src$10[i$12];
                                                    }
                                                } else {
                                                    dest$10 = Object.create(null);
                                                    for (x$10 in src$10) {
                                                        !(!(x$10[0] !== '_' || x$10[1] !== '_') || (x$10 === __SELF || x$10 === __PARENT || x$10 === __ROOT)) && (dest$10[x$10] = src$10[x$10]);
                                                    }
                                                }
                                            }
                                            json = dest$10;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                    jsonParent[key] = json;
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                    if (node !== head$2) {
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                        root$3.__head = root$3.__next = head$2 = node;
                                        head$2.__next = next$2;
                                        head$2.__prev = void 0;
                                    }
                                    if (tail$2 == null || node === tail$2) {
                                        root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                    }
                                    root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                var pbv = Object.create(null), i$13 = -1, n$13 = requestedPath.length, val, copy$3 = new Array(n$13);
                                while (++i$13 < n$13) {
                                    copy$3[i$13] = requestedPath[i$13];
                                }
                                var dest$11 = node, src$11 = dest$11, i$14 = -1, n$14, x$11;
                                if (dest$11 != null && typeof dest$11 === 'object') {
                                    if (Array.isArray(src$11)) {
                                        dest$11 = new Array(n$14 = src$11.length);
                                        while (++i$14 < n$14) {
                                            dest$11[i$14] = src$11[i$14];
                                        }
                                    } else {
                                        dest$11 = Object.create(null);
                                        for (x$11 in src$11) {
                                            !(!(x$11[0] !== '_' || x$11[1] !== '_') || (x$11 === __SELF || x$11 === __PARENT || x$11 === __ROOT)) && (dest$11[x$11] = src$11[x$11]);
                                        }
                                    }
                                }
                                val = dest$11;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$15 = -1, j = -1, l = -1, o, n$15 = nodePath.length, k = requestedPath.length, req = [], opt = [], x$12, map$2, offset$3, keys$2, key$3, index$3;
                                while (++i$15 < n$15) {
                                    req[i$15] = nodePath[i$15];
                                }
                                while (++j < k) {
                                    if ((x$12 = requestedPath[j]) != null) {
                                        req[i$15++] = (keys$2 = mapStack[(offset$3 = ++l * 4) + 1]) && keys$2.length > 1 && [x$12] || x$12;
                                    }
                                }
                                j = -1;
                                n$15 = optimizedPath.length;
                                while (++j < n$15) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$15 - depth;
                                i$15 = (j = depth) - 1;
                                while (j > i$15) {
                                    if ((map$2 = mapStack[offset$3 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$2 = mapStack[offset$3 + 1] || (mapStack[offset$3 + 1] = Object.keys(map$2))) && ((index$3 = mapStack[offset$3 + 2] || (mapStack[offset$3 + 2] = 0)) || true) && keys$2.length > 0) {
                                        if ((mapStack[offset$3 + 2] = ++index$3) - 1 < keys$2.length) {
                                            key$3 = keys$2[index$3 - 1];
                                            if (keys$2.length > 1) {
                                                keys$2 = req[j] || (req[j] = []);
                                                if (key$3 === __NULL) {
                                                    keys$2[keys$2.length] = null;
                                                } else {
                                                    keys$2[keys$2.length] = key$3;
                                                    keys$2 = opt[j + o] || (opt[j + o] = []);
                                                    keys$2[keys$2.length] = key$3;
                                                }
                                            } else if (key$3 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$3;
                                            }
                                            mapStack[offset$3 = ++j * 4] = map$2[key$3];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$3 = j-- * 4];
                                    delete mapStack[offset$3 + 1];
                                    delete mapStack[offset$3 + 2];
                                    delete mapStack[offset$3 + 3];
                                }
                                j = -1;
                                i$15 = -1;
                                n$15 = opt.length;
                                while (++j < n$15) {
                                    opt[j] != null && (opt[++i$15] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_6517;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_6517;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        json = json;
                        depth = depth;
                        continue follow_path_map_6517;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    jsons[depth - 1] = jsonParent = json;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        json = jsonParent && jsonParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        // Create a JSONG branch or insert a reference if:
                        //  1. The caller provided a JSONG root seed.
                        //  2. The current node is a branch or reference.
                        if (jsonRoot != null) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                if (boxed === true) {
                                    var dest$12 = node, src$12 = dest$12, i$16 = -1, n$16, x$13;
                                    if (dest$12 != null && typeof dest$12 === 'object') {
                                        if (Array.isArray(src$12)) {
                                            dest$12 = new Array(n$16 = src$12.length);
                                            while (++i$16 < n$16) {
                                                dest$12[i$16] = src$12[i$16];
                                            }
                                        } else {
                                            dest$12 = Object.create(null);
                                            for (x$13 in src$12) {
                                                !(!(x$13[0] !== '_' || x$13[1] !== '_') || (x$13 === __SELF || x$13 === __PARENT || x$13 === __ROOT)) && (dest$12[x$13] = src$12[x$13]);
                                            }
                                        }
                                    }
                                    json = dest$12;
                                } else {
                                    var dest$13 = nodeValue, src$13 = dest$13, i$17 = -1, n$17, x$14;
                                    if (dest$13 != null && typeof dest$13 === 'object') {
                                        if (Array.isArray(src$13)) {
                                            dest$13 = new Array(n$17 = src$13.length);
                                            while (++i$17 < n$17) {
                                                dest$13[i$17] = src$13[i$17];
                                            }
                                        } else {
                                            dest$13 = Object.create(null);
                                            for (x$14 in src$13) {
                                                !(!(x$14[0] !== '_' || x$14[1] !== '_') || (x$14 === __SELF || x$14 === __PARENT || x$14 === __ROOT)) && (dest$13[x$14] = src$13[x$14]);
                                            }
                                        }
                                    }
                                    json = dest$13;
                                }
                                jsonParent[key] = json;
                            } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                if ((json = jsonParent[key]) == null) {
                                    json = Object.create(null);
                                } else if (typeof json !== 'object') {
                                    throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                }
                                jsonParent[key] = json;
                            }
                        }
                    }
                    node = node;
                    json = json;
                    depth = depth + 1;
                    continue follow_path_map_6517;
                } while (true);
            node = node;
            var offset$4 = depth * 4, keys$3, index$4;
            do {
                delete mapStack[offset$4 + 0];
                delete mapStack[offset$4 + 1];
                delete mapStack[offset$4 + 2];
                delete mapStack[offset$4 + 3];
            } while ((keys$3 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$4 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$4) >= keys$3.length);
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && {
        jsong: jsons[offset - 1],
        paths: requestedPaths
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathMapsAsPathMap(model, pathMaps, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, map, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_8926:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_9084:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                requestedPath[requestedPath.length] = null;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_9084;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        if (key$2 != null) {
                                            node = nodeParent && nodeParent[key$2];
                                            optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        }
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_9084;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_8926;
                            }
                        } else {
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    if (node !== head) {
                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                        root$2.__head = root$2.__next = head = node;
                                        head.__next = next;
                                        head.__prev = void 0;
                                    }
                                    if (tail == null || node === tail) {
                                        root$2.__tail = root$2.__prev = tail = prev || node;
                                    }
                                    root$2 = head = tail = next = prev = void 0;
                                }
                                ;
                                var i = -1, n = requestedPath.length, copy = new Array(n);
                                while (++i < n) {
                                    copy[i] = requestedPath[i];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                                while (++i$2 < n$2) {
                                    copy$2[i$2] = optimizedPath[i$2];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Insert the JSON value if:
                                //  1. The caller supplied a JSON root seed.
                                //  2. The path depth is past the bound path length.
                                //  3. The current node is a leaf or reference.
                                if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    var jsonKey = void 0, jsonDepth = depth;
                                    do {
                                        if (jsonKey == null) {
                                            jsonKey = keysets[jsonDepth];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                            if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest = node, src = dest, i$3 = -1, n$3, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$3 = src.length);
                                                            while (++i$3 < n$3) {
                                                                dest[i$3] = src[i$3];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$4 = -1, n$4, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$4 = src$2.length);
                                                            while (++i$4 < n$4) {
                                                                dest$2[i$4] = src$2[i$4];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                }
                                            } else if (boxed === true) {
                                                var dest$3 = node, src$3 = dest$3, i$5 = -1, n$5, x$3;
                                                if (dest$3 != null && typeof dest$3 === 'object') {
                                                    if (Array.isArray(src$3)) {
                                                        dest$3 = new Array(n$5 = src$3.length);
                                                        while (++i$5 < n$5) {
                                                            dest$3[i$5] = src$3[i$5];
                                                        }
                                                    } else {
                                                        dest$3 = Object.create(null);
                                                        for (x$3 in src$3) {
                                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                        }
                                                    }
                                                }
                                                json = dest$3;
                                                if (nodeType === SENTINEL) {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$6 = -1, n$6, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$6 = src$4.length);
                                                            while (++i$6 < n$6) {
                                                                dest$4[i$6] = src$4[i$6];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json.value = dest$4;
                                                }
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$7 = -1, n$7, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$7 = src$5.length);
                                                            while (++i$7 < n$7) {
                                                                dest$5[i$7] = src$5[i$7];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[jsonKey] = json;
                                            break;
                                        }
                                    } while (jsonDepth >= offset - 2);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                    if (node !== head$2) {
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                        root$3.__head = root$3.__next = head$2 = node;
                                        head$2.__next = next$2;
                                        head$2.__prev = void 0;
                                    }
                                    if (tail$2 == null || node === tail$2) {
                                        root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                    }
                                    root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                var pbv = Object.create(null), i$8 = -1, n$8 = requestedPath.length, val, copy$3 = new Array(n$8);
                                while (++i$8 < n$8) {
                                    copy$3[i$8] = requestedPath[i$8];
                                }
                                var dest$6 = node, src$6 = dest$6, i$9 = -1, n$9, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$9 = src$6.length);
                                        while (++i$9 < n$9) {
                                            dest$6[i$9] = src$6[i$9];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val = dest$6;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$10 = -1, j = -1, l = -1, o, n$10 = nodePath.length, k = requestedPath.length, req = [], opt = [], x$7, map$2, offset$3, keys$2, key$3, index$3;
                                while (++i$10 < n$10) {
                                    req[i$10] = nodePath[i$10];
                                }
                                while (++j < k) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$10++] = (keys$2 = mapStack[(offset$3 = ++l * 4) + 1]) && keys$2.length > 1 && [x$7] || x$7;
                                    }
                                }
                                j = -1;
                                n$10 = optimizedPath.length;
                                while (++j < n$10) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$10 - depth;
                                i$10 = (j = depth) - 1;
                                while (j > i$10) {
                                    if ((map$2 = mapStack[offset$3 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$2 = mapStack[offset$3 + 1] || (mapStack[offset$3 + 1] = Object.keys(map$2))) && ((index$3 = mapStack[offset$3 + 2] || (mapStack[offset$3 + 2] = 0)) || true) && keys$2.length > 0) {
                                        if ((mapStack[offset$3 + 2] = ++index$3) - 1 < keys$2.length) {
                                            key$3 = keys$2[index$3 - 1];
                                            if (keys$2.length > 1) {
                                                keys$2 = req[j] || (req[j] = []);
                                                if (key$3 === __NULL) {
                                                    keys$2[keys$2.length] = null;
                                                } else {
                                                    keys$2[keys$2.length] = key$3;
                                                    keys$2 = opt[j + o] || (opt[j + o] = []);
                                                    keys$2[keys$2.length] = key$3;
                                                }
                                            } else if (key$3 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$3;
                                            }
                                            mapStack[offset$3 = ++j * 4] = map$2[key$3];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$3 = j-- * 4];
                                    delete mapStack[offset$3 + 1];
                                    delete mapStack[offset$3 + 2];
                                    delete mapStack[offset$3 + 3];
                                }
                                j = -1;
                                i$10 = -1;
                                n$10 = opt.length;
                                while (++j < n$10) {
                                    opt[j] != null && (opt[++i$10] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_8926;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_8926;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_8926;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        // Only create a branch if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a branch or reference.
                        if (jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        } else if (typeof json !== 'object') {
                                            throw new Error('Fatal Falcor Error: encountered value in branch position while building Path Map.');
                                        }
                                        json[__KEY] = jsonKey$2;
                                        json[__GENERATION] = node[__GENERATION] || 0;
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_8926;
                } while (true);
            node = node;
            var offset$4 = depth * 4, keys$3, index$4;
            do {
                delete mapStack[offset$4 + 0];
                delete mapStack[offset$4 + 1];
                delete mapStack[offset$4 + 2];
                delete mapStack[offset$4 + 3];
            } while ((keys$3 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$4 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$4) >= keys$3.length);
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathMapsAsValues(model, pathMaps, values, errorSelector, boundPath) {
    var onNext;
    if (Array.isArray(values)) {
        values.length = 0;
    } else {
        onNext = values;
        values = undefined;
    }
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, map, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_10730:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_10886:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                requestedPath[requestedPath.length] = null;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_10886;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        if (key$2 != null) {
                                            node = nodeParent && nodeParent[key$2];
                                            optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        }
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_10886;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_10730;
                            }
                        } else {
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    if (node !== head) {
                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                        root$2.__head = root$2.__next = head = node;
                                        head.__next = next;
                                        head.__prev = void 0;
                                    }
                                    if (tail == null || node === tail) {
                                        root$2.__tail = root$2.__prev = tail = prev || node;
                                    }
                                    root$2 = head = tail = next = prev = void 0;
                                }
                                ;
                                var i = -1, n = requestedPath.length, copy = new Array(n);
                                while (++i < n) {
                                    copy[i] = requestedPath[i];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                                while (++i$2 < n$2) {
                                    copy$2[i$2] = optimizedPath[i$2];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                var pbv = Object.create(null), i$3 = -1, n$3 = requestedPath.length, val, copy$3 = new Array(n$3);
                                while (++i$3 < n$3) {
                                    copy$3[i$3] = requestedPath[i$3];
                                }
                                if (materialized === true) {
                                    if (node == null) {
                                        val = Object.create(null);
                                        val[$TYPE] = SENTINEL;
                                    } else if (nodeValue === void 0) {
                                        var dest = node, src = dest, i$4 = -1, n$4, x;
                                        if (dest != null && typeof dest === 'object') {
                                            if (Array.isArray(src)) {
                                                dest = new Array(n$4 = src.length);
                                                while (++i$4 < n$4) {
                                                    dest[i$4] = src[i$4];
                                                }
                                            } else {
                                                dest = Object.create(null);
                                                for (x in src) {
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                            }
                                        }
                                        val = dest;
                                    } else {
                                        var dest$2 = nodeValue, src$2 = dest$2, i$5 = -1, n$5, x$2;
                                        if (dest$2 != null && typeof dest$2 === 'object') {
                                            if (Array.isArray(src$2)) {
                                                dest$2 = new Array(n$5 = src$2.length);
                                                while (++i$5 < n$5) {
                                                    dest$2[i$5] = src$2[i$5];
                                                }
                                            } else {
                                                dest$2 = Object.create(null);
                                                for (x$2 in src$2) {
                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                }
                                            }
                                        }
                                        val = dest$2;
                                    }
                                } else if (boxed === true) {
                                    var dest$3 = node, src$3 = dest$3, i$6 = -1, n$6, x$3;
                                    if (dest$3 != null && typeof dest$3 === 'object') {
                                        if (Array.isArray(src$3)) {
                                            dest$3 = new Array(n$6 = src$3.length);
                                            while (++i$6 < n$6) {
                                                dest$3[i$6] = src$3[i$6];
                                            }
                                        } else {
                                            dest$3 = Object.create(null);
                                            for (x$3 in src$3) {
                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                            }
                                        }
                                    }
                                    val = dest$3;
                                    if (nodeType === SENTINEL) {
                                        var dest$4 = nodeValue, src$4 = dest$4, i$7 = -1, n$7, x$4;
                                        if (dest$4 != null && typeof dest$4 === 'object') {
                                            if (Array.isArray(src$4)) {
                                                dest$4 = new Array(n$7 = src$4.length);
                                                while (++i$7 < n$7) {
                                                    dest$4[i$7] = src$4[i$7];
                                                }
                                            } else {
                                                dest$4 = Object.create(null);
                                                for (x$4 in src$4) {
                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                }
                                            }
                                        }
                                        val.value = dest$4;
                                    }
                                } else {
                                    var dest$5 = nodeValue, src$5 = dest$5, i$8 = -1, n$8, x$5;
                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                        if (Array.isArray(src$5)) {
                                            dest$5 = new Array(n$8 = src$5.length);
                                            while (++i$8 < n$8) {
                                                dest$5[i$8] = src$5[i$8];
                                            }
                                        } else {
                                            dest$5 = Object.create(null);
                                            for (x$5 in src$5) {
                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                            }
                                        }
                                    }
                                    val = dest$5;
                                }
                                pbv.path = copy$3;
                                pbv.value = val;
                                if (values) {
                                    values[values.length] = pbv;
                                } else if (onNext) {
                                    onNext(pbv);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                    if (node !== head$2) {
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                        root$3.__head = root$3.__next = head$2 = node;
                                        head$2.__next = next$2;
                                        head$2.__prev = void 0;
                                    }
                                    if (tail$2 == null || node === tail$2) {
                                        root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                    }
                                    root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                var pbv$2 = Object.create(null), i$9 = -1, n$9 = requestedPath.length, val$2, copy$4 = new Array(n$9);
                                while (++i$9 < n$9) {
                                    copy$4[i$9] = requestedPath[i$9];
                                }
                                var dest$6 = node, src$6 = dest$6, i$10 = -1, n$10, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$10 = src$6.length);
                                        while (++i$10 < n$10) {
                                            dest$6[i$10] = src$6[i$10];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val$2 = dest$6;
                                pbv$2.path = copy$4;
                                pbv$2.value = val$2;
                                errors[errors.length] = pbv$2;
                            } else if (refreshing === true || node == null) {
                                var i$11 = -1, j = -1, l = -1, o, n$11 = nodePath.length, k = requestedPath.length, req = [], opt = [], x$7, map$2, offset$3, keys$2, key$3, index$3;
                                while (++i$11 < n$11) {
                                    req[i$11] = nodePath[i$11];
                                }
                                while (++j < k) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$11++] = (keys$2 = mapStack[(offset$3 = ++l * 4) + 1]) && keys$2.length > 1 && [x$7] || x$7;
                                    }
                                }
                                j = -1;
                                n$11 = optimizedPath.length;
                                while (++j < n$11) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$11 - depth;
                                i$11 = (j = depth) - 1;
                                while (j > i$11) {
                                    if ((map$2 = mapStack[offset$3 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$2 = mapStack[offset$3 + 1] || (mapStack[offset$3 + 1] = Object.keys(map$2))) && ((index$3 = mapStack[offset$3 + 2] || (mapStack[offset$3 + 2] = 0)) || true) && keys$2.length > 0) {
                                        if ((mapStack[offset$3 + 2] = ++index$3) - 1 < keys$2.length) {
                                            key$3 = keys$2[index$3 - 1];
                                            if (keys$2.length > 1) {
                                                keys$2 = req[j] || (req[j] = []);
                                                if (key$3 === __NULL) {
                                                    keys$2[keys$2.length] = null;
                                                } else {
                                                    keys$2[keys$2.length] = key$3;
                                                    keys$2 = opt[j + o] || (opt[j + o] = []);
                                                    keys$2[keys$2.length] = key$3;
                                                }
                                            } else if (key$3 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$3;
                                            }
                                            mapStack[offset$3 = ++j * 4] = map$2[key$3];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$3 = j-- * 4];
                                    delete mapStack[offset$3 + 1];
                                    delete mapStack[offset$3 + 2];
                                    delete mapStack[offset$3 + 3];
                                }
                                j = -1;
                                i$11 = -1;
                                n$11 = opt.length;
                                while (++j < n$11) {
                                    opt[j] != null && (opt[++i$11] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_10730;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_10730;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_10730;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_10730;
                } while (true);
            node = node;
            var offset$4 = depth * 4, keys$3, index$4;
            do {
                delete mapStack[offset$4 + 0];
                delete mapStack[offset$4 + 1];
                delete mapStack[offset$4 + 2];
                delete mapStack[offset$4 + 3];
            } while ((keys$3 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$4 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$4) >= keys$3.length);
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathSet(model, path, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    var errorsAsValues = model._errorsAsValues || false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, optimizedPath = [], keysets = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, jsons = [], jsonRoot = Object.create(null), jsonParent = jsonRoot, json = jsonParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    nodes[-1] = nodeParent;
    jsons[offset - 1] = jsonRoot;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    while (depth > -1) {
        /* Walk Path Set */
        var key = void 0, isKeySet = false;
        height = path.length;
        node = nodeParent = nodes[depth - 1];
        depth = depth;
        follow_path_set_3909:
            do {
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    linkPath = nodeValue;
                    linkIndex = depth;
                    optimizedPath.length = 0;
                    linkDepth = 0;
                    linkHeight = 0;
                    var location, container = linkPath[__CONTAINER] || linkPath;
                    if ((location = container[__CONTEXT]) !== void 0) {
                        node = location;
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        linkHeight = linkPath.length;
                        while (linkDepth < linkHeight) {
                            optimizedPath[linkDepth] = linkPath[linkDepth++];
                        }
                        optimizedPath.length = linkDepth;
                    } else {
                        /* Walk Link */
                        var key$2, isKeySet$2 = false;
                        linkHeight = linkPath.length;
                        node = nodeParent = nodeRoot;
                        linkDepth = linkDepth;
                        follow_link_4144:
                            do {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                        nodeType = void 0;
                                        nodeValue = void 0;
                                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                        // Set up the hard-link so we don't have to do all
                                        // this work the next time we follow this linkPath.
                                        if (refContext === void 0) {
                                            var backRefs = node[__REFS_LENGTH] || 0;
                                            node[__REF + backRefs] = refContainer;
                                            node[__REFS_LENGTH] = backRefs + 1;
                                            // create a forward link
                                            refContainer[__REF_INDEX] = backRefs;
                                            refContainer[__CONTEXT] = node;
                                            refContainer = backRefs = void 0;
                                        }
                                    }
                                    node = node;
                                    break follow_link_4144;
                                }
                                key$2 = linkPath[linkDepth];
                                nodeParent = node;
                                node = node;
                                linkDepth = linkDepth + 1;
                                continue follow_link_4144;
                            } while (true);
                        node = node;
                    }
                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                        key = null;
                        node = node;
                        depth = depth;
                        continue follow_path_set_3909;
                    }
                } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                        if (node != null && (node && node[$EXPIRES]) !== 1) {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                            if (node !== head) {
                                next != null && typeof next === 'object' && (next.__prev = prev);
                                prev != null && typeof prev === 'object' && (prev.__next = next);
                                (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                root$2.__head = root$2.__next = head = node;
                                head.__next = next;
                                head.__prev = void 0;
                            }
                            if (tail == null || node === tail) {
                                root$2.__tail = root$2.__prev = tail = prev || node;
                            }
                            root$2 = head = tail = next = prev = void 0;
                        }
                        ;
                        // Insert the JSON value if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a leaf or reference.
                        if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                            var jsonKey = void 0, jsonDepth = depth;
                            do {
                                if (jsonKey == null) {
                                    jsonKey = keysets[jsonDepth];
                                }
                                if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                    if (materialized === true) {
                                        if (node == null) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else if (nodeValue === void 0) {
                                            var dest = node, src = dest, i = -1, n, x;
                                            if (dest != null && typeof dest === 'object') {
                                                if (Array.isArray(src)) {
                                                    dest = new Array(n = src.length);
                                                    while (++i < n) {
                                                        dest[i] = src[i];
                                                    }
                                                } else {
                                                    dest = Object.create(null);
                                                    for (x in src) {
                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                    }
                                                }
                                            }
                                            json = dest;
                                        } else {
                                            var dest$2 = nodeValue, src$2 = dest$2, i$2 = -1, n$2, x$2;
                                            if (dest$2 != null && typeof dest$2 === 'object') {
                                                if (Array.isArray(src$2)) {
                                                    dest$2 = new Array(n$2 = src$2.length);
                                                    while (++i$2 < n$2) {
                                                        dest$2[i$2] = src$2[i$2];
                                                    }
                                                } else {
                                                    dest$2 = Object.create(null);
                                                    for (x$2 in src$2) {
                                                        !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                    }
                                                }
                                            }
                                            json = dest$2;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        }
                                    } else if (boxed === true) {
                                        var dest$3 = node, src$3 = dest$3, i$3 = -1, n$3, x$3;
                                        if (dest$3 != null && typeof dest$3 === 'object') {
                                            if (Array.isArray(src$3)) {
                                                dest$3 = new Array(n$3 = src$3.length);
                                                while (++i$3 < n$3) {
                                                    dest$3[i$3] = src$3[i$3];
                                                }
                                            } else {
                                                dest$3 = Object.create(null);
                                                for (x$3 in src$3) {
                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                }
                                            }
                                        }
                                        json = dest$3;
                                        if (nodeType === SENTINEL) {
                                            var dest$4 = nodeValue, src$4 = dest$4, i$4 = -1, n$4, x$4;
                                            if (dest$4 != null && typeof dest$4 === 'object') {
                                                if (Array.isArray(src$4)) {
                                                    dest$4 = new Array(n$4 = src$4.length);
                                                    while (++i$4 < n$4) {
                                                        dest$4[i$4] = src$4[i$4];
                                                    }
                                                } else {
                                                    dest$4 = Object.create(null);
                                                    for (x$4 in src$4) {
                                                        !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                    }
                                                }
                                            }
                                            json.value = dest$4;
                                        }
                                    } else if (errorsAsValues === true || nodeType !== ERROR) {
                                        if (node != null) {
                                            var dest$5 = nodeValue, src$5 = dest$5, i$5 = -1, n$5, x$5;
                                            if (dest$5 != null && typeof dest$5 === 'object') {
                                                if (Array.isArray(src$5)) {
                                                    dest$5 = new Array(n$5 = src$5.length);
                                                    while (++i$5 < n$5) {
                                                        dest$5[i$5] = src$5[i$5];
                                                    }
                                                } else {
                                                    dest$5 = Object.create(null);
                                                    for (x$5 in src$5) {
                                                        !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                    }
                                                }
                                            }
                                            json = dest$5;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                    jsonParent[jsonKey] = json;
                                    break;
                                }
                            } while (jsonDepth >= offset - 2);
                        }
                    }
                    node = node;
                    break follow_path_set_3909;
                }
                key = path[depth];
                if (isKeySet = key != null && typeof key === 'object') {
                    if (Array.isArray(key)) {
                        if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    } else {
                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                    }
                }
                if (key === __NULL) {
                    key = null;
                }
                nodes[depth - 1] = nodeParent = node;
                keysets[keysets.length = depth] = isKeySet ? key : void 0;
                if (key != null) {
                    node = nodeParent && nodeParent[key];
                    // Only create a branch if:
                    //  1. The current key is a keyset.
                    //  2. The caller supplied a JSON root seed.
                    //  3. The path depth is past the bound path length.
                    //  4. The current node is a branch or reference.
                    if (isKeySet === true && jsonRoot != null && depth >= offset) {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            var jsonKey$2 = void 0, jsonDepth$2 = depth;
                            do {
                                if (jsonKey$2 == null) {
                                    jsonKey$2 = keysets[jsonDepth$2];
                                }
                                if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                    if ((json = jsonParent[jsonKey$2]) == null) {
                                        json = jsonParent[jsonKey$2] = Object.create(null);
                                    }
                                    jsonParent = json;
                                    break;
                                }
                            } while (jsonDepth$2 >= offset - 2);
                            jsons[depth] = jsonParent;
                        }
                    }
                }
                node = node;
                depth = depth + 1;
                continue follow_path_set_3909;
            } while (true);
        node = node;
        var key$3;
        depth = depth - 1;
        unroll_3996:
            do {
                if (depth < 0) {
                    depth = (path.depth = 0) - 1;
                    break unroll_3996;
                }
                if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                    depth = path.depth = depth - 1;
                    continue unroll_3996;
                }
                if (Array.isArray(key$3)) {
                    if (++key$3.index === key$3.length) {
                        if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_3996;
                        }
                    } else {
                        depth = path.depth = depth;
                        break unroll_3996;
                    }
                }
                if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                    key$3[__OFFSET] = key$3.from;
                    depth = path.depth = depth - 1;
                    continue unroll_3996;
                }
                depth = path.depth = depth;
                break unroll_3996;
            } while (true);
        depth = depth;
    }
    return jsons[offset - 1];
}
function getPathSetsAsJSON(model, pathSets, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = (model._materialized || false) && !model._dataSource && !model._router;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathSets.length; ++index < count;) {
        path = pathSets[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[index];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_6039:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_6275:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_6275;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_6275;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_6039;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            hasValue = true;
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                if (node !== head) {
                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                    (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                    root$2.__head = root$2.__next = head = node;
                                    head.__next = next;
                                    head.__prev = void 0;
                                }
                                if (tail == null || node === tail) {
                                    root$2.__tail = root$2.__prev = tail = prev || node;
                                }
                                root$2 = head = tail = next = prev = void 0;
                            }
                            ;
                            var i = -1, n = requestedPath.length, copy = new Array(n);
                            while (++i < n) {
                                copy[i] = requestedPath[i];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                            while (++i$2 < n$2) {
                                copy$2[i$2] = optimizedPath[i$2];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$3 = -1, n$3, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$3 = src.length);
                                                        while (++i$3 < n$3) {
                                                            dest[i$3] = src[i$3];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$4 = -1, n$4, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$4 = src$2.length);
                                                        while (++i$4 < n$4) {
                                                            dest$2[i$4] = src$2[i$4];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$5 = -1, n$5, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$5 = src$3.length);
                                                    while (++i$5 < n$5) {
                                                        dest$3[i$5] = src$3[i$5];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$6 = -1, n$6, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$6 = src$4.length);
                                                        while (++i$6 < n$6) {
                                                            dest$4[i$6] = src$4[i$6];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$7 = -1, n$7, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$7 = src$5.length);
                                                        while (++i$7 < n$7) {
                                                            dest$5[i$7] = src$5[i$7];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                if (node !== head$2) {
                                    next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                    prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                    (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                    root$3.__head = root$3.__next = head$2 = node;
                                    head$2.__next = next$2;
                                    head$2.__prev = void 0;
                                }
                                if (tail$2 == null || node === tail$2) {
                                    root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                }
                                root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            var pbv = Object.create(null), i$8 = -1, n$8 = requestedPath.length, val, copy$3 = new Array(n$8);
                            while (++i$8 < n$8) {
                                copy$3[i$8] = requestedPath[i$8];
                            }
                            var dest$6 = node, src$6 = dest$6, i$9 = -1, n$9, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$9 = src$6.length);
                                    while (++i$9 < n$9) {
                                        dest$6[i$9] = src$6[i$9];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$10 = -1, j = -1, l = 0, n$10 = nodePath.length, k = requestedPath.length, m, x$7, y, req = [];
                            while (++i$10 < n$10) {
                                req[i$10] = nodePath[i$10];
                            }
                            while (++j < k) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$10++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$10 + l + height - depth;
                            while (i$10 < m) {
                                req[i$10++] = path[l++];
                            }
                            req.length = i$10;
                            req.pathSetIndex = 0;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$11 = -1, n$11 = optimizedPath.length, opt = new Array(n$11 + height - depth), j$2, x$8;
                            while (++i$11 < n$11) {
                                opt[i$11] = optimizedPath[i$11];
                            }
                            for (j$2 = depth, n$11 = height; j$2 < n$11;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$11++] = x$8;
                                }
                            }
                            opt.length = i$11;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_6039;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = isKeySet ? key : void 0;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        // Only create a branch if:
                        //  1. The current key is a keyset.
                        //  2. The caller supplied a JSON root seed.
                        //  3. The path depth is past the bound path length.
                        //  4. The current node is a branch or reference.
                        if (isKeySet === true && jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        }
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_6039;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_6126:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_6126;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_6126;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_6126;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_6126;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_6126;
                    }
                    depth = path.depth = depth;
                    break unroll_6126;
                } while (true);
            depth = depth;
        }
        values && (values[index] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathSetsAsJSONG(model, pathSets, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = (model._materialized || false) && !model._dataSource && !model._router;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = true, path, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathSets.length; ++index < count;) {
        path = pathSets[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            json = jsonParent = jsons[depth - 1];
            depth = depth;
            follow_path_set_8278:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        /* Walk Link */
                        var key$2, isKeySet$2 = false;
                        linkHeight = linkPath.length;
                        node = nodeParent = nodeRoot;
                        json = jsonParent = jsonRoot;
                        linkDepth = linkDepth;
                        follow_link_8495:
                            do {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                        nodeType = void 0;
                                        nodeValue = void 0;
                                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                        // Set up the hard-link so we don't have to do all
                                        // this work the next time we follow this linkPath.
                                        if (refContext === void 0) {
                                            var backRefs = node[__REFS_LENGTH] || 0;
                                            node[__REF + backRefs] = refContainer;
                                            node[__REFS_LENGTH] = backRefs + 1;
                                            // create a forward link
                                            refContainer[__REF_INDEX] = backRefs;
                                            refContainer[__CONTEXT] = node;
                                            refContainer = backRefs = void 0;
                                        }
                                    }
                                    node = node;
                                    break follow_link_8495;
                                }
                                key$2 = linkPath[linkDepth];
                                nodeParent = node;
                                jsonParent = json;
                                if (key$2 != null) {
                                    node = nodeParent && nodeParent[key$2];
                                    json = jsonParent && jsonParent[key$2];
                                    optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    // Create a JSONG branch, or insert the value if:
                                    //  1. The caller provided a JSONG root seed.
                                    //  2. The node is a branch or value, or materialized mode is on.
                                    if (jsonRoot != null) {
                                        if (node != null) {
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = node[$TYPE] === SENTINEL ? node[VALUE] : node;
                                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                if (boxed === true) {
                                                    var dest = node, src = dest, i = -1, n, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n = src.length);
                                                            while (++i < n) {
                                                                dest[i] = src[i];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$2 = -1, n$2, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$2 = src$2.length);
                                                            while (++i$2 < n$2) {
                                                                dest$2[i$2] = src$2[i$2];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                }
                                            } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                                if ((json = jsonParent[key$2]) == null) {
                                                    json = Object.create(null);
                                                } else if (typeof json !== 'object') {
                                                    throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                                }
                                            } else if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest$3 = node, src$3 = dest$3, i$3 = -1, n$3, x$3;
                                                    if (dest$3 != null && typeof dest$3 === 'object') {
                                                        if (Array.isArray(src$3)) {
                                                            dest$3 = new Array(n$3 = src$3.length);
                                                            while (++i$3 < n$3) {
                                                                dest$3[i$3] = src$3[i$3];
                                                            }
                                                        } else {
                                                            dest$3 = Object.create(null);
                                                            for (x$3 in src$3) {
                                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$3;
                                                } else {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$4 = -1, n$4, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$4 = src$4.length);
                                                            while (++i$4 < n$4) {
                                                                dest$4[i$4] = src$4[i$4];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$4;
                                                }
                                            } else if (boxed === true) {
                                                json = node;
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$5 = -1, n$5, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$5 = src$5.length);
                                                            while (++i$5 < n$5) {
                                                                dest$5[i$5] = src$5[i$5];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else if (materialized === true) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[key$2] = json;
                                    }
                                }
                                node = node;
                                json = json;
                                linkDepth = linkDepth + 1;
                                continue follow_link_8495;
                            } while (true);
                        node = node;
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            json = json;
                            depth = depth;
                            continue follow_path_set_8278;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            hasValue = true;
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                if (node !== head) {
                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                    (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                    root$2.__head = root$2.__next = head = node;
                                    head.__next = next;
                                    head.__prev = void 0;
                                }
                                if (tail == null || node === tail) {
                                    root$2.__tail = root$2.__prev = tail = prev || node;
                                }
                                root$2 = head = tail = next = prev = void 0;
                            }
                            ;
                            var i$6 = -1, n$6 = requestedPath.length, copy = new Array(n$6);
                            while (++i$6 < n$6) {
                                copy[i$6] = requestedPath[i$6];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$7 = -1, n$7 = optimizedPath.length, copy$2 = new Array(n$7);
                            while (++i$7 < n$7) {
                                copy$2[i$7] = optimizedPath[i$7];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Create a JSONG value if:
                            //  1. The caller provided a JSONG root seed.
                            //  2. The key isn't null.
                            //  3. The current node is a value or reference.
                            if (jsonRoot != null && key != null && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                if (materialized === true) {
                                    if (node == null) {
                                        json = Object.create(null);
                                        json[$TYPE] = SENTINEL;
                                    } else if (nodeValue === void 0) {
                                        var dest$6 = node, src$6 = dest$6, i$8 = -1, n$8, x$6;
                                        if (dest$6 != null && typeof dest$6 === 'object') {
                                            if (Array.isArray(src$6)) {
                                                dest$6 = new Array(n$8 = src$6.length);
                                                while (++i$8 < n$8) {
                                                    dest$6[i$8] = src$6[i$8];
                                                }
                                            } else {
                                                dest$6 = Object.create(null);
                                                for (x$6 in src$6) {
                                                    !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                                }
                                            }
                                        }
                                        json = dest$6;
                                    } else {
                                        var dest$7 = nodeValue, src$7 = dest$7, i$9 = -1, n$9, x$7;
                                        if (dest$7 != null && typeof dest$7 === 'object') {
                                            if (Array.isArray(src$7)) {
                                                dest$7 = new Array(n$9 = src$7.length);
                                                while (++i$9 < n$9) {
                                                    dest$7[i$9] = src$7[i$9];
                                                }
                                            } else {
                                                dest$7 = Object.create(null);
                                                for (x$7 in src$7) {
                                                    !(!(x$7[0] !== '_' || x$7[1] !== '_') || (x$7 === __SELF || x$7 === __PARENT || x$7 === __ROOT)) && (dest$7[x$7] = src$7[x$7]);
                                                }
                                            }
                                        }
                                        json = dest$7;
                                        if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                            json[$TYPE] = GROUP;
                                        }
                                    }
                                } else if (boxed === true) {
                                    var dest$8 = node, src$8 = dest$8, i$10 = -1, n$10, x$8;
                                    if (dest$8 != null && typeof dest$8 === 'object') {
                                        if (Array.isArray(src$8)) {
                                            dest$8 = new Array(n$10 = src$8.length);
                                            while (++i$10 < n$10) {
                                                dest$8[i$10] = src$8[i$10];
                                            }
                                        } else {
                                            dest$8 = Object.create(null);
                                            for (x$8 in src$8) {
                                                !(!(x$8[0] !== '_' || x$8[1] !== '_') || (x$8 === __SELF || x$8 === __PARENT || x$8 === __ROOT)) && (dest$8[x$8] = src$8[x$8]);
                                            }
                                        }
                                    }
                                    json = dest$8;
                                    if (nodeType === SENTINEL) {
                                        var dest$9 = nodeValue, src$9 = dest$9, i$11 = -1, n$11, x$9;
                                        if (dest$9 != null && typeof dest$9 === 'object') {
                                            if (Array.isArray(src$9)) {
                                                dest$9 = new Array(n$11 = src$9.length);
                                                while (++i$11 < n$11) {
                                                    dest$9[i$11] = src$9[i$11];
                                                }
                                            } else {
                                                dest$9 = Object.create(null);
                                                for (x$9 in src$9) {
                                                    !(!(x$9[0] !== '_' || x$9[1] !== '_') || (x$9 === __SELF || x$9 === __PARENT || x$9 === __ROOT)) && (dest$9[x$9] = src$9[x$9]);
                                                }
                                            }
                                        }
                                        json.value = dest$9;
                                    }
                                } else if (errorsAsValues === true || nodeType !== ERROR) {
                                    if (node != null) {
                                        var dest$10 = nodeValue, src$10 = dest$10, i$12 = -1, n$12, x$10;
                                        if (dest$10 != null && typeof dest$10 === 'object') {
                                            if (Array.isArray(src$10)) {
                                                dest$10 = new Array(n$12 = src$10.length);
                                                while (++i$12 < n$12) {
                                                    dest$10[i$12] = src$10[i$12];
                                                }
                                            } else {
                                                dest$10 = Object.create(null);
                                                for (x$10 in src$10) {
                                                    !(!(x$10[0] !== '_' || x$10[1] !== '_') || (x$10 === __SELF || x$10 === __PARENT || x$10 === __ROOT)) && (dest$10[x$10] = src$10[x$10]);
                                                }
                                            }
                                        }
                                        json = dest$10;
                                        if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                            json[$TYPE] = GROUP;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                } else {
                                    json = void 0;
                                }
                                jsonParent[key] = json;
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                if (node !== head$2) {
                                    next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                    prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                    (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                    root$3.__head = root$3.__next = head$2 = node;
                                    head$2.__next = next$2;
                                    head$2.__prev = void 0;
                                }
                                if (tail$2 == null || node === tail$2) {
                                    root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                }
                                root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            var pbv = Object.create(null), i$13 = -1, n$13 = requestedPath.length, val, copy$3 = new Array(n$13);
                            while (++i$13 < n$13) {
                                copy$3[i$13] = requestedPath[i$13];
                            }
                            var dest$11 = node, src$11 = dest$11, i$14 = -1, n$14, x$11;
                            if (dest$11 != null && typeof dest$11 === 'object') {
                                if (Array.isArray(src$11)) {
                                    dest$11 = new Array(n$14 = src$11.length);
                                    while (++i$14 < n$14) {
                                        dest$11[i$14] = src$11[i$14];
                                    }
                                } else {
                                    dest$11 = Object.create(null);
                                    for (x$11 in src$11) {
                                        !(!(x$11[0] !== '_' || x$11[1] !== '_') || (x$11 === __SELF || x$11 === __PARENT || x$11 === __ROOT)) && (dest$11[x$11] = src$11[x$11]);
                                    }
                                }
                            }
                            val = dest$11;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$15 = -1, j = -1, l = 0, n$15 = nodePath.length, k = requestedPath.length, m, x$12, y, req = [];
                            while (++i$15 < n$15) {
                                req[i$15] = nodePath[i$15];
                            }
                            while (++j < k) {
                                if ((x$12 = requestedPath[j]) != null) {
                                    req[i$15++] = (y = path[l++]) != null && typeof y === 'object' && [x$12] || x$12;
                                }
                            }
                            m = n$15 + l + height - depth;
                            while (i$15 < m) {
                                req[i$15++] = path[l++];
                            }
                            req.length = i$15;
                            req.pathSetIndex = 0;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$16 = -1, n$16 = optimizedPath.length, opt = new Array(n$16 + height - depth), j$2, x$13;
                            while (++i$16 < n$16) {
                                opt[i$16] = optimizedPath[i$16];
                            }
                            for (j$2 = depth, n$16 = height; j$2 < n$16;) {
                                if ((x$13 = path[j$2++]) != null) {
                                    opt[i$16++] = x$13;
                                }
                            }
                            opt.length = i$16;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_8278;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    jsons[depth - 1] = jsonParent = json;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        json = jsonParent && jsonParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        // Create a JSONG branch or insert a reference if:
                        //  1. The caller provided a JSONG root seed.
                        //  2. The current node is a branch or reference.
                        if (jsonRoot != null) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                if (boxed === true) {
                                    var dest$12 = node, src$12 = dest$12, i$17 = -1, n$17, x$14;
                                    if (dest$12 != null && typeof dest$12 === 'object') {
                                        if (Array.isArray(src$12)) {
                                            dest$12 = new Array(n$17 = src$12.length);
                                            while (++i$17 < n$17) {
                                                dest$12[i$17] = src$12[i$17];
                                            }
                                        } else {
                                            dest$12 = Object.create(null);
                                            for (x$14 in src$12) {
                                                !(!(x$14[0] !== '_' || x$14[1] !== '_') || (x$14 === __SELF || x$14 === __PARENT || x$14 === __ROOT)) && (dest$12[x$14] = src$12[x$14]);
                                            }
                                        }
                                    }
                                    json = dest$12;
                                } else {
                                    var dest$13 = nodeValue, src$13 = dest$13, i$18 = -1, n$18, x$15;
                                    if (dest$13 != null && typeof dest$13 === 'object') {
                                        if (Array.isArray(src$13)) {
                                            dest$13 = new Array(n$18 = src$13.length);
                                            while (++i$18 < n$18) {
                                                dest$13[i$18] = src$13[i$18];
                                            }
                                        } else {
                                            dest$13 = Object.create(null);
                                            for (x$15 in src$13) {
                                                !(!(x$15[0] !== '_' || x$15[1] !== '_') || (x$15 === __SELF || x$15 === __PARENT || x$15 === __ROOT)) && (dest$13[x$15] = src$13[x$15]);
                                            }
                                        }
                                    }
                                    json = dest$13;
                                }
                                jsonParent[key] = json;
                            } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                if ((json = jsonParent[key]) == null) {
                                    json = Object.create(null);
                                } else if (typeof json !== 'object') {
                                    throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                }
                                jsonParent[key] = json;
                            }
                        }
                    }
                    node = node;
                    json = json;
                    depth = depth + 1;
                    continue follow_path_set_8278;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_8365:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_8365;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_8365;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_8365;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_8365;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_8365;
                    }
                    depth = path.depth = depth;
                    break unroll_8365;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && {
        jsong: jsons[offset - 1],
        paths: requestedPaths
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathSetsAsPathMap(model, pathSets, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = (model._materialized || false) && !model._dataSource && !model._router;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathSets.length; ++index < count;) {
        path = pathSets[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_10840:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_11075:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_11075;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_11075;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_10840;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            hasValue = true;
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                if (node !== head) {
                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                    (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                    root$2.__head = root$2.__next = head = node;
                                    head.__next = next;
                                    head.__prev = void 0;
                                }
                                if (tail == null || node === tail) {
                                    root$2.__tail = root$2.__prev = tail = prev || node;
                                }
                                root$2 = head = tail = next = prev = void 0;
                            }
                            ;
                            var i = -1, n = requestedPath.length, copy = new Array(n);
                            while (++i < n) {
                                copy[i] = requestedPath[i];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                            while (++i$2 < n$2) {
                                copy$2[i$2] = optimizedPath[i$2];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$3 = -1, n$3, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$3 = src.length);
                                                        while (++i$3 < n$3) {
                                                            dest[i$3] = src[i$3];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$4 = -1, n$4, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$4 = src$2.length);
                                                        while (++i$4 < n$4) {
                                                            dest$2[i$4] = src$2[i$4];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$5 = -1, n$5, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$5 = src$3.length);
                                                    while (++i$5 < n$5) {
                                                        dest$3[i$5] = src$3[i$5];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$6 = -1, n$6, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$6 = src$4.length);
                                                        while (++i$6 < n$6) {
                                                            dest$4[i$6] = src$4[i$6];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$7 = -1, n$7, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$7 = src$5.length);
                                                        while (++i$7 < n$7) {
                                                            dest$5[i$7] = src$5[i$7];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                if (node !== head$2) {
                                    next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                    prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                    (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                    root$3.__head = root$3.__next = head$2 = node;
                                    head$2.__next = next$2;
                                    head$2.__prev = void 0;
                                }
                                if (tail$2 == null || node === tail$2) {
                                    root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                }
                                root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            var pbv = Object.create(null), i$8 = -1, n$8 = requestedPath.length, val, copy$3 = new Array(n$8);
                            while (++i$8 < n$8) {
                                copy$3[i$8] = requestedPath[i$8];
                            }
                            var dest$6 = node, src$6 = dest$6, i$9 = -1, n$9, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$9 = src$6.length);
                                    while (++i$9 < n$9) {
                                        dest$6[i$9] = src$6[i$9];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$10 = -1, j = -1, l = 0, n$10 = nodePath.length, k = requestedPath.length, m, x$7, y, req = [];
                            while (++i$10 < n$10) {
                                req[i$10] = nodePath[i$10];
                            }
                            while (++j < k) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$10++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$10 + l + height - depth;
                            while (i$10 < m) {
                                req[i$10++] = path[l++];
                            }
                            req.length = i$10;
                            req.pathSetIndex = 0;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$11 = -1, n$11 = optimizedPath.length, opt = new Array(n$11 + height - depth), j$2, x$8;
                            while (++i$11 < n$11) {
                                opt[i$11] = optimizedPath[i$11];
                            }
                            for (j$2 = depth, n$11 = height; j$2 < n$11;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$11++] = x$8;
                                }
                            }
                            opt.length = i$11;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_10840;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        // Only create a branch if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a branch or reference.
                        if (jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        } else if (typeof json !== 'object') {
                                            throw new Error('Fatal Falcor Error: encountered value in branch position while building Path Map.');
                                        }
                                        json[__KEY] = jsonKey$2;
                                        json[__GENERATION] = node[__GENERATION] || 0;
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_10840;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_10927:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_10927;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_10927;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_10927;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_10927;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_10927;
                    }
                    depth = path.depth = depth;
                    break unroll_10927;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathSetsAsValues(model, pathSets, values, errorSelector, boundPath) {
    var onNext;
    if (Array.isArray(values)) {
        values.length = 0;
    } else {
        onNext = values;
        values = undefined;
    }
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = (model._materialized || false) && !model._dataSource && !model._router;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathSets.length; ++index < count;) {
        path = pathSets[index];
        depth = 0;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_4133:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_4366:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_4366;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_4366;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_4133;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                if (node !== head) {
                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                    (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                    root$2.__head = root$2.__next = head = node;
                                    head.__next = next;
                                    head.__prev = void 0;
                                }
                                if (tail == null || node === tail) {
                                    root$2.__tail = root$2.__prev = tail = prev || node;
                                }
                                root$2 = head = tail = next = prev = void 0;
                            }
                            ;
                            var i = -1, n = requestedPath.length, copy = new Array(n);
                            while (++i < n) {
                                copy[i] = requestedPath[i];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$2 = -1, n$2 = optimizedPath.length, copy$2 = new Array(n$2);
                            while (++i$2 < n$2) {
                                copy$2[i$2] = optimizedPath[i$2];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            var pbv = Object.create(null), i$3 = -1, n$3 = requestedPath.length, val, copy$3 = new Array(n$3);
                            while (++i$3 < n$3) {
                                copy$3[i$3] = requestedPath[i$3];
                            }
                            if (materialized === true) {
                                if (node == null) {
                                    val = Object.create(null);
                                    val[$TYPE] = SENTINEL;
                                } else if (nodeValue === void 0) {
                                    var dest = node, src = dest, i$4 = -1, n$4, x;
                                    if (dest != null && typeof dest === 'object') {
                                        if (Array.isArray(src)) {
                                            dest = new Array(n$4 = src.length);
                                            while (++i$4 < n$4) {
                                                dest[i$4] = src[i$4];
                                            }
                                        } else {
                                            dest = Object.create(null);
                                            for (x in src) {
                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                            }
                                        }
                                    }
                                    val = dest;
                                } else {
                                    var dest$2 = nodeValue, src$2 = dest$2, i$5 = -1, n$5, x$2;
                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                        if (Array.isArray(src$2)) {
                                            dest$2 = new Array(n$5 = src$2.length);
                                            while (++i$5 < n$5) {
                                                dest$2[i$5] = src$2[i$5];
                                            }
                                        } else {
                                            dest$2 = Object.create(null);
                                            for (x$2 in src$2) {
                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                            }
                                        }
                                    }
                                    val = dest$2;
                                }
                            } else if (boxed === true) {
                                var dest$3 = node, src$3 = dest$3, i$6 = -1, n$6, x$3;
                                if (dest$3 != null && typeof dest$3 === 'object') {
                                    if (Array.isArray(src$3)) {
                                        dest$3 = new Array(n$6 = src$3.length);
                                        while (++i$6 < n$6) {
                                            dest$3[i$6] = src$3[i$6];
                                        }
                                    } else {
                                        dest$3 = Object.create(null);
                                        for (x$3 in src$3) {
                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                        }
                                    }
                                }
                                val = dest$3;
                                if (nodeType === SENTINEL) {
                                    var dest$4 = nodeValue, src$4 = dest$4, i$7 = -1, n$7, x$4;
                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                        if (Array.isArray(src$4)) {
                                            dest$4 = new Array(n$7 = src$4.length);
                                            while (++i$7 < n$7) {
                                                dest$4[i$7] = src$4[i$7];
                                            }
                                        } else {
                                            dest$4 = Object.create(null);
                                            for (x$4 in src$4) {
                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                            }
                                        }
                                    }
                                    val.value = dest$4;
                                }
                            } else {
                                var dest$5 = nodeValue, src$5 = dest$5, i$8 = -1, n$8, x$5;
                                if (dest$5 != null && typeof dest$5 === 'object') {
                                    if (Array.isArray(src$5)) {
                                        dest$5 = new Array(n$8 = src$5.length);
                                        while (++i$8 < n$8) {
                                            dest$5[i$8] = src$5[i$8];
                                        }
                                    } else {
                                        dest$5 = Object.create(null);
                                        for (x$5 in src$5) {
                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                        }
                                    }
                                }
                                val = dest$5;
                            }
                            pbv.path = copy$3;
                            pbv.value = val;
                            if (values) {
                                values[values.length] = pbv;
                            } else if (onNext) {
                                onNext(pbv);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                if (node !== head$2) {
                                    next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                    prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                    (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                    root$3.__head = root$3.__next = head$2 = node;
                                    head$2.__next = next$2;
                                    head$2.__prev = void 0;
                                }
                                if (tail$2 == null || node === tail$2) {
                                    root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                }
                                root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            var pbv$2 = Object.create(null), i$9 = -1, n$9 = requestedPath.length, val$2, copy$4 = new Array(n$9);
                            while (++i$9 < n$9) {
                                copy$4[i$9] = requestedPath[i$9];
                            }
                            var dest$6 = node, src$6 = dest$6, i$10 = -1, n$10, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$10 = src$6.length);
                                    while (++i$10 < n$10) {
                                        dest$6[i$10] = src$6[i$10];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val$2 = dest$6;
                            pbv$2.path = copy$4;
                            pbv$2.value = val$2;
                            errors[errors.length] = pbv$2;
                        } else if (refreshing === true || node == null) {
                            var i$11 = -1, j = -1, l = 0, n$11 = nodePath.length, k = requestedPath.length, m, x$7, y, req = [];
                            while (++i$11 < n$11) {
                                req[i$11] = nodePath[i$11];
                            }
                            while (++j < k) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$11++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$11 + l + height - depth;
                            while (i$11 < m) {
                                req[i$11++] = path[l++];
                            }
                            req.length = i$11;
                            req.pathSetIndex = index;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$12 = -1, n$12 = optimizedPath.length, opt = new Array(n$12 + height - depth), j$2, x$8;
                            while (++i$12 < n$12) {
                                opt[i$12] = optimizedPath[i$12];
                            }
                            for (j$2 = depth, n$12 = height; j$2 < n$12;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$12++] = x$8;
                                }
                            }
                            opt.length = i$12;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_4133;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_4133;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_4220:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_4220;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_4220;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_4220;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_4220;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_4220;
                    }
                    depth = path.depth = depth;
                    break unroll_4220;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function invalidatePathMaps(model, pathMaps, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = (model._materialized || false) && !model._dataSource && !model._router;
    var errorSelector = model._errorSelector;
    var map, mapStack = [], depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, nodeLoc = getBoundPath(model), nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        while (depth > -1) {
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_5825:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_5980:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_5980;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_5980;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_5825;
                            }
                        } else {
                            if (key == null) {
                                key = node[__KEY];
                            }
                            if (key != null) {
                                nodeSize = (node && node[$SIZE] || 0) * -1;
                                var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$3, offset$3, childType, childValue, isBranch, stack = [
                                        nodeParent,
                                        invKey,
                                        node
                                    ], depth$2 = 0;
                                while (depth$2 > -1) {
                                    nodeParent = stack[offset$3 = depth$2 * 8];
                                    invKey = stack[offset$3 + 1];
                                    node = stack[offset$3 + 2];
                                    if ((childType = stack[offset$3 + 3]) === void 0 || (childType = void 0)) {
                                        childType = stack[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue = stack[offset$3 + 4] || (stack[offset$3 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch = stack[offset$3 + 5]) === void 0) {
                                        isBranch = stack[offset$3 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                    }
                                    if (isBranch === true) {
                                        if ((keys$2 = stack[offset$3 + 6]) === void 0) {
                                            keys$2 = stack[offset$3 + 6] = [];
                                            index$3 = -1;
                                            for (var childKey in node) {
                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$3] = childKey);
                                            }
                                        }
                                        index$3 = stack[offset$3 + 7] || (stack[offset$3 + 7] = 0);
                                        if (index$3 < keys$2.length) {
                                            stack[offset$3 + 7] = index$3 + 1;
                                            stack[offset$3 = ++depth$2 * 8] = node;
                                            stack[offset$3 + 1] = invKey = keys$2[index$3];
                                            stack[offset$3 + 2] = node[invKey];
                                            continue;
                                        }
                                    }
                                    var ref = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                    if (ref && Array.isArray(ref)) {
                                        destination = ref[__CONTEXT];
                                        if (destination) {
                                            var i = (ref[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                            while (++i <= n) {
                                                destination[__REF + i] = destination[__REF + (i + 1)];
                                            }
                                            destination[__REFS_LENGTH] = n;
                                            ref[__REF_INDEX] = ref[__CONTEXT] = destination = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$2, i$2 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                        while (++i$2 < n$2) {
                                            if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                                ref$2[__CONTEXT] = node[__REF + i$2] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                        node === head && (root$2.__head = root$2.__next = next);
                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                        node.__next = node.__prev = void 0;
                                        head = tail = next = prev = void 0;
                                        ;
                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack[offset$3 + 0];
                                    delete stack[offset$3 + 1];
                                    delete stack[offset$3 + 2];
                                    delete stack[offset$3 + 3];
                                    delete stack[offset$3 + 4];
                                    delete stack[offset$3 + 5];
                                    delete stack[offset$3 + 6];
                                    delete stack[offset$3 + 7];
                                    --depth$2;
                                }
                                nodeParent = invParent;
                                node = invChild;
                                var self = nodeParent, child = node;
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && nodeParent) {
                                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                        if (ref$3 && Array.isArray(ref$3)) {
                                            destination$2 = ref$3[__CONTEXT];
                                            if (destination$2) {
                                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                while (++i$3 <= n$3) {
                                                    destination$2[__REF + i$3] = destination$2[__REF + (i$3 + 1)];
                                                }
                                                destination$2[__REFS_LENGTH] = n$3;
                                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination$2 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$4, i$4 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                            while (++i$4 < n$4) {
                                                if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                    ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                            next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                            prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                            node === head$2 && (root$3.__head = root$3.__next = next$2);
                                            node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                            node.__next = node.__prev = void 0;
                                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                                            ;
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$5, k, n$5;
                                        while (depth$3 > -1) {
                                            if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                i$5 = k = -1;
                                                n$5 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                    linkPaths[++k] = ref$5;
                                                } else if (n$5 > 0) {
                                                    stack$2[depth$3] = linkPaths = new Array(n$5);
                                                }
                                                while (++i$5 < n$5) {
                                                    if ((ref$5 = node[__REF + i$5]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        linkPaths[++k] = ref$5;
                                                    }
                                                }
                                            }
                                            if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                ++depth$3;
                                            } else {
                                                stack$2[depth$3--] = void 0;
                                            }
                                        }
                                        node = self$2;
                                    }
                                }
                                nodeParent = self;
                                node = child;
                            }
                            ;
                            node = node;
                            break follow_path_map_5825;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_5825;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_5825;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_5825;
                } while (true);
            node = node;
            var offset$4 = depth * 4, keys$3, index$4;
            do {
                delete mapStack[offset$4 + 0];
                delete mapStack[offset$4 + 1];
                delete mapStack[offset$4 + 2];
                delete mapStack[offset$4 + 3];
            } while ((keys$3 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$4 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$4) >= keys$3.length);
        }
    }
    return {
        'values': [model],
        'errors': [],
        'requestedPaths': [0],
        'optimizedPaths': [0],
        'requestedMissingPaths': [],
        'optimizedMissingPaths': []
    };
}
function invalidatePathSets(model, pathSets, values, errorSelector, boundPath) {
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = (model._materialized || false) && !model._dataSource && !model._router;
    var errorSelector = model._errorSelector;
    var path, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, nodeLoc = getBoundPath(model), nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathSets.length; ++index < count;) {
        path = pathSets[index];
        depth = 0;
        while (depth > -1) {
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_7411:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_7643:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_7643;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_7643;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_7411;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (key == null) {
                            key = node[__KEY];
                        }
                        if (key != null) {
                            nodeSize = (node && node[$SIZE] || 0) * -1;
                            var invParent = nodeParent, invChild = node, invKey = key, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                    nodeParent,
                                    invKey,
                                    node
                                ], depth$2 = 0;
                            while (depth$2 > -1) {
                                nodeParent = stack[offset$2 = depth$2 * 8];
                                invKey = stack[offset$2 + 1];
                                node = stack[offset$2 + 2];
                                if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                    childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                    isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                }
                                if (isBranch === true) {
                                    if ((keys = stack[offset$2 + 6]) === void 0) {
                                        keys = stack[offset$2 + 6] = [];
                                        index$2 = -1;
                                        for (var childKey in node) {
                                            !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                        }
                                    }
                                    index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                    if (index$2 < keys.length) {
                                        stack[offset$2 + 7] = index$2 + 1;
                                        stack[offset$2 = ++depth$2 * 8] = node;
                                        stack[offset$2 + 1] = invKey = keys[index$2];
                                        stack[offset$2 + 2] = node[invKey];
                                        continue;
                                    }
                                }
                                var ref = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                if (ref && Array.isArray(ref)) {
                                    destination = ref[__CONTEXT];
                                    if (destination) {
                                        var i = (ref[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                        while (++i <= n) {
                                            destination[__REF + i] = destination[__REF + (i + 1)];
                                        }
                                        destination[__REFS_LENGTH] = n;
                                        ref[__REF_INDEX] = ref[__CONTEXT] = destination = void 0;
                                    }
                                }
                                if (node != null && typeof node === 'object') {
                                    var ref$2, i$2 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                    while (++i$2 < n$2) {
                                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                            ref$2[__CONTEXT] = node[__REF + i$2] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                    node === head && (root$2.__head = root$2.__next = next);
                                    node === tail && (root$2.__tail = root$2.__prev = prev);
                                    node.__next = node.__prev = void 0;
                                    head = tail = next = prev = void 0;
                                    ;
                                    nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                }
                                ;
                                delete stack[offset$2 + 0];
                                delete stack[offset$2 + 1];
                                delete stack[offset$2 + 2];
                                delete stack[offset$2 + 3];
                                delete stack[offset$2 + 4];
                                delete stack[offset$2 + 5];
                                delete stack[offset$2 + 6];
                                delete stack[offset$2 + 7];
                                --depth$2;
                            }
                            nodeParent = invParent;
                            node = invChild;
                            var self = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && nodeParent) {
                                    var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$3 && Array.isArray(ref$3)) {
                                        destination$2 = ref$3[__CONTEXT];
                                        if (destination$2) {
                                            var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$3 <= n$3) {
                                                destination$2[__REF + i$3] = destination$2[__REF + (i$3 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$3;
                                            ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$4, i$4 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                        while (++i$4 < n$4) {
                                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$5, k, n$5;
                                    while (depth$3 > -1) {
                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                            i$5 = k = -1;
                                            n$5 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                linkPaths[++k] = ref$5;
                                            } else if (n$5 > 0) {
                                                stack$2[depth$3] = linkPaths = new Array(n$5);
                                            }
                                            while (++i$5 < n$5) {
                                                if ((ref$5 = node[__REF + i$5]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths[++k] = ref$5;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                            ++depth$3;
                                        } else {
                                            stack$2[depth$3--] = void 0;
                                        }
                                    }
                                    node = self$2;
                                }
                            }
                            nodeParent = self;
                            node = child;
                        }
                        node = node;
                        break follow_path_set_7411;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_7411;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_7498:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_7498;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_7498;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_7498;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_7498;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_7498;
                    }
                    depth = path.depth = depth;
                    break unroll_7498;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': [model],
        'errors': [],
        'requestedPaths': [0],
        'optimizedPaths': [0],
        'requestedMissingPaths': [],
        'optimizedMissingPaths': []
    };
}
function setCache(model, map) {
    var root = model._root, expired = root.expired, depth = 0, height = 0, mapStack = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    mapStack[0] = map;
    nodes[-1] = nodeParent;
    while (depth > -1) {
        /* Walk Path Map */
        var isTerminus = false, offset = 0, keys = void 0, index = void 0, key = void 0, isKeySet = false;
        node = nodeParent = nodes[depth - 1];
        depth = depth;
        follow_path_map_9177:
            do {
                height = depth;
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                if ((isTerminus = !((map = mapStack[offset = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset + 1] || (mapStack[offset + 1] = Object.keys(map))) && ((index = mapStack[offset + 2] || (mapStack[offset + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_map_9177;
                        }
                    } else {
                        if (key != null) {
                            var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                            nodeType = map && map[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? map[VALUE] : map;
                            newNode = map;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                delete nodeValue[$SIZE];
                                if (nodeType === SENTINEL) {
                                    nodeSize = 50 + (nodeValue.length || 1);
                                } else {
                                    nodeSize = nodeValue.length || 1;
                                }
                                newNode[$SIZE] = nodeSize;
                                nodeValue[__CONTAINER] = newNode;
                            } else if (nodeType === SENTINEL) {
                                newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                            } else if (!(map != null && typeof map === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode = Object.create(null);
                                newNode[VALUE] = nodeValue;
                                newNode[$TYPE] = nodeType;
                                newNode[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode[$TYPE] = nodeType || GROUP;
                                newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node !== newNode && (node != null && typeof node === 'object')) {
                                var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i = -1, ref;
                                while (++i < nodeRefsLength) {
                                    if ((ref = node[__REF + i]) !== void 0) {
                                        ref[__CONTEXT] = newNode;
                                        newNode[__REF + (destRefsLength + i)] = ref;
                                        node[__REF + i] = void 0;
                                    }
                                }
                                newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                node[__REFS_LENGTH] = ref = void 0;
                                var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$2, offset$2, childType, childValue, isBranch, stack = [
                                        nodeParent,
                                        invKey,
                                        node
                                    ], depth$2 = 0;
                                while (depth$2 > -1) {
                                    nodeParent = stack[offset$2 = depth$2 * 8];
                                    invKey = stack[offset$2 + 1];
                                    node = stack[offset$2 + 2];
                                    if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                        childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                        isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                    }
                                    if (isBranch === true) {
                                        if ((keys$2 = stack[offset$2 + 6]) === void 0) {
                                            keys$2 = stack[offset$2 + 6] = [];
                                            index$2 = -1;
                                            for (var childKey in node) {
                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$2] = childKey);
                                            }
                                        }
                                        index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                        if (index$2 < keys$2.length) {
                                            stack[offset$2 + 7] = index$2 + 1;
                                            stack[offset$2 = ++depth$2 * 8] = node;
                                            stack[offset$2 + 1] = invKey = keys$2[index$2];
                                            stack[offset$2 + 2] = node[invKey];
                                            continue;
                                        }
                                    }
                                    var ref$2 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                    if (ref$2 && Array.isArray(ref$2)) {
                                        destination = ref$2[__CONTEXT];
                                        if (destination) {
                                            var i$2 = (ref$2[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                            while (++i$2 <= n) {
                                                destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                            }
                                            destination[__REFS_LENGTH] = n;
                                            ref$2[__REF_INDEX] = ref$2[__CONTEXT] = destination = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$3, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                        while (++i$3 < n$2) {
                                            if ((ref$3 = node[__REF + i$3]) !== void 0) {
                                                ref$3[__CONTEXT] = node[__REF + i$3] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                        node === head && (root$2.__head = root$2.__next = next);
                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                        node.__next = node.__prev = void 0;
                                        head = tail = next = prev = void 0;
                                        ;
                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack[offset$2 + 0];
                                    delete stack[offset$2 + 1];
                                    delete stack[offset$2 + 2];
                                    delete stack[offset$2 + 3];
                                    delete stack[offset$2 + 4];
                                    delete stack[offset$2 + 5];
                                    delete stack[offset$2 + 6];
                                    delete stack[offset$2 + 7];
                                    --depth$2;
                                }
                                nodeParent = invParent;
                                node = invChild;
                            }
                            nodeParent[key] = node = newNode;
                            nodeType = node && node[$TYPE] || void 0;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            sizeOffset = edgeSize - nodeSize;
                            var self = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                    var ref$4 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$4 && Array.isArray(ref$4)) {
                                        destination$2 = ref$4[__CONTEXT];
                                        if (destination$2) {
                                            var i$4 = (ref$4[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$4 <= n$3) {
                                                destination$2[__REF + i$4] = destination$2[__REF + (i$4 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$3;
                                            ref$4[__REF_INDEX] = ref$4[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$5, i$5 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                        while (++i$5 < n$4) {
                                            if ((ref$5 = node[__REF + i$5]) !== void 0) {
                                                ref$5[__CONTEXT] = node[__REF + i$5] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$6, i$6, k, n$5;
                                    while (depth$3 > -1) {
                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                            i$6 = k = -1;
                                            n$5 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$6 = node[__PARENT]) !== void 0 && ref$6[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                linkPaths[++k] = ref$6;
                                            } else if (n$5 > 0) {
                                                stack$2[depth$3] = linkPaths = new Array(n$5);
                                            }
                                            while (++i$6 < n$5) {
                                                if ((ref$6 = node[__REF + i$6]) !== void 0 && ref$6[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths[++k] = ref$6;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                            ++depth$3;
                                        } else {
                                            stack$2[depth$3--] = void 0;
                                        }
                                    }
                                    node = self$2;
                                }
                            }
                            nodeParent = self;
                            node = child;
                        }
                        ;
                        node = node;
                        break follow_path_map_9177;
                    }
                }
                if ((key = keys[index]) == null) {
                    node = node;
                    break follow_path_map_9177;
                } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                    mapStack[(depth + 1) * 4 + 3] = key;
                } else {
                    mapStack[offset + 2] = index + 1;
                    node = node;
                    depth = depth;
                    continue follow_path_map_9177;
                }
                nodes[depth - 1] = nodeParent = node;
                if (key != null) {
                    node = nodeParent && nodeParent[key];
                    if (typeof map === 'object') {
                        for (var key$2 in map) {
                            key$2[0] === '$' && key$2 !== $SIZE && (nodeParent && (nodeParent[key$2] = map[key$2]) || true);
                        }
                        map = map[key];
                    }
                    var mapType = map && map[$TYPE] || void 0;
                    var mapValue = mapType === SENTINEL ? map[VALUE] : map;
                    if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType && (map != null && typeof map === 'object') && !Array.isArray(mapValue))) {
                        nodeType = void 0;
                        nodeValue = Object.create(null);
                        nodeSize = node && node[$SIZE] || 0;
                        if (node !== nodeValue && (node != null && typeof node === 'object')) {
                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$7 = -1, ref$7;
                            while (++i$7 < nodeRefsLength$2) {
                                if ((ref$7 = node[__REF + i$7]) !== void 0) {
                                    ref$7[__CONTEXT] = nodeValue;
                                    nodeValue[__REF + (destRefsLength$2 + i$7)] = ref$7;
                                    node[__REF + i$7] = void 0;
                                }
                            }
                            nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                            node[__REFS_LENGTH] = ref$7 = void 0;
                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                    nodeParent,
                                    invKey$2,
                                    node
                                ], depth$4 = 0;
                            while (depth$4 > -1) {
                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                invKey$2 = stack$3[offset$3 + 1];
                                node = stack$3[offset$3 + 2];
                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                }
                                if (isBranch$2 === true) {
                                    if ((keys$3 = stack$3[offset$3 + 6]) === void 0) {
                                        keys$3 = stack$3[offset$3 + 6] = [];
                                        index$3 = -1;
                                        for (var childKey$2 in node) {
                                            !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$3[++index$3] = childKey$2);
                                        }
                                    }
                                    index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                    if (index$3 < keys$3.length) {
                                        stack$3[offset$3 + 7] = index$3 + 1;
                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                        stack$3[offset$3 + 1] = invKey$2 = keys$3[index$3];
                                        stack$3[offset$3 + 2] = node[invKey$2];
                                        continue;
                                    }
                                }
                                var ref$8 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                if (ref$8 && Array.isArray(ref$8)) {
                                    destination$3 = ref$8[__CONTEXT];
                                    if (destination$3) {
                                        var i$8 = (ref$8[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                        while (++i$8 <= n$6) {
                                            destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                        }
                                        destination$3[__REFS_LENGTH] = n$6;
                                        ref$8[__REF_INDEX] = ref$8[__CONTEXT] = destination$3 = void 0;
                                    }
                                }
                                if (node != null && typeof node === 'object') {
                                    var ref$9, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                    while (++i$9 < n$7) {
                                        if ((ref$9 = node[__REF + i$9]) !== void 0) {
                                            ref$9[__CONTEXT] = node[__REF + i$9] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                    next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                    prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                    node === head$3 && (root$4.__head = root$4.__next = next$3);
                                    node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                    node.__next = node.__prev = void 0;
                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                    ;
                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                }
                                ;
                                delete stack$3[offset$3 + 0];
                                delete stack$3[offset$3 + 1];
                                delete stack$3[offset$3 + 2];
                                delete stack$3[offset$3 + 3];
                                delete stack$3[offset$3 + 4];
                                delete stack$3[offset$3 + 5];
                                delete stack$3[offset$3 + 6];
                                delete stack$3[offset$3 + 7];
                                --depth$4;
                            }
                            nodeParent = invParent$2;
                            node = invChild$2;
                        }
                        nodeParent[key] = node = nodeValue;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var self$3 = node, node$2;
                        while (node$2 = node) {
                            if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$10, i$10, k$2, n$8;
                                while (depth$5 > -1) {
                                    if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                        i$10 = k$2 = -1;
                                        n$8 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = ++__GENERATION_GUID;
                                        if ((ref$10 = node[__PARENT]) !== void 0 && ref$10[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                            linkPaths$2[++k$2] = ref$10;
                                        } else if (n$8 > 0) {
                                            stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                        }
                                        while (++i$10 < n$8) {
                                            if ((ref$10 = node[__REF + i$10]) !== void 0 && ref$10[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                linkPaths$2[++k$2] = ref$10;
                                            }
                                        }
                                    }
                                    if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                        ++depth$5;
                                    } else {
                                        stack$4[depth$5--] = void 0;
                                    }
                                }
                                node = self$4;
                            }
                            node = node$2[__PARENT];
                        }
                        node = self$3;
                    }
                }
                node = node;
                depth = depth + 1;
                continue follow_path_map_9177;
            } while (true);
        node = node;
        var offset$4 = depth * 4, keys$4, index$4;
        do {
            delete mapStack[offset$4 + 0];
            delete mapStack[offset$4 + 1];
            delete mapStack[offset$4 + 2];
            delete mapStack[offset$4 + 3];
        } while ((keys$4 = mapStack[(offset$4 = 4 * --depth) + 1]) && ((index$4 = mapStack[offset$4 + 2]) || true) && (mapStack[offset$4 + 2] = ++index$4) >= keys$4.length);
    }
    return nodeRoot;
}
function setJSONG(model, envelope, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    offset = 0;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodePath = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, messages = [], messageRoot, messageParent, message, jsons = [], jsonRoot = Object.create(null), jsonParent = jsonRoot, json = jsonParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 1] = jsonRoot;
    keysets[offset - 1] = offset - 1;
    var pathSets = envelope.paths;
    messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value;
    for (var index = -1, count = pathSets.length; ++index < count;) {
        path = pathSets[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            message = messageParent = messages[depth - 1];
            depth = depth;
            follow_path_set_5430:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        /* Walk Link */
                        var key$2, isKeySet$2 = false;
                        linkHeight = linkPath.length;
                        node = nodeParent = nodeRoot;
                        message = messageParent = messageRoot;
                        linkDepth = linkDepth;
                        follow_link_5653:
                            do {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                        nodeType = void 0;
                                        nodeValue = void 0;
                                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                        // Set up the hard-link so we don't have to do all
                                        // this work the next time we follow this linkPath.
                                        if (refContext === void 0) {
                                            var backRefs = node[__REFS_LENGTH] || 0;
                                            node[__REF + backRefs] = refContainer;
                                            node[__REFS_LENGTH] = backRefs + 1;
                                            // create a forward link
                                            refContainer[__REF_INDEX] = backRefs;
                                            refContainer[__CONTEXT] = node;
                                            refContainer = backRefs = void 0;
                                        }
                                    }
                                    node = node;
                                    break follow_link_5653;
                                }
                                key$2 = linkPath[linkDepth];
                                nodeParent = node;
                                messageParent = message;
                                if (key$2 != null) {
                                    node = nodeParent && nodeParent[key$2];
                                    message = messageParent && messageParent[key$2];
                                    optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    node = node;
                                    message = message;
                                    merge_node_5823:
                                        do {
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            if (node == null && message == null) {
                                                node = node;
                                                break merge_node_5823;
                                            } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                node = node;
                                                break merge_node_5823;
                                            }
                                            messageType = message && message[$TYPE] || void 0;
                                            messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                if (message == null) {
                                                    node = node;
                                                    break merge_node_5823;
                                                } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                    if (node === message) {
                                                        if (node === nodeValue[__CONTAINER]) {
                                                            node = node;
                                                            break merge_node_5823;
                                                        }
                                                        messageType = nodeType;
                                                        messageValue = nodeValue;
                                                    } else if ((message && message[$EXPIRES]) === 0) {
                                                        node = node = message;
                                                        break merge_node_5823;
                                                    } else {
                                                        if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                            message = message;
                                                            messageValue = messageValue;
                                                            node = node;
                                                            nodeValue = nodeValue;
                                                            replace_cache_reference_5995:
                                                                do {
                                                                    // compare the cache and message references.
                                                                    // if they're the same, break early so we don't insert.
                                                                    // if they're different, replace the cache reference.
                                                                    var i = nodeValue.length;
                                                                    // If the reference lengths are equal, we have to check their keys
                                                                    // for equality.
                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                    // Insert the reference from the message.
                                                                    if (i === messageValue.length) {
                                                                        while (--i > -1) {
                                                                            // If any of their keys are different, replace the reference
                                                                            // in the cache with the reference in the message.
                                                                            if (nodeValue[i] !== messageValue[i]) {
                                                                                message = message;
                                                                                break replace_cache_reference_5995;
                                                                            }
                                                                        }
                                                                        if (i === -1) {
                                                                            message = node;
                                                                            break replace_cache_reference_5995;
                                                                        }
                                                                    }
                                                                    message = message;
                                                                    break replace_cache_reference_5995;
                                                                } while (true);
                                                            message = message;
                                                        }
                                                        if (node === message) {
                                                            node = node;
                                                            break merge_node_5823;
                                                        }
                                                    }
                                                }
                                            } else if (node === message) {
                                                node = node;
                                                break merge_node_5823;
                                            } else if (!nodeType && (node != null && typeof node === 'object')) {
                                                if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                                    node = node;
                                                    break merge_node_5823;
                                                }
                                            }
                                            nodeSize = node && node[$SIZE] || 0;
                                            messageSize = message && message[$SIZE] || 0;
                                            if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                message = message;
                                                if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                    delete messageValue[$SIZE];
                                                    if (messageType === SENTINEL) {
                                                        messageSize = 50 + (messageValue.length || 1);
                                                    } else {
                                                        messageSize = messageValue.length || 1;
                                                    }
                                                    message[$SIZE] = messageSize;
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === SENTINEL) {
                                                    message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === ERROR) {
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                } else if (!(message != null && typeof message === 'object')) {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    messageType = 'sentinel';
                                                    message = Object.create(null);
                                                    message[VALUE] = messageValue;
                                                    message[$TYPE] = messageType;
                                                    message[$SIZE] = messageSize;
                                                } else {
                                                    messageType = message[$TYPE] = messageType || GROUP;
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                }
                                            }
                                            if (node == null) {
                                                nodeParent[key$2] = node = message;
                                            } else if (node !== message) {
                                                if (node !== message && (node != null && typeof node === 'object')) {
                                                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                                                    while (++i$2 < nodeRefsLength) {
                                                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                                            ref$2[__CONTEXT] = message;
                                                            message[__REF + (destRefsLength + i$2)] = ref$2;
                                                            node[__REF + i$2] = void 0;
                                                        }
                                                    }
                                                    message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                    node[__REFS_LENGTH] = ref$2 = void 0;
                                                    var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                            nodeParent,
                                                            invKey,
                                                            node
                                                        ], depth$2 = 0;
                                                    while (depth$2 > -1) {
                                                        nodeParent = stack[offset$2 = depth$2 * 8];
                                                        invKey = stack[offset$2 + 1];
                                                        node = stack[offset$2 + 2];
                                                        if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                            childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                        }
                                                        childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                        if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                            isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                        }
                                                        if (isBranch === true) {
                                                            if ((keys = stack[offset$2 + 6]) === void 0) {
                                                                keys = stack[offset$2 + 6] = [];
                                                                index$2 = -1;
                                                                for (var childKey in node) {
                                                                    !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                                }
                                                            }
                                                            index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                            if (index$2 < keys.length) {
                                                                stack[offset$2 + 7] = index$2 + 1;
                                                                stack[offset$2 = ++depth$2 * 8] = node;
                                                                stack[offset$2 + 1] = invKey = keys[index$2];
                                                                stack[offset$2 + 2] = node[invKey];
                                                                continue;
                                                            }
                                                        }
                                                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                        if (ref$3 && Array.isArray(ref$3)) {
                                                            destination = ref$3[__CONTEXT];
                                                            if (destination) {
                                                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                while (++i$3 <= n) {
                                                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                                                }
                                                                destination[__REFS_LENGTH] = n;
                                                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                            }
                                                        }
                                                        if (node != null && typeof node === 'object') {
                                                            var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                            while (++i$4 < n$2) {
                                                                if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                                    ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                                                }
                                                            }
                                                            node[__REFS_LENGTH] = void 0;
                                                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                            next != null && typeof next === 'object' && (next.__prev = prev);
                                                            prev != null && typeof prev === 'object' && (prev.__next = next);
                                                            node === head && (root$2.__head = root$2.__next = next);
                                                            node === tail && (root$2.__tail = root$2.__prev = prev);
                                                            node.__next = node.__prev = void 0;
                                                            head = tail = next = prev = void 0;
                                                            ;
                                                            nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                        }
                                                        ;
                                                        delete stack[offset$2 + 0];
                                                        delete stack[offset$2 + 1];
                                                        delete stack[offset$2 + 2];
                                                        delete stack[offset$2 + 3];
                                                        delete stack[offset$2 + 4];
                                                        delete stack[offset$2 + 5];
                                                        delete stack[offset$2 + 6];
                                                        delete stack[offset$2 + 7];
                                                        --depth$2;
                                                    }
                                                    nodeParent = invParent;
                                                    node = invChild;
                                                }
                                                nodeParent[key$2] = node = message;
                                            }
                                            var sizeOffset = nodeSize - messageSize;
                                            if (sizeOffset !== 0) {
                                                var self = nodeParent, child = node;
                                                while (node = nodeParent) {
                                                    nodeParent = node[__PARENT];
                                                    if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                                        if (ref$5 && Array.isArray(ref$5)) {
                                                            destination$2 = ref$5[__CONTEXT];
                                                            if (destination$2) {
                                                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                                while (++i$5 <= n$3) {
                                                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                                                }
                                                                destination$2[__REFS_LENGTH] = n$3;
                                                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                                            }
                                                        }
                                                        if (node != null && typeof node === 'object') {
                                                            var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                                            while (++i$6 < n$4) {
                                                                if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                                                    ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                                                }
                                                            }
                                                            node[__REFS_LENGTH] = void 0;
                                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                                            next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                                            prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                                            node === head$2 && (root$3.__head = root$3.__next = next$2);
                                                            node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                                            node.__next = node.__prev = void 0;
                                                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                                                            ;
                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                        }
                                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$7, i$7, k, n$5;
                                                        while (depth$3 > -1) {
                                                            if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                i$7 = k = -1;
                                                                n$5 = node[__REFS_LENGTH] || 0;
                                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                                    linkPaths[++k] = ref$7;
                                                                } else if (n$5 > 0) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$5);
                                                                }
                                                                while (++i$7 < n$5) {
                                                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        linkPaths[++k] = ref$7;
                                                                    }
                                                                }
                                                            }
                                                            if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                ++depth$3;
                                                            } else {
                                                                stack$2[depth$3--] = void 0;
                                                            }
                                                        }
                                                        node = self$2;
                                                    }
                                                }
                                                nodeParent = self;
                                                node = child;
                                                ;
                                            }
                                            node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                            break merge_node_5823;
                                        } while (true);
                                    node = node;
                                    node = node;
                                }
                                node = node;
                                message = message;
                                linkDepth = linkDepth + 1;
                                continue follow_link_5653;
                            } while (true);
                        node = node;
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            message = message;
                            depth = depth;
                            continue follow_path_set_5430;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (key != null) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            nodeExpires = node && node[$EXPIRES];
                            nodeTimestamp = node && node[$TIMESTAMP];
                            messageExpires = message && message[$EXPIRES];
                            messageTimestamp = message && message[$TIMESTAMP];
                            if (messageExpires === 0) {
                                node = message;
                                nodeType = message && message[$TYPE] || void 0;
                                nodeValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                nodeExpires = messageExpires;
                                nodeTimestamp = messageTimestamp;
                            } else if (messageTimestamp < nodeTimestamp === false) {
                                if (node !== message || !(node != null && typeof node === 'object')) {
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                    message = message;
                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                        delete messageValue[$SIZE];
                                        if (messageType === SENTINEL) {
                                            messageSize = 50 + (messageValue.length || 1);
                                        } else {
                                            messageSize = messageValue.length || 1;
                                        }
                                        message[$SIZE] = messageSize;
                                        messageValue[__CONTAINER] = message;
                                    } else if (messageType === SENTINEL) {
                                        message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                    } else if (messageType === ERROR) {
                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                    } else if (!(message != null && typeof message === 'object')) {
                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        messageType = 'sentinel';
                                        message = Object.create(null);
                                        message[VALUE] = messageValue;
                                        message[$TYPE] = messageType;
                                        message[$SIZE] = messageSize;
                                    } else {
                                        messageType = message[$TYPE] = messageType || GROUP;
                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                    }
                                    ;
                                    var sizeOffset$2 = (node && node[$SIZE] || 0) - messageSize;
                                    if (node !== message && (node != null && typeof node === 'object')) {
                                        var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                        while (++i$8 < nodeRefsLength$2) {
                                            if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                ref$8[__CONTEXT] = message;
                                                message[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                node[__REF + i$8] = void 0;
                                            }
                                        }
                                        message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                        node[__REFS_LENGTH] = ref$8 = void 0;
                                        var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                nodeParent,
                                                invKey$2,
                                                node
                                            ], depth$4 = 0;
                                        while (depth$4 > -1) {
                                            nodeParent = stack$3[offset$3 = depth$4 * 8];
                                            invKey$2 = stack$3[offset$3 + 1];
                                            node = stack$3[offset$3 + 2];
                                            if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                            }
                                            if (isBranch$2 === true) {
                                                if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                                    keys$2 = stack$3[offset$3 + 6] = [];
                                                    index$3 = -1;
                                                    for (var childKey$2 in node) {
                                                        !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                                    }
                                                }
                                                index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                if (index$3 < keys$2.length) {
                                                    stack$3[offset$3 + 7] = index$3 + 1;
                                                    stack$3[offset$3 = ++depth$4 * 8] = node;
                                                    stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                                    stack$3[offset$3 + 2] = node[invKey$2];
                                                    continue;
                                                }
                                            }
                                            var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                            if (ref$9 && Array.isArray(ref$9)) {
                                                destination$3 = ref$9[__CONTEXT];
                                                if (destination$3) {
                                                    var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$9 <= n$6) {
                                                        destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                    }
                                                    destination$3[__REFS_LENGTH] = n$6;
                                                    ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                }
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                while (++i$10 < n$7) {
                                                    if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                        ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                                next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                                prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                                node === head$3 && (root$4.__head = root$4.__next = next$3);
                                                node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                                node.__next = node.__prev = void 0;
                                                head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                ;
                                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            }
                                            ;
                                            delete stack$3[offset$3 + 0];
                                            delete stack$3[offset$3 + 1];
                                            delete stack$3[offset$3 + 2];
                                            delete stack$3[offset$3 + 3];
                                            delete stack$3[offset$3 + 4];
                                            delete stack$3[offset$3 + 5];
                                            delete stack$3[offset$3 + 6];
                                            delete stack$3[offset$3 + 7];
                                            --depth$4;
                                        }
                                        nodeParent = invParent$2;
                                        node = invChild$2;
                                    }
                                    nodeParent[key] = node = message;
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = messageValue;
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    var self$3 = nodeParent, child$2 = node;
                                    while (node = nodeParent) {
                                        nodeParent = node[__PARENT];
                                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$2) <= 0 && nodeParent) {
                                            var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                            if (ref$11 && Array.isArray(ref$11)) {
                                                destination$4 = ref$11[__CONTEXT];
                                                if (destination$4) {
                                                    var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$11 <= n$8) {
                                                        destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                    }
                                                    destination$4[__REFS_LENGTH] = n$8;
                                                    ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                }
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                while (++i$12 < n$9) {
                                                    if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                        ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                                next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                                prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                                node === head$4 && (root$5.__head = root$5.__next = next$4);
                                                node === tail$4 && (root$5.__tail = root$5.__prev = prev$4);
                                                node.__next = node.__prev = void 0;
                                                head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                ;
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            }
                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$13, i$13, k$2, n$10;
                                            while (depth$5 > -1) {
                                                if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                    i$13 = k$2 = -1;
                                                    n$10 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                    if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$4[depth$5] = linkPaths$2 = new Array(n$10 + 1);
                                                        linkPaths$2[++k$2] = ref$13;
                                                    } else if (n$10 > 0) {
                                                        stack$4[depth$5] = linkPaths$2 = new Array(n$10);
                                                    }
                                                    while (++i$13 < n$10) {
                                                        if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            linkPaths$2[++k$2] = ref$13;
                                                        }
                                                    }
                                                }
                                                if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                    ++depth$5;
                                                } else {
                                                    stack$4[depth$5--] = void 0;
                                                }
                                            }
                                            node = self$4;
                                        }
                                    }
                                    nodeParent = self$3;
                                    node = child$2;
                                }
                            }
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                if (node !== head$5) {
                                    next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                    prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                    root$6.__head = root$6.__next = head$5 = node;
                                    head$5.__next = next$5;
                                    head$5.__prev = void 0;
                                }
                                if (tail$5 == null || node === tail$5) {
                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                }
                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                            }
                            ;
                            var i$14 = -1, n$11 = requestedPath.length, copy = new Array(n$11);
                            while (++i$14 < n$11) {
                                copy[i$14] = requestedPath[i$14];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$15 = -1, n$12 = optimizedPath.length, copy$2 = new Array(n$12);
                            while (++i$15 < n$12) {
                                copy$2[i$15] = optimizedPath[i$15];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$16 = -1, n$13, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$13 = src.length);
                                                        while (++i$16 < n$13) {
                                                            dest[i$16] = src[i$16];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$17 = -1, n$14, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$14 = src$2.length);
                                                        while (++i$17 < n$14) {
                                                            dest$2[i$17] = src$2[i$17];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$18 = -1, n$15, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$15 = src$3.length);
                                                    while (++i$18 < n$15) {
                                                        dest$3[i$18] = src$3[i$18];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$19 = -1, n$16, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$16 = src$4.length);
                                                        while (++i$19 < n$16) {
                                                            dest$4[i$19] = src$4[i$19];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$20 = -1, n$17, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$17 = src$5.length);
                                                        while (++i$20 < n$17) {
                                                            dest$5[i$20] = src$5[i$20];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                if (node !== head$6) {
                                    next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                    prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                    (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                    root$7.__head = root$7.__next = head$6 = node;
                                    head$6.__next = next$6;
                                    head$6.__prev = void 0;
                                }
                                if (tail$6 == null || node === tail$6) {
                                    root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                }
                                root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                            }
                            var pbv = Object.create(null), i$21 = -1, n$18 = requestedPath.length, val, copy$3 = new Array(n$18);
                            while (++i$21 < n$18) {
                                copy$3[i$21] = requestedPath[i$21];
                            }
                            var dest$6 = node, src$6 = dest$6, i$22 = -1, n$19, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$19 = src$6.length);
                                    while (++i$22 < n$19) {
                                        dest$6[i$22] = src$6[i$22];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$23 = -1, j = -1, l = 0, n$20 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                            while (++i$23 < n$20) {
                                req[i$23] = nodePath[i$23];
                            }
                            while (++j < k$3) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$23++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$20 + l + height - depth;
                            while (i$23 < m) {
                                req[i$23++] = path[l++];
                            }
                            req.length = i$23;
                            req.pathSetIndex = index;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$24 = -1, n$21 = optimizedPath.length, opt = new Array(n$21 + height - depth), j$2, x$8;
                            while (++i$24 < n$21) {
                                opt[i$24] = optimizedPath[i$24];
                            }
                            for (j$2 = depth, n$21 = height; j$2 < n$21;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$24++] = x$8;
                                }
                            }
                            opt.length = i$24;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_5430;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    messages[depth - 1] = messageParent = message;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        message = messageParent && messageParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        node = node;
                        message = message;
                        merge_node_6721:
                            do {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (node == null && message == null) {
                                    node = node;
                                    break merge_node_6721;
                                } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    node = node;
                                    break merge_node_6721;
                                }
                                messageType = message && message[$TYPE] || void 0;
                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    if (message == null) {
                                        node = node;
                                        break merge_node_6721;
                                    } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                        if (node === message) {
                                            if (node === nodeValue[__CONTAINER]) {
                                                node = node;
                                                break merge_node_6721;
                                            }
                                            messageType = nodeType;
                                            messageValue = nodeValue;
                                        } else if ((message && message[$EXPIRES]) === 0) {
                                            node = node = message;
                                            break merge_node_6721;
                                        } else {
                                            if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                message = message;
                                                messageValue = messageValue;
                                                node = node;
                                                nodeValue = nodeValue;
                                                replace_cache_reference_6895:
                                                    do {
                                                        // compare the cache and message references.
                                                        // if they're the same, break early so we don't insert.
                                                        // if they're different, replace the cache reference.
                                                        var i$25 = nodeValue.length;
                                                        // If the reference lengths are equal, we have to check their keys
                                                        // for equality.
                                                        // If their lengths aren't the equal, the references aren't equal.
                                                        // Insert the reference from the message.
                                                        if (i$25 === messageValue.length) {
                                                            while (--i$25 > -1) {
                                                                // If any of their keys are different, replace the reference
                                                                // in the cache with the reference in the message.
                                                                if (nodeValue[i$25] !== messageValue[i$25]) {
                                                                    message = message;
                                                                    break replace_cache_reference_6895;
                                                                }
                                                            }
                                                            if (i$25 === -1) {
                                                                message = node;
                                                                break replace_cache_reference_6895;
                                                            }
                                                        }
                                                        message = message;
                                                        break replace_cache_reference_6895;
                                                    } while (true);
                                                message = message;
                                            }
                                            if (node === message) {
                                                node = node;
                                                break merge_node_6721;
                                            }
                                        }
                                    }
                                } else if (node === message) {
                                    node = node;
                                    break merge_node_6721;
                                } else if (!nodeType && (node != null && typeof node === 'object')) {
                                    if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                        node = node;
                                        break merge_node_6721;
                                    }
                                }
                                nodeSize = node && node[$SIZE] || 0;
                                messageSize = message && message[$SIZE] || 0;
                                if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                    message = message;
                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                        delete messageValue[$SIZE];
                                        if (messageType === SENTINEL) {
                                            messageSize = 50 + (messageValue.length || 1);
                                        } else {
                                            messageSize = messageValue.length || 1;
                                        }
                                        message[$SIZE] = messageSize;
                                        messageValue[__CONTAINER] = message;
                                    } else if (messageType === SENTINEL) {
                                        message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                    } else if (messageType === ERROR) {
                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                    } else if (!(message != null && typeof message === 'object')) {
                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        messageType = 'sentinel';
                                        message = Object.create(null);
                                        message[VALUE] = messageValue;
                                        message[$TYPE] = messageType;
                                        message[$SIZE] = messageSize;
                                    } else {
                                        messageType = message[$TYPE] = messageType || GROUP;
                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                    }
                                }
                                if (node == null) {
                                    nodeParent[key] = node = message;
                                } else if (node !== message) {
                                    if (node !== message && (node != null && typeof node === 'object')) {
                                        var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$26 = -1, ref$14;
                                        while (++i$26 < nodeRefsLength$3) {
                                            if ((ref$14 = node[__REF + i$26]) !== void 0) {
                                                ref$14[__CONTEXT] = message;
                                                message[__REF + (destRefsLength$3 + i$26)] = ref$14;
                                                node[__REF + i$26] = void 0;
                                            }
                                        }
                                        message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                        node[__REFS_LENGTH] = ref$14 = void 0;
                                        var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                nodeParent,
                                                invKey$3,
                                                node
                                            ], depth$6 = 0;
                                        while (depth$6 > -1) {
                                            nodeParent = stack$5[offset$4 = depth$6 * 8];
                                            invKey$3 = stack$5[offset$4 + 1];
                                            node = stack$5[offset$4 + 2];
                                            if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                            }
                                            if (isBranch$3 === true) {
                                                if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                                    keys$3 = stack$5[offset$4 + 6] = [];
                                                    index$4 = -1;
                                                    for (var childKey$3 in node) {
                                                        !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                                    }
                                                }
                                                index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                if (index$4 < keys$3.length) {
                                                    stack$5[offset$4 + 7] = index$4 + 1;
                                                    stack$5[offset$4 = ++depth$6 * 8] = node;
                                                    stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                                    stack$5[offset$4 + 2] = node[invKey$3];
                                                    continue;
                                                }
                                            }
                                            var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                            if (ref$15 && Array.isArray(ref$15)) {
                                                destination$5 = ref$15[__CONTEXT];
                                                if (destination$5) {
                                                    var i$27 = (ref$15[__REF_INDEX] || 0) - 1, n$22 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$27 <= n$22) {
                                                        destination$5[__REF + i$27] = destination$5[__REF + (i$27 + 1)];
                                                    }
                                                    destination$5[__REFS_LENGTH] = n$22;
                                                    ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                }
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var ref$16, i$28 = -1, n$23 = node[__REFS_LENGTH] || 0;
                                                while (++i$28 < n$23) {
                                                    if ((ref$16 = node[__REF + i$28]) !== void 0) {
                                                        ref$16[__CONTEXT] = node[__REF + i$28] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7 = node.__next, prev$7 = node.__prev;
                                                next$7 != null && typeof next$7 === 'object' && (next$7.__prev = prev$7);
                                                prev$7 != null && typeof prev$7 === 'object' && (prev$7.__next = next$7);
                                                node === head$7 && (root$8.__head = root$8.__next = next$7);
                                                node === tail$7 && (root$8.__tail = root$8.__prev = prev$7);
                                                node.__next = node.__prev = void 0;
                                                head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                ;
                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            }
                                            ;
                                            delete stack$5[offset$4 + 0];
                                            delete stack$5[offset$4 + 1];
                                            delete stack$5[offset$4 + 2];
                                            delete stack$5[offset$4 + 3];
                                            delete stack$5[offset$4 + 4];
                                            delete stack$5[offset$4 + 5];
                                            delete stack$5[offset$4 + 6];
                                            delete stack$5[offset$4 + 7];
                                            --depth$6;
                                        }
                                        nodeParent = invParent$3;
                                        node = invChild$3;
                                    }
                                    nodeParent[key] = node = message;
                                }
                                var sizeOffset$3 = nodeSize - messageSize;
                                if (sizeOffset$3 !== 0) {
                                    var self$5 = nodeParent, child$3 = node;
                                    while (node = nodeParent) {
                                        nodeParent = node[__PARENT];
                                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$3) <= 0 && nodeParent) {
                                            var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                            if (ref$17 && Array.isArray(ref$17)) {
                                                destination$6 = ref$17[__CONTEXT];
                                                if (destination$6) {
                                                    var i$29 = (ref$17[__REF_INDEX] || 0) - 1, n$24 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$29 <= n$24) {
                                                        destination$6[__REF + i$29] = destination$6[__REF + (i$29 + 1)];
                                                    }
                                                    destination$6[__REFS_LENGTH] = n$24;
                                                    ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                }
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var ref$18, i$30 = -1, n$25 = node[__REFS_LENGTH] || 0;
                                                while (++i$30 < n$25) {
                                                    if ((ref$18 = node[__REF + i$30]) !== void 0) {
                                                        ref$18[__CONTEXT] = node[__REF + i$30] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8 = node.__next, prev$8 = node.__prev;
                                                next$8 != null && typeof next$8 === 'object' && (next$8.__prev = prev$8);
                                                prev$8 != null && typeof prev$8 === 'object' && (prev$8.__next = next$8);
                                                node === head$8 && (root$9.__head = root$9.__next = next$8);
                                                node === tail$8 && (root$9.__tail = root$9.__prev = prev$8);
                                                node.__next = node.__prev = void 0;
                                                head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                ;
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            }
                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$19, i$31, k$4, n$26;
                                            while (depth$7 > -1) {
                                                if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                                    i$31 = k$4 = -1;
                                                    n$26 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                    if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$6[depth$7] = linkPaths$3 = new Array(n$26 + 1);
                                                        linkPaths$3[++k$4] = ref$19;
                                                    } else if (n$26 > 0) {
                                                        stack$6[depth$7] = linkPaths$3 = new Array(n$26);
                                                    }
                                                    while (++i$31 < n$26) {
                                                        if ((ref$19 = node[__REF + i$31]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            linkPaths$3[++k$4] = ref$19;
                                                        }
                                                    }
                                                }
                                                if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                                    ++depth$7;
                                                } else {
                                                    stack$6[depth$7--] = void 0;
                                                }
                                            }
                                            node = self$6;
                                        }
                                    }
                                    nodeParent = self$5;
                                    node = child$3;
                                    ;
                                }
                                node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                break merge_node_6721;
                            } while (true);
                        node = node;
                        node = node;
                        // Only create a branch if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a branch or reference.
                        if (jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        } else if (typeof json !== 'object') {
                                            throw new Error('Fatal Falcor Error: encountered value in branch position while building Path Map.');
                                        }
                                        json[__KEY] = jsonKey$2;
                                        json[__GENERATION] = node[__GENERATION] || 0;
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    message = message;
                    depth = depth + 1;
                    continue follow_path_set_5430;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_5517:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_5517;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_5517;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_5517;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_5517;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_5517;
                    }
                    depth = path.depth = depth;
                    break unroll_5517;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': [{ json: jsons[offset - 1] }],
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsJSON(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    offset = 0;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodePath = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, messages = [], messageRoot, messageParent, message, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    var envelope, pathSets, pathSetIndex = 0;
    for (var envelopeIndex = -1, envelopeCount = envelopes.length; ++envelopeIndex < envelopeCount;) {
        envelope = envelopes[envelopeIndex];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value;
        for (var index = -1, count = pathSets.length; ++index < count;) {
            path = pathSets[index];
            depth = 0;
            refs.length = 0;
            jsons.length = 0;
            keysets.length = 0;
            jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[pathSetIndex];
            while (depth > -1) {
                var ref = linkIndex = depth;
                refs.length = depth + 1;
                while (linkIndex >= -1) {
                    if (!!(ref = refs[linkIndex])) {
                        ~linkIndex || ++linkIndex;
                        linkHeight = ref.length;
                        var i = 0, j = 0;
                        while (i < linkHeight) {
                            optimizedPath[j++] = ref[i++];
                        }
                        i = linkIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        requestedPath.length = i;
                        optimizedPath.length = j;
                        break;
                    }
                    --linkIndex;
                }
                /* Walk Path Set */
                var key = void 0, isKeySet = false;
                height = path.length;
                node = nodeParent = nodes[depth - 1];
                message = messageParent = messages[depth - 1];
                depth = depth;
                follow_path_set_9645:
                    do {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            message = messageParent = messageRoot;
                            linkDepth = linkDepth;
                            follow_link_9869:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_9869;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    messageParent = message;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        message = messageParent && messageParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        node = node;
                                        message = message;
                                        merge_node_10039:
                                            do {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                if (node == null && message == null) {
                                                    node = node;
                                                    break merge_node_10039;
                                                } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                    node = node;
                                                    break merge_node_10039;
                                                }
                                                messageType = message && message[$TYPE] || void 0;
                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (message == null) {
                                                        node = node;
                                                        break merge_node_10039;
                                                    } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        if (node === message) {
                                                            if (node === nodeValue[__CONTAINER]) {
                                                                node = node;
                                                                break merge_node_10039;
                                                            }
                                                            messageType = nodeType;
                                                            messageValue = nodeValue;
                                                        } else if ((message && message[$EXPIRES]) === 0) {
                                                            node = node = message;
                                                            break merge_node_10039;
                                                        } else {
                                                            if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                                message = message;
                                                                messageValue = messageValue;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                replace_cache_reference_10211:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i === messageValue.length) {
                                                                            while (--i > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i] !== messageValue[i]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_10211;
                                                                                }
                                                                            }
                                                                            if (i === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_10211;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_10211;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                            if (node === message) {
                                                                node = node;
                                                                break merge_node_10039;
                                                            }
                                                        }
                                                    }
                                                } else if (node === message) {
                                                    node = node;
                                                    break merge_node_10039;
                                                } else if (!nodeType && (node != null && typeof node === 'object')) {
                                                    if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                                        node = node;
                                                        break merge_node_10039;
                                                    }
                                                }
                                                nodeSize = node && node[$SIZE] || 0;
                                                messageSize = message && message[$SIZE] || 0;
                                                if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                    message = message;
                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        delete messageValue[$SIZE];
                                                        if (messageType === SENTINEL) {
                                                            messageSize = 50 + (messageValue.length || 1);
                                                        } else {
                                                            messageSize = messageValue.length || 1;
                                                        }
                                                        message[$SIZE] = messageSize;
                                                        messageValue[__CONTAINER] = message;
                                                    } else if (messageType === SENTINEL) {
                                                        message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    } else if (messageType === ERROR) {
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    } else if (!(message != null && typeof message === 'object')) {
                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                        messageType = 'sentinel';
                                                        message = Object.create(null);
                                                        message[VALUE] = messageValue;
                                                        message[$TYPE] = messageType;
                                                        message[$SIZE] = messageSize;
                                                    } else {
                                                        messageType = message[$TYPE] = messageType || GROUP;
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    }
                                                }
                                                if (node == null) {
                                                    nodeParent[key$2] = node = message;
                                                } else if (node !== message) {
                                                    if (node !== message && (node != null && typeof node === 'object')) {
                                                        var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                                                        while (++i$2 < nodeRefsLength) {
                                                            if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                                                ref$2[__CONTEXT] = message;
                                                                message[__REF + (destRefsLength + i$2)] = ref$2;
                                                                node[__REF + i$2] = void 0;
                                                            }
                                                        }
                                                        message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                        node[__REFS_LENGTH] = ref$2 = void 0;
                                                        var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                                nodeParent,
                                                                invKey,
                                                                node
                                                            ], depth$2 = 0;
                                                        while (depth$2 > -1) {
                                                            nodeParent = stack[offset$2 = depth$2 * 8];
                                                            invKey = stack[offset$2 + 1];
                                                            node = stack[offset$2 + 2];
                                                            if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                                childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                            }
                                                            childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                            if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                                isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                            }
                                                            if (isBranch === true) {
                                                                if ((keys = stack[offset$2 + 6]) === void 0) {
                                                                    keys = stack[offset$2 + 6] = [];
                                                                    index$2 = -1;
                                                                    for (var childKey in node) {
                                                                        !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                                    }
                                                                }
                                                                index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                                if (index$2 < keys.length) {
                                                                    stack[offset$2 + 7] = index$2 + 1;
                                                                    stack[offset$2 = ++depth$2 * 8] = node;
                                                                    stack[offset$2 + 1] = invKey = keys[index$2];
                                                                    stack[offset$2 + 2] = node[invKey];
                                                                    continue;
                                                                }
                                                            }
                                                            var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                            if (ref$3 && Array.isArray(ref$3)) {
                                                                destination = ref$3[__CONTEXT];
                                                                if (destination) {
                                                                    var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$3 <= n) {
                                                                        destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                                                    }
                                                                    destination[__REFS_LENGTH] = n;
                                                                    ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                                while (++i$4 < n$2) {
                                                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                                next != null && typeof next === 'object' && (next.__prev = prev);
                                                                prev != null && typeof prev === 'object' && (prev.__next = next);
                                                                node === head && (root$2.__head = root$2.__next = next);
                                                                node === tail && (root$2.__tail = root$2.__prev = prev);
                                                                node.__next = node.__prev = void 0;
                                                                head = tail = next = prev = void 0;
                                                                ;
                                                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                            ;
                                                            delete stack[offset$2 + 0];
                                                            delete stack[offset$2 + 1];
                                                            delete stack[offset$2 + 2];
                                                            delete stack[offset$2 + 3];
                                                            delete stack[offset$2 + 4];
                                                            delete stack[offset$2 + 5];
                                                            delete stack[offset$2 + 6];
                                                            delete stack[offset$2 + 7];
                                                            --depth$2;
                                                        }
                                                        nodeParent = invParent;
                                                        node = invChild;
                                                    }
                                                    nodeParent[key$2] = node = message;
                                                }
                                                var sizeOffset = nodeSize - messageSize;
                                                if (sizeOffset !== 0) {
                                                    var self = nodeParent, child = node;
                                                    while (node = nodeParent) {
                                                        nodeParent = node[__PARENT];
                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                                            var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                                            if (ref$5 && Array.isArray(ref$5)) {
                                                                destination$2 = ref$5[__CONTEXT];
                                                                if (destination$2) {
                                                                    var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$5 <= n$3) {
                                                                        destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                                                    }
                                                                    destination$2[__REFS_LENGTH] = n$3;
                                                                    ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                                                while (++i$6 < n$4) {
                                                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                                                next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                                                prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                                                node === head$2 && (root$3.__head = root$3.__next = next$2);
                                                                node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                                                node.__next = node.__prev = void 0;
                                                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                                                                ;
                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$7, i$7, k, n$5;
                                                            while (depth$3 > -1) {
                                                                if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                    i$7 = k = -1;
                                                                    n$5 = node[__REFS_LENGTH] || 0;
                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                                    if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                                        linkPaths[++k] = ref$7;
                                                                    } else if (n$5 > 0) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5);
                                                                    }
                                                                    while (++i$7 < n$5) {
                                                                        if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            linkPaths[++k] = ref$7;
                                                                        }
                                                                    }
                                                                }
                                                                if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                    ++depth$3;
                                                                } else {
                                                                    stack$2[depth$3--] = void 0;
                                                                }
                                                            }
                                                            node = self$2;
                                                        }
                                                    }
                                                    nodeParent = self;
                                                    node = child;
                                                    ;
                                                }
                                                node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                break merge_node_10039;
                                            } while (true);
                                        node = node;
                                        node = node;
                                    }
                                    node = node;
                                    message = message;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_9869;
                                } while (true);
                            node = node;
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                message = message;
                                depth = depth;
                                continue follow_path_set_9645;
                            }
                        } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            if (key != null) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeExpires = node && node[$EXPIRES];
                                nodeTimestamp = node && node[$TIMESTAMP];
                                messageExpires = message && message[$EXPIRES];
                                messageTimestamp = message && message[$TIMESTAMP];
                                if (messageExpires === 0) {
                                    node = message;
                                    nodeType = message && message[$TYPE] || void 0;
                                    nodeValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                    nodeExpires = messageExpires;
                                    nodeTimestamp = messageTimestamp;
                                } else if (messageTimestamp < nodeTimestamp === false) {
                                    if (node !== message || !(node != null && typeof node === 'object')) {
                                        messageType = message && message[$TYPE] || void 0;
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var sizeOffset$2 = (node && node[$SIZE] || 0) - messageSize;
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                            while (++i$8 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                    ref$8[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                    node[__REF + i$8] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$2 = stack$3[offset$3 + 6] = [];
                                                        index$3 = -1;
                                                        for (var childKey$2 in node) {
                                                            !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                                        }
                                                    }
                                                    index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$3 < keys$2.length) {
                                                        stack$3[offset$3 + 7] = index$3 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$9 <= n$6) {
                                                            destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$6;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                    while (++i$10 < n$7) {
                                                        if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                                    next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                                    prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                                    node === head$3 && (root$4.__head = root$4.__next = next$3);
                                                    node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                                    node.__next = node.__prev = void 0;
                                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    ;
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = messageValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var self$3 = nodeParent, child$2 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$2) <= 0 && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$11 <= n$8) {
                                                            destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$8;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                    while (++i$12 < n$9) {
                                                        if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$13, i$13, k$2, n$10;
                                                while (depth$5 > -1) {
                                                    if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                        i$13 = k$2 = -1;
                                                        n$10 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$10 + 1);
                                                            linkPaths$2[++k$2] = ref$13;
                                                        } else if (n$10 > 0) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$10);
                                                        }
                                                        while (++i$13 < n$10) {
                                                            if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                                node = self$4;
                                            }
                                        }
                                        nodeParent = self$3;
                                        node = child$2;
                                    }
                                }
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                ;
                                var i$14 = -1, n$11 = requestedPath.length, copy = new Array(n$11);
                                while (++i$14 < n$11) {
                                    copy[i$14] = requestedPath[i$14];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$15 = -1, n$12 = optimizedPath.length, copy$2 = new Array(n$12);
                                while (++i$15 < n$12) {
                                    copy$2[i$15] = optimizedPath[i$15];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Insert the JSON value if:
                                //  1. The caller supplied a JSON root seed.
                                //  2. The path depth is past the bound path length.
                                //  3. The current node is a leaf or reference.
                                if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    var jsonKey = void 0, jsonDepth = depth;
                                    do {
                                        if (jsonKey == null) {
                                            jsonKey = keysets[jsonDepth];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                            if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest = node, src = dest, i$16 = -1, n$13, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$13 = src.length);
                                                            while (++i$16 < n$13) {
                                                                dest[i$16] = src[i$16];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$17 = -1, n$14, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$14 = src$2.length);
                                                            while (++i$17 < n$14) {
                                                                dest$2[i$17] = src$2[i$17];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                }
                                            } else if (boxed === true) {
                                                var dest$3 = node, src$3 = dest$3, i$18 = -1, n$15, x$3;
                                                if (dest$3 != null && typeof dest$3 === 'object') {
                                                    if (Array.isArray(src$3)) {
                                                        dest$3 = new Array(n$15 = src$3.length);
                                                        while (++i$18 < n$15) {
                                                            dest$3[i$18] = src$3[i$18];
                                                        }
                                                    } else {
                                                        dest$3 = Object.create(null);
                                                        for (x$3 in src$3) {
                                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                        }
                                                    }
                                                }
                                                json = dest$3;
                                                if (nodeType === SENTINEL) {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$19 = -1, n$16, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$16 = src$4.length);
                                                            while (++i$19 < n$16) {
                                                                dest$4[i$19] = src$4[i$19];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json.value = dest$4;
                                                }
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$20 = -1, n$17, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$17 = src$5.length);
                                                            while (++i$20 < n$17) {
                                                                dest$5[i$20] = src$5[i$20];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[jsonKey] = json;
                                            break;
                                        }
                                    } while (jsonDepth >= offset - 2);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                    if (node !== head$6) {
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                        root$7.__head = root$7.__next = head$6 = node;
                                        head$6.__next = next$6;
                                        head$6.__prev = void 0;
                                    }
                                    if (tail$6 == null || node === tail$6) {
                                        root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                    }
                                    root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                }
                                var pbv = Object.create(null), i$21 = -1, n$18 = requestedPath.length, val, copy$3 = new Array(n$18);
                                while (++i$21 < n$18) {
                                    copy$3[i$21] = requestedPath[i$21];
                                }
                                var dest$6 = node, src$6 = dest$6, i$22 = -1, n$19, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$19 = src$6.length);
                                        while (++i$22 < n$19) {
                                            dest$6[i$22] = src$6[i$22];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val = dest$6;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$23 = -1, j = -1, l = 0, n$20 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                                while (++i$23 < n$20) {
                                    req[i$23] = nodePath[i$23];
                                }
                                while (++j < k$3) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$23++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                    }
                                }
                                m = n$20 + l + height - depth;
                                while (i$23 < m) {
                                    req[i$23++] = path[l++];
                                }
                                req.length = i$23;
                                req.pathSetIndex = pathSetIndex;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                var i$24 = -1, n$21 = optimizedPath.length, opt = new Array(n$21 + height - depth), j$2, x$8;
                                while (++i$24 < n$21) {
                                    opt[i$24] = optimizedPath[i$24];
                                }
                                for (j$2 = depth, n$21 = height; j$2 < n$21;) {
                                    if ((x$8 = path[j$2++]) != null) {
                                        opt[i$24++] = x$8;
                                    }
                                }
                                opt.length = i$24;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            node = node;
                            break follow_path_set_9645;
                        }
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        nodes[depth - 1] = nodeParent = node;
                        messages[depth - 1] = messageParent = message;
                        requestedPath[requestedPath.length = depth] = key;
                        keysets[keysets.length = depth] = isKeySet ? key : void 0;
                        if (key != null) {
                            node = nodeParent && nodeParent[key];
                            message = messageParent && messageParent[key];
                            optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                            node = node;
                            message = message;
                            merge_node_10934:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (node == null && message == null) {
                                        node = node;
                                        break merge_node_10934;
                                    } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        node = node;
                                        break merge_node_10934;
                                    }
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        if (message == null) {
                                            node = node;
                                            break merge_node_10934;
                                        } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            if (node === message) {
                                                if (node === nodeValue[__CONTAINER]) {
                                                    node = node;
                                                    break merge_node_10934;
                                                }
                                                messageType = nodeType;
                                                messageValue = nodeValue;
                                            } else if ((message && message[$EXPIRES]) === 0) {
                                                node = node = message;
                                                break merge_node_10934;
                                            } else {
                                                if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                    message = message;
                                                    messageValue = messageValue;
                                                    node = node;
                                                    nodeValue = nodeValue;
                                                    replace_cache_reference_11108:
                                                        do {
                                                            // compare the cache and message references.
                                                            // if they're the same, break early so we don't insert.
                                                            // if they're different, replace the cache reference.
                                                            var i$25 = nodeValue.length;
                                                            // If the reference lengths are equal, we have to check their keys
                                                            // for equality.
                                                            // If their lengths aren't the equal, the references aren't equal.
                                                            // Insert the reference from the message.
                                                            if (i$25 === messageValue.length) {
                                                                while (--i$25 > -1) {
                                                                    // If any of their keys are different, replace the reference
                                                                    // in the cache with the reference in the message.
                                                                    if (nodeValue[i$25] !== messageValue[i$25]) {
                                                                        message = message;
                                                                        break replace_cache_reference_11108;
                                                                    }
                                                                }
                                                                if (i$25 === -1) {
                                                                    message = node;
                                                                    break replace_cache_reference_11108;
                                                                }
                                                            }
                                                            message = message;
                                                            break replace_cache_reference_11108;
                                                        } while (true);
                                                    message = message;
                                                }
                                                if (node === message) {
                                                    node = node;
                                                    break merge_node_10934;
                                                }
                                            }
                                        }
                                    } else if (node === message) {
                                        node = node;
                                        break merge_node_10934;
                                    } else if (!nodeType && (node != null && typeof node === 'object')) {
                                        if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                            node = node;
                                            break merge_node_10934;
                                        }
                                    }
                                    nodeSize = node && node[$SIZE] || 0;
                                    messageSize = message && message[$SIZE] || 0;
                                    if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                    }
                                    if (node == null) {
                                        nodeParent[key] = node = message;
                                    } else if (node !== message) {
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$26 = -1, ref$14;
                                            while (++i$26 < nodeRefsLength$3) {
                                                if ((ref$14 = node[__REF + i$26]) !== void 0) {
                                                    ref$14[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$3 + i$26)] = ref$14;
                                                    node[__REF + i$26] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                    nodeParent,
                                                    invKey$3,
                                                    node
                                                ], depth$6 = 0;
                                            while (depth$6 > -1) {
                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                invKey$3 = stack$5[offset$4 + 1];
                                                node = stack$5[offset$4 + 2];
                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                }
                                                if (isBranch$3 === true) {
                                                    if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                                        keys$3 = stack$5[offset$4 + 6] = [];
                                                        index$4 = -1;
                                                        for (var childKey$3 in node) {
                                                            !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                                        }
                                                    }
                                                    index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                    if (index$4 < keys$3.length) {
                                                        stack$5[offset$4 + 7] = index$4 + 1;
                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                        stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                        continue;
                                                    }
                                                }
                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                if (ref$15 && Array.isArray(ref$15)) {
                                                    destination$5 = ref$15[__CONTEXT];
                                                    if (destination$5) {
                                                        var i$27 = (ref$15[__REF_INDEX] || 0) - 1, n$22 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$27 <= n$22) {
                                                            destination$5[__REF + i$27] = destination$5[__REF + (i$27 + 1)];
                                                        }
                                                        destination$5[__REFS_LENGTH] = n$22;
                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$16, i$28 = -1, n$23 = node[__REFS_LENGTH] || 0;
                                                    while (++i$28 < n$23) {
                                                        if ((ref$16 = node[__REF + i$28]) !== void 0) {
                                                            ref$16[__CONTEXT] = node[__REF + i$28] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7 = node.__next, prev$7 = node.__prev;
                                                    next$7 != null && typeof next$7 === 'object' && (next$7.__prev = prev$7);
                                                    prev$7 != null && typeof prev$7 === 'object' && (prev$7.__next = next$7);
                                                    node === head$7 && (root$8.__head = root$8.__next = next$7);
                                                    node === tail$7 && (root$8.__tail = root$8.__prev = prev$7);
                                                    node.__next = node.__prev = void 0;
                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                    ;
                                                    nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$5[offset$4 + 0];
                                                delete stack$5[offset$4 + 1];
                                                delete stack$5[offset$4 + 2];
                                                delete stack$5[offset$4 + 3];
                                                delete stack$5[offset$4 + 4];
                                                delete stack$5[offset$4 + 5];
                                                delete stack$5[offset$4 + 6];
                                                delete stack$5[offset$4 + 7];
                                                --depth$6;
                                            }
                                            nodeParent = invParent$3;
                                            node = invChild$3;
                                        }
                                        nodeParent[key] = node = message;
                                    }
                                    var sizeOffset$3 = nodeSize - messageSize;
                                    if (sizeOffset$3 !== 0) {
                                        var self$5 = nodeParent, child$3 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$3) <= 0 && nodeParent) {
                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                if (ref$17 && Array.isArray(ref$17)) {
                                                    destination$6 = ref$17[__CONTEXT];
                                                    if (destination$6) {
                                                        var i$29 = (ref$17[__REF_INDEX] || 0) - 1, n$24 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$29 <= n$24) {
                                                            destination$6[__REF + i$29] = destination$6[__REF + (i$29 + 1)];
                                                        }
                                                        destination$6[__REFS_LENGTH] = n$24;
                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$18, i$30 = -1, n$25 = node[__REFS_LENGTH] || 0;
                                                    while (++i$30 < n$25) {
                                                        if ((ref$18 = node[__REF + i$30]) !== void 0) {
                                                            ref$18[__CONTEXT] = node[__REF + i$30] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8 = node.__next, prev$8 = node.__prev;
                                                    next$8 != null && typeof next$8 === 'object' && (next$8.__prev = prev$8);
                                                    prev$8 != null && typeof prev$8 === 'object' && (prev$8.__next = next$8);
                                                    node === head$8 && (root$9.__head = root$9.__next = next$8);
                                                    node === tail$8 && (root$9.__tail = root$9.__prev = prev$8);
                                                    node.__next = node.__prev = void 0;
                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$19, i$31, k$4, n$26;
                                                while (depth$7 > -1) {
                                                    if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                                        i$31 = k$4 = -1;
                                                        n$26 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$26 + 1);
                                                            linkPaths$3[++k$4] = ref$19;
                                                        } else if (n$26 > 0) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$26);
                                                        }
                                                        while (++i$31 < n$26) {
                                                            if ((ref$19 = node[__REF + i$31]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$3[++k$4] = ref$19;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                                        ++depth$7;
                                                    } else {
                                                        stack$6[depth$7--] = void 0;
                                                    }
                                                }
                                                node = self$6;
                                            }
                                        }
                                        nodeParent = self$5;
                                        node = child$3;
                                        ;
                                    }
                                    node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    break merge_node_10934;
                                } while (true);
                            node = node;
                            node = node;
                            // Only create a branch if:
                            //  1. The current key is a keyset.
                            //  2. The caller supplied a JSON root seed.
                            //  3. The path depth is past the bound path length.
                            //  4. The current node is a branch or reference.
                            if (isKeySet === true && jsonRoot != null && depth >= offset) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                    do {
                                        if (jsonKey$2 == null) {
                                            jsonKey$2 = keysets[jsonDepth$2];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                            if ((json = jsonParent[jsonKey$2]) == null) {
                                                json = jsonParent[jsonKey$2] = Object.create(null);
                                            }
                                            jsonParent = json;
                                            break;
                                        }
                                    } while (jsonDepth$2 >= offset - 2);
                                    jsons[depth] = jsonParent;
                                }
                            }
                        }
                        node = node;
                        message = message;
                        depth = depth + 1;
                        continue follow_path_set_9645;
                    } while (true);
                node = node;
                var key$3;
                depth = depth - 1;
                unroll_9732:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_9732;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_9732;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_9732;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_9732;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_9732;
                        }
                        depth = path.depth = depth;
                        break unroll_9732;
                    } while (true);
                depth = depth;
            }
            values && (values[pathSetIndex++] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsJSONG(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    offset = 0;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = true, path, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], nodePath = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, messages = [], messageRoot, messageParent, message, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    var envelope, pathSets, pathSetIndex = -1;
    jsons[offset - 1] = jsonRoot = values && values[0];
    for (var envelopeIndex = -1, envelopeCount = envelopes.length; ++envelopeIndex < envelopeCount;) {
        envelope = envelopes[envelopeIndex];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value;
        for (var index = -1, count = pathSets.length; ++index < count;) {
            pathSetIndex++;
            path = pathSets[index];
            depth = 0;
            refs.length = 0;
            jsons.length = 0;
            while (depth > -1) {
                var ref = linkIndex = depth;
                refs.length = depth + 1;
                while (linkIndex >= -1) {
                    if (!!(ref = refs[linkIndex])) {
                        ~linkIndex || ++linkIndex;
                        linkHeight = ref.length;
                        var i = 0, j = 0;
                        while (i < linkHeight) {
                            optimizedPath[j++] = ref[i++];
                        }
                        i = linkIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        requestedPath.length = i;
                        optimizedPath.length = j;
                        break;
                    }
                    --linkIndex;
                }
                /* Walk Path Set */
                var key = void 0, isKeySet = false;
                height = path.length;
                node = nodeParent = nodes[depth - 1];
                message = messageParent = messages[depth - 1];
                json = jsonParent = jsons[depth - 1];
                depth = depth;
                follow_path_set_14106:
                    do {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            message = messageParent = messageRoot;
                            json = jsonParent = jsonRoot;
                            linkDepth = linkDepth;
                            follow_link_14333:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_14333;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    messageParent = message;
                                    jsonParent = json;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        message = messageParent && messageParent[key$2];
                                        json = jsonParent && jsonParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        node = node;
                                        message = message;
                                        merge_node_14511:
                                            do {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                if (node == null && message == null) {
                                                    node = node;
                                                    break merge_node_14511;
                                                } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                    node = node;
                                                    break merge_node_14511;
                                                }
                                                messageType = message && message[$TYPE] || void 0;
                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (message == null) {
                                                        node = node;
                                                        break merge_node_14511;
                                                    } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        if (node === message) {
                                                            if (node === nodeValue[__CONTAINER]) {
                                                                node = node;
                                                                break merge_node_14511;
                                                            }
                                                            messageType = nodeType;
                                                            messageValue = nodeValue;
                                                        } else if ((message && message[$EXPIRES]) === 0) {
                                                            node = node = message;
                                                            break merge_node_14511;
                                                        } else {
                                                            if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                                message = message;
                                                                messageValue = messageValue;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                replace_cache_reference_14685:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i === messageValue.length) {
                                                                            while (--i > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i] !== messageValue[i]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_14685;
                                                                                }
                                                                            }
                                                                            if (i === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_14685;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_14685;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                            if (node === message) {
                                                                node = node;
                                                                break merge_node_14511;
                                                            }
                                                        }
                                                    }
                                                } else if (node === message) {
                                                    node = node;
                                                    break merge_node_14511;
                                                } else if (!nodeType && (node != null && typeof node === 'object')) {
                                                    if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                                        node = node;
                                                        break merge_node_14511;
                                                    }
                                                }
                                                nodeSize = node && node[$SIZE] || 0;
                                                messageSize = message && message[$SIZE] || 0;
                                                if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                    message = message;
                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        delete messageValue[$SIZE];
                                                        if (messageType === SENTINEL) {
                                                            messageSize = 50 + (messageValue.length || 1);
                                                        } else {
                                                            messageSize = messageValue.length || 1;
                                                        }
                                                        message[$SIZE] = messageSize;
                                                        messageValue[__CONTAINER] = message;
                                                    } else if (messageType === SENTINEL) {
                                                        message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    } else if (messageType === ERROR) {
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    } else if (!(message != null && typeof message === 'object')) {
                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                        messageType = 'sentinel';
                                                        message = Object.create(null);
                                                        message[VALUE] = messageValue;
                                                        message[$TYPE] = messageType;
                                                        message[$SIZE] = messageSize;
                                                    } else {
                                                        messageType = message[$TYPE] = messageType || GROUP;
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    }
                                                }
                                                if (node == null) {
                                                    nodeParent[key$2] = node = message;
                                                } else if (node !== message) {
                                                    if (node !== message && (node != null && typeof node === 'object')) {
                                                        var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                                                        while (++i$2 < nodeRefsLength) {
                                                            if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                                                ref$2[__CONTEXT] = message;
                                                                message[__REF + (destRefsLength + i$2)] = ref$2;
                                                                node[__REF + i$2] = void 0;
                                                            }
                                                        }
                                                        message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                        node[__REFS_LENGTH] = ref$2 = void 0;
                                                        var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                                nodeParent,
                                                                invKey,
                                                                node
                                                            ], depth$2 = 0;
                                                        while (depth$2 > -1) {
                                                            nodeParent = stack[offset$2 = depth$2 * 8];
                                                            invKey = stack[offset$2 + 1];
                                                            node = stack[offset$2 + 2];
                                                            if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                                childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                            }
                                                            childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                            if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                                isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                            }
                                                            if (isBranch === true) {
                                                                if ((keys = stack[offset$2 + 6]) === void 0) {
                                                                    keys = stack[offset$2 + 6] = [];
                                                                    index$2 = -1;
                                                                    for (var childKey in node) {
                                                                        !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                                    }
                                                                }
                                                                index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                                if (index$2 < keys.length) {
                                                                    stack[offset$2 + 7] = index$2 + 1;
                                                                    stack[offset$2 = ++depth$2 * 8] = node;
                                                                    stack[offset$2 + 1] = invKey = keys[index$2];
                                                                    stack[offset$2 + 2] = node[invKey];
                                                                    continue;
                                                                }
                                                            }
                                                            var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                            if (ref$3 && Array.isArray(ref$3)) {
                                                                destination = ref$3[__CONTEXT];
                                                                if (destination) {
                                                                    var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$3 <= n) {
                                                                        destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                                                    }
                                                                    destination[__REFS_LENGTH] = n;
                                                                    ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                                while (++i$4 < n$2) {
                                                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                                next != null && typeof next === 'object' && (next.__prev = prev);
                                                                prev != null && typeof prev === 'object' && (prev.__next = next);
                                                                node === head && (root$2.__head = root$2.__next = next);
                                                                node === tail && (root$2.__tail = root$2.__prev = prev);
                                                                node.__next = node.__prev = void 0;
                                                                head = tail = next = prev = void 0;
                                                                ;
                                                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                            ;
                                                            delete stack[offset$2 + 0];
                                                            delete stack[offset$2 + 1];
                                                            delete stack[offset$2 + 2];
                                                            delete stack[offset$2 + 3];
                                                            delete stack[offset$2 + 4];
                                                            delete stack[offset$2 + 5];
                                                            delete stack[offset$2 + 6];
                                                            delete stack[offset$2 + 7];
                                                            --depth$2;
                                                        }
                                                        nodeParent = invParent;
                                                        node = invChild;
                                                    }
                                                    nodeParent[key$2] = node = message;
                                                }
                                                var sizeOffset = nodeSize - messageSize;
                                                if (sizeOffset !== 0) {
                                                    var self = nodeParent, child = node;
                                                    while (node = nodeParent) {
                                                        nodeParent = node[__PARENT];
                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                                            var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                                            if (ref$5 && Array.isArray(ref$5)) {
                                                                destination$2 = ref$5[__CONTEXT];
                                                                if (destination$2) {
                                                                    var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$5 <= n$3) {
                                                                        destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                                                    }
                                                                    destination$2[__REFS_LENGTH] = n$3;
                                                                    ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                                                while (++i$6 < n$4) {
                                                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                                                next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                                                prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                                                node === head$2 && (root$3.__head = root$3.__next = next$2);
                                                                node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                                                node.__next = node.__prev = void 0;
                                                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                                                                ;
                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$7, i$7, k, n$5;
                                                            while (depth$3 > -1) {
                                                                if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                    i$7 = k = -1;
                                                                    n$5 = node[__REFS_LENGTH] || 0;
                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                                    if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                                        linkPaths[++k] = ref$7;
                                                                    } else if (n$5 > 0) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5);
                                                                    }
                                                                    while (++i$7 < n$5) {
                                                                        if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            linkPaths[++k] = ref$7;
                                                                        }
                                                                    }
                                                                }
                                                                if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                    ++depth$3;
                                                                } else {
                                                                    stack$2[depth$3--] = void 0;
                                                                }
                                                            }
                                                            node = self$2;
                                                        }
                                                    }
                                                    nodeParent = self;
                                                    node = child;
                                                    ;
                                                }
                                                node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                break merge_node_14511;
                                            } while (true);
                                        node = node;
                                        node = node;
                                        // Create a JSONG branch, or insert the value if:
                                        //  1. The caller provided a JSONG root seed.
                                        //  2. The node is a branch or value, or materialized mode is on.
                                        if (jsonRoot != null) {
                                            if (node != null) {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = node[$TYPE] === SENTINEL ? node[VALUE] : node;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (boxed === true) {
                                                        var dest = node, src = dest, i$8 = -1, n$6, x;
                                                        if (dest != null && typeof dest === 'object') {
                                                            if (Array.isArray(src)) {
                                                                dest = new Array(n$6 = src.length);
                                                                while (++i$8 < n$6) {
                                                                    dest[i$8] = src[i$8];
                                                                }
                                                            } else {
                                                                dest = Object.create(null);
                                                                for (x in src) {
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                            }
                                                        }
                                                        json = dest;
                                                    } else {
                                                        var dest$2 = nodeValue, src$2 = dest$2, i$9 = -1, n$7, x$2;
                                                        if (dest$2 != null && typeof dest$2 === 'object') {
                                                            if (Array.isArray(src$2)) {
                                                                dest$2 = new Array(n$7 = src$2.length);
                                                                while (++i$9 < n$7) {
                                                                    dest$2[i$9] = src$2[i$9];
                                                                }
                                                            } else {
                                                                dest$2 = Object.create(null);
                                                                for (x$2 in src$2) {
                                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$2;
                                                    }
                                                } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                                    if ((json = jsonParent[key$2]) == null) {
                                                        json = Object.create(null);
                                                    } else if (typeof json !== 'object') {
                                                        throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                                    }
                                                } else if (materialized === true) {
                                                    if (node == null) {
                                                        json = Object.create(null);
                                                        json[$TYPE] = SENTINEL;
                                                    } else if (nodeValue === void 0) {
                                                        var dest$3 = node, src$3 = dest$3, i$10 = -1, n$8, x$3;
                                                        if (dest$3 != null && typeof dest$3 === 'object') {
                                                            if (Array.isArray(src$3)) {
                                                                dest$3 = new Array(n$8 = src$3.length);
                                                                while (++i$10 < n$8) {
                                                                    dest$3[i$10] = src$3[i$10];
                                                                }
                                                            } else {
                                                                dest$3 = Object.create(null);
                                                                for (x$3 in src$3) {
                                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$3;
                                                    } else {
                                                        var dest$4 = nodeValue, src$4 = dest$4, i$11 = -1, n$9, x$4;
                                                        if (dest$4 != null && typeof dest$4 === 'object') {
                                                            if (Array.isArray(src$4)) {
                                                                dest$4 = new Array(n$9 = src$4.length);
                                                                while (++i$11 < n$9) {
                                                                    dest$4[i$11] = src$4[i$11];
                                                                }
                                                            } else {
                                                                dest$4 = Object.create(null);
                                                                for (x$4 in src$4) {
                                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$4;
                                                    }
                                                } else if (boxed === true) {
                                                    json = node;
                                                } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                    if (node != null) {
                                                        var dest$5 = nodeValue, src$5 = dest$5, i$12 = -1, n$10, x$5;
                                                        if (dest$5 != null && typeof dest$5 === 'object') {
                                                            if (Array.isArray(src$5)) {
                                                                dest$5 = new Array(n$10 = src$5.length);
                                                                while (++i$12 < n$10) {
                                                                    dest$5[i$12] = src$5[i$12];
                                                                }
                                                            } else {
                                                                dest$5 = Object.create(null);
                                                                for (x$5 in src$5) {
                                                                    !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$5;
                                                    } else {
                                                        json = void 0;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else if (materialized === true) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[key$2] = json;
                                        }
                                    }
                                    node = node;
                                    message = message;
                                    json = json;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_14333;
                                } while (true);
                            node = node;
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                message = message;
                                json = json;
                                depth = depth;
                                continue follow_path_set_14106;
                            }
                        } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            if (key != null) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeExpires = node && node[$EXPIRES];
                                nodeTimestamp = node && node[$TIMESTAMP];
                                messageExpires = message && message[$EXPIRES];
                                messageTimestamp = message && message[$TIMESTAMP];
                                if (messageExpires === 0) {
                                    node = message;
                                    nodeType = message && message[$TYPE] || void 0;
                                    nodeValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                    nodeExpires = messageExpires;
                                    nodeTimestamp = messageTimestamp;
                                } else if (messageTimestamp < nodeTimestamp === false) {
                                    if (node !== message || !(node != null && typeof node === 'object')) {
                                        messageType = message && message[$TYPE] || void 0;
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var sizeOffset$2 = (node && node[$SIZE] || 0) - messageSize;
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$13 = -1, ref$8;
                                            while (++i$13 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$13]) !== void 0) {
                                                    ref$8[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$2 + i$13)] = ref$8;
                                                    node[__REF + i$13] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$2 = stack$3[offset$3 + 6] = [];
                                                        index$3 = -1;
                                                        for (var childKey$2 in node) {
                                                            !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                                        }
                                                    }
                                                    index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$3 < keys$2.length) {
                                                        stack$3[offset$3 + 7] = index$3 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$14 = (ref$9[__REF_INDEX] || 0) - 1, n$11 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$14 <= n$11) {
                                                            destination$3[__REF + i$14] = destination$3[__REF + (i$14 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$11;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$10, i$15 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                    while (++i$15 < n$12) {
                                                        if ((ref$10 = node[__REF + i$15]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$15] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                                    next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                                    prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                                    node === head$3 && (root$4.__head = root$4.__next = next$3);
                                                    node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                                    node.__next = node.__prev = void 0;
                                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    ;
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = messageValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var self$3 = nodeParent, child$2 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$2) <= 0 && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$16 = (ref$11[__REF_INDEX] || 0) - 1, n$13 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$16 <= n$13) {
                                                            destination$4[__REF + i$16] = destination$4[__REF + (i$16 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$13;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$12, i$17 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                    while (++i$17 < n$14) {
                                                        if ((ref$12 = node[__REF + i$17]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$17] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$13, i$18, k$2, n$15;
                                                while (depth$5 > -1) {
                                                    if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                        i$18 = k$2 = -1;
                                                        n$15 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$15 + 1);
                                                            linkPaths$2[++k$2] = ref$13;
                                                        } else if (n$15 > 0) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$15);
                                                        }
                                                        while (++i$18 < n$15) {
                                                            if ((ref$13 = node[__REF + i$18]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                                node = self$4;
                                            }
                                        }
                                        nodeParent = self$3;
                                        node = child$2;
                                    }
                                }
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                ;
                                var i$19 = -1, n$16 = requestedPath.length, copy = new Array(n$16);
                                while (++i$19 < n$16) {
                                    copy[i$19] = requestedPath[i$19];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$20 = -1, n$17 = optimizedPath.length, copy$2 = new Array(n$17);
                                while (++i$20 < n$17) {
                                    copy$2[i$20] = optimizedPath[i$20];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Create a JSONG value if:
                                //  1. The caller provided a JSONG root seed.
                                //  2. The key isn't null.
                                //  3. The current node is a value or reference.
                                if (jsonRoot != null && key != null && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if (materialized === true) {
                                        if (node == null) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else if (nodeValue === void 0) {
                                            var dest$6 = node, src$6 = dest$6, i$21 = -1, n$18, x$6;
                                            if (dest$6 != null && typeof dest$6 === 'object') {
                                                if (Array.isArray(src$6)) {
                                                    dest$6 = new Array(n$18 = src$6.length);
                                                    while (++i$21 < n$18) {
                                                        dest$6[i$21] = src$6[i$21];
                                                    }
                                                } else {
                                                    dest$6 = Object.create(null);
                                                    for (x$6 in src$6) {
                                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                                    }
                                                }
                                            }
                                            json = dest$6;
                                        } else {
                                            var dest$7 = nodeValue, src$7 = dest$7, i$22 = -1, n$19, x$7;
                                            if (dest$7 != null && typeof dest$7 === 'object') {
                                                if (Array.isArray(src$7)) {
                                                    dest$7 = new Array(n$19 = src$7.length);
                                                    while (++i$22 < n$19) {
                                                        dest$7[i$22] = src$7[i$22];
                                                    }
                                                } else {
                                                    dest$7 = Object.create(null);
                                                    for (x$7 in src$7) {
                                                        !(!(x$7[0] !== '_' || x$7[1] !== '_') || (x$7 === __SELF || x$7 === __PARENT || x$7 === __ROOT)) && (dest$7[x$7] = src$7[x$7]);
                                                    }
                                                }
                                            }
                                            json = dest$7;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        }
                                    } else if (boxed === true) {
                                        var dest$8 = node, src$8 = dest$8, i$23 = -1, n$20, x$8;
                                        if (dest$8 != null && typeof dest$8 === 'object') {
                                            if (Array.isArray(src$8)) {
                                                dest$8 = new Array(n$20 = src$8.length);
                                                while (++i$23 < n$20) {
                                                    dest$8[i$23] = src$8[i$23];
                                                }
                                            } else {
                                                dest$8 = Object.create(null);
                                                for (x$8 in src$8) {
                                                    !(!(x$8[0] !== '_' || x$8[1] !== '_') || (x$8 === __SELF || x$8 === __PARENT || x$8 === __ROOT)) && (dest$8[x$8] = src$8[x$8]);
                                                }
                                            }
                                        }
                                        json = dest$8;
                                        if (nodeType === SENTINEL) {
                                            var dest$9 = nodeValue, src$9 = dest$9, i$24 = -1, n$21, x$9;
                                            if (dest$9 != null && typeof dest$9 === 'object') {
                                                if (Array.isArray(src$9)) {
                                                    dest$9 = new Array(n$21 = src$9.length);
                                                    while (++i$24 < n$21) {
                                                        dest$9[i$24] = src$9[i$24];
                                                    }
                                                } else {
                                                    dest$9 = Object.create(null);
                                                    for (x$9 in src$9) {
                                                        !(!(x$9[0] !== '_' || x$9[1] !== '_') || (x$9 === __SELF || x$9 === __PARENT || x$9 === __ROOT)) && (dest$9[x$9] = src$9[x$9]);
                                                    }
                                                }
                                            }
                                            json.value = dest$9;
                                        }
                                    } else if (errorsAsValues === true || nodeType !== ERROR) {
                                        if (node != null) {
                                            var dest$10 = nodeValue, src$10 = dest$10, i$25 = -1, n$22, x$10;
                                            if (dest$10 != null && typeof dest$10 === 'object') {
                                                if (Array.isArray(src$10)) {
                                                    dest$10 = new Array(n$22 = src$10.length);
                                                    while (++i$25 < n$22) {
                                                        dest$10[i$25] = src$10[i$25];
                                                    }
                                                } else {
                                                    dest$10 = Object.create(null);
                                                    for (x$10 in src$10) {
                                                        !(!(x$10[0] !== '_' || x$10[1] !== '_') || (x$10 === __SELF || x$10 === __PARENT || x$10 === __ROOT)) && (dest$10[x$10] = src$10[x$10]);
                                                    }
                                                }
                                            }
                                            json = dest$10;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                    jsonParent[key] = json;
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                    if (node !== head$6) {
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                        root$7.__head = root$7.__next = head$6 = node;
                                        head$6.__next = next$6;
                                        head$6.__prev = void 0;
                                    }
                                    if (tail$6 == null || node === tail$6) {
                                        root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                    }
                                    root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                }
                                var pbv = Object.create(null), i$26 = -1, n$23 = requestedPath.length, val, copy$3 = new Array(n$23);
                                while (++i$26 < n$23) {
                                    copy$3[i$26] = requestedPath[i$26];
                                }
                                var dest$11 = node, src$11 = dest$11, i$27 = -1, n$24, x$11;
                                if (dest$11 != null && typeof dest$11 === 'object') {
                                    if (Array.isArray(src$11)) {
                                        dest$11 = new Array(n$24 = src$11.length);
                                        while (++i$27 < n$24) {
                                            dest$11[i$27] = src$11[i$27];
                                        }
                                    } else {
                                        dest$11 = Object.create(null);
                                        for (x$11 in src$11) {
                                            !(!(x$11[0] !== '_' || x$11[1] !== '_') || (x$11 === __SELF || x$11 === __PARENT || x$11 === __ROOT)) && (dest$11[x$11] = src$11[x$11]);
                                        }
                                    }
                                }
                                val = dest$11;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$28 = -1, j = -1, l = 0, n$25 = nodePath.length, k$3 = requestedPath.length, m, x$12, y, req = [];
                                while (++i$28 < n$25) {
                                    req[i$28] = nodePath[i$28];
                                }
                                while (++j < k$3) {
                                    if ((x$12 = requestedPath[j]) != null) {
                                        req[i$28++] = (y = path[l++]) != null && typeof y === 'object' && [x$12] || x$12;
                                    }
                                }
                                m = n$25 + l + height - depth;
                                while (i$28 < m) {
                                    req[i$28++] = path[l++];
                                }
                                req.length = i$28;
                                req.pathSetIndex = pathSetIndex;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                var i$29 = -1, n$26 = optimizedPath.length, opt = new Array(n$26 + height - depth), j$2, x$13;
                                while (++i$29 < n$26) {
                                    opt[i$29] = optimizedPath[i$29];
                                }
                                for (j$2 = depth, n$26 = height; j$2 < n$26;) {
                                    if ((x$13 = path[j$2++]) != null) {
                                        opt[i$29++] = x$13;
                                    }
                                }
                                opt.length = i$29;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            node = node;
                            break follow_path_set_14106;
                        }
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        nodes[depth - 1] = nodeParent = node;
                        messages[depth - 1] = messageParent = message;
                        jsons[depth - 1] = jsonParent = json;
                        requestedPath[requestedPath.length = depth] = key;
                        if (key != null) {
                            node = nodeParent && nodeParent[key];
                            message = messageParent && messageParent[key];
                            json = jsonParent && jsonParent[key];
                            optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                            node = node;
                            message = message;
                            merge_node_15493:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (node == null && message == null) {
                                        node = node;
                                        break merge_node_15493;
                                    } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        node = node;
                                        break merge_node_15493;
                                    }
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        if (message == null) {
                                            node = node;
                                            break merge_node_15493;
                                        } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            if (node === message) {
                                                if (node === nodeValue[__CONTAINER]) {
                                                    node = node;
                                                    break merge_node_15493;
                                                }
                                                messageType = nodeType;
                                                messageValue = nodeValue;
                                            } else if ((message && message[$EXPIRES]) === 0) {
                                                node = node = message;
                                                break merge_node_15493;
                                            } else {
                                                if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                    message = message;
                                                    messageValue = messageValue;
                                                    node = node;
                                                    nodeValue = nodeValue;
                                                    replace_cache_reference_15667:
                                                        do {
                                                            // compare the cache and message references.
                                                            // if they're the same, break early so we don't insert.
                                                            // if they're different, replace the cache reference.
                                                            var i$30 = nodeValue.length;
                                                            // If the reference lengths are equal, we have to check their keys
                                                            // for equality.
                                                            // If their lengths aren't the equal, the references aren't equal.
                                                            // Insert the reference from the message.
                                                            if (i$30 === messageValue.length) {
                                                                while (--i$30 > -1) {
                                                                    // If any of their keys are different, replace the reference
                                                                    // in the cache with the reference in the message.
                                                                    if (nodeValue[i$30] !== messageValue[i$30]) {
                                                                        message = message;
                                                                        break replace_cache_reference_15667;
                                                                    }
                                                                }
                                                                if (i$30 === -1) {
                                                                    message = node;
                                                                    break replace_cache_reference_15667;
                                                                }
                                                            }
                                                            message = message;
                                                            break replace_cache_reference_15667;
                                                        } while (true);
                                                    message = message;
                                                }
                                                if (node === message) {
                                                    node = node;
                                                    break merge_node_15493;
                                                }
                                            }
                                        }
                                    } else if (node === message) {
                                        node = node;
                                        break merge_node_15493;
                                    } else if (!nodeType && (node != null && typeof node === 'object')) {
                                        if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                            node = node;
                                            break merge_node_15493;
                                        }
                                    }
                                    nodeSize = node && node[$SIZE] || 0;
                                    messageSize = message && message[$SIZE] || 0;
                                    if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                    }
                                    if (node == null) {
                                        nodeParent[key] = node = message;
                                    } else if (node !== message) {
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$31 = -1, ref$14;
                                            while (++i$31 < nodeRefsLength$3) {
                                                if ((ref$14 = node[__REF + i$31]) !== void 0) {
                                                    ref$14[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$3 + i$31)] = ref$14;
                                                    node[__REF + i$31] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                    nodeParent,
                                                    invKey$3,
                                                    node
                                                ], depth$6 = 0;
                                            while (depth$6 > -1) {
                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                invKey$3 = stack$5[offset$4 + 1];
                                                node = stack$5[offset$4 + 2];
                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                }
                                                if (isBranch$3 === true) {
                                                    if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                                        keys$3 = stack$5[offset$4 + 6] = [];
                                                        index$4 = -1;
                                                        for (var childKey$3 in node) {
                                                            !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                                        }
                                                    }
                                                    index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                    if (index$4 < keys$3.length) {
                                                        stack$5[offset$4 + 7] = index$4 + 1;
                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                        stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                        continue;
                                                    }
                                                }
                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                if (ref$15 && Array.isArray(ref$15)) {
                                                    destination$5 = ref$15[__CONTEXT];
                                                    if (destination$5) {
                                                        var i$32 = (ref$15[__REF_INDEX] || 0) - 1, n$27 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$32 <= n$27) {
                                                            destination$5[__REF + i$32] = destination$5[__REF + (i$32 + 1)];
                                                        }
                                                        destination$5[__REFS_LENGTH] = n$27;
                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$16, i$33 = -1, n$28 = node[__REFS_LENGTH] || 0;
                                                    while (++i$33 < n$28) {
                                                        if ((ref$16 = node[__REF + i$33]) !== void 0) {
                                                            ref$16[__CONTEXT] = node[__REF + i$33] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7 = node.__next, prev$7 = node.__prev;
                                                    next$7 != null && typeof next$7 === 'object' && (next$7.__prev = prev$7);
                                                    prev$7 != null && typeof prev$7 === 'object' && (prev$7.__next = next$7);
                                                    node === head$7 && (root$8.__head = root$8.__next = next$7);
                                                    node === tail$7 && (root$8.__tail = root$8.__prev = prev$7);
                                                    node.__next = node.__prev = void 0;
                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                    ;
                                                    nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$5[offset$4 + 0];
                                                delete stack$5[offset$4 + 1];
                                                delete stack$5[offset$4 + 2];
                                                delete stack$5[offset$4 + 3];
                                                delete stack$5[offset$4 + 4];
                                                delete stack$5[offset$4 + 5];
                                                delete stack$5[offset$4 + 6];
                                                delete stack$5[offset$4 + 7];
                                                --depth$6;
                                            }
                                            nodeParent = invParent$3;
                                            node = invChild$3;
                                        }
                                        nodeParent[key] = node = message;
                                    }
                                    var sizeOffset$3 = nodeSize - messageSize;
                                    if (sizeOffset$3 !== 0) {
                                        var self$5 = nodeParent, child$3 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$3) <= 0 && nodeParent) {
                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                if (ref$17 && Array.isArray(ref$17)) {
                                                    destination$6 = ref$17[__CONTEXT];
                                                    if (destination$6) {
                                                        var i$34 = (ref$17[__REF_INDEX] || 0) - 1, n$29 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$34 <= n$29) {
                                                            destination$6[__REF + i$34] = destination$6[__REF + (i$34 + 1)];
                                                        }
                                                        destination$6[__REFS_LENGTH] = n$29;
                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$18, i$35 = -1, n$30 = node[__REFS_LENGTH] || 0;
                                                    while (++i$35 < n$30) {
                                                        if ((ref$18 = node[__REF + i$35]) !== void 0) {
                                                            ref$18[__CONTEXT] = node[__REF + i$35] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8 = node.__next, prev$8 = node.__prev;
                                                    next$8 != null && typeof next$8 === 'object' && (next$8.__prev = prev$8);
                                                    prev$8 != null && typeof prev$8 === 'object' && (prev$8.__next = next$8);
                                                    node === head$8 && (root$9.__head = root$9.__next = next$8);
                                                    node === tail$8 && (root$9.__tail = root$9.__prev = prev$8);
                                                    node.__next = node.__prev = void 0;
                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$19, i$36, k$4, n$31;
                                                while (depth$7 > -1) {
                                                    if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                                        i$36 = k$4 = -1;
                                                        n$31 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$31 + 1);
                                                            linkPaths$3[++k$4] = ref$19;
                                                        } else if (n$31 > 0) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$31);
                                                        }
                                                        while (++i$36 < n$31) {
                                                            if ((ref$19 = node[__REF + i$36]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$3[++k$4] = ref$19;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                                        ++depth$7;
                                                    } else {
                                                        stack$6[depth$7--] = void 0;
                                                    }
                                                }
                                                node = self$6;
                                            }
                                        }
                                        nodeParent = self$5;
                                        node = child$3;
                                        ;
                                    }
                                    node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    break merge_node_15493;
                                } while (true);
                            node = node;
                            node = node;
                            // Create a JSONG branch or insert a reference if:
                            //  1. The caller provided a JSONG root seed.
                            //  2. The current node is a branch or reference.
                            if (jsonRoot != null) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    if (boxed === true) {
                                        var dest$12 = node, src$12 = dest$12, i$37 = -1, n$32, x$14;
                                        if (dest$12 != null && typeof dest$12 === 'object') {
                                            if (Array.isArray(src$12)) {
                                                dest$12 = new Array(n$32 = src$12.length);
                                                while (++i$37 < n$32) {
                                                    dest$12[i$37] = src$12[i$37];
                                                }
                                            } else {
                                                dest$12 = Object.create(null);
                                                for (x$14 in src$12) {
                                                    !(!(x$14[0] !== '_' || x$14[1] !== '_') || (x$14 === __SELF || x$14 === __PARENT || x$14 === __ROOT)) && (dest$12[x$14] = src$12[x$14]);
                                                }
                                            }
                                        }
                                        json = dest$12;
                                    } else {
                                        var dest$13 = nodeValue, src$13 = dest$13, i$38 = -1, n$33, x$15;
                                        if (dest$13 != null && typeof dest$13 === 'object') {
                                            if (Array.isArray(src$13)) {
                                                dest$13 = new Array(n$33 = src$13.length);
                                                while (++i$38 < n$33) {
                                                    dest$13[i$38] = src$13[i$38];
                                                }
                                            } else {
                                                dest$13 = Object.create(null);
                                                for (x$15 in src$13) {
                                                    !(!(x$15[0] !== '_' || x$15[1] !== '_') || (x$15 === __SELF || x$15 === __PARENT || x$15 === __ROOT)) && (dest$13[x$15] = src$13[x$15]);
                                                }
                                            }
                                        }
                                        json = dest$13;
                                    }
                                    jsonParent[key] = json;
                                } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                    if ((json = jsonParent[key]) == null) {
                                        json = Object.create(null);
                                    } else if (typeof json !== 'object') {
                                        throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                    }
                                    jsonParent[key] = json;
                                }
                            }
                        }
                        node = node;
                        message = message;
                        json = json;
                        depth = depth + 1;
                        continue follow_path_set_14106;
                    } while (true);
                node = node;
                var key$3;
                depth = depth - 1;
                unroll_14193:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_14193;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_14193;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_14193;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_14193;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_14193;
                        }
                        depth = path.depth = depth;
                        break unroll_14193;
                    } while (true);
                depth = depth;
            }
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && {
        jsong: jsons[offset - 1],
        paths: requestedPaths
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsPathMap(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    offset = 0;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodePath = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, messages = [], messageRoot, messageParent, message, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    keysets[offset - 1] = offset - 1;
    var envelope, pathSets, pathSetIndex = -1;
    jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
    for (var envelopeIndex = -1, envelopeCount = envelopes.length; ++envelopeIndex < envelopeCount;) {
        envelope = envelopes[envelopeIndex];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value;
        for (var index = -1, count = pathSets.length; ++index < count;) {
            pathSetIndex++;
            path = pathSets[index];
            depth = 0;
            refs.length = 0;
            jsons.length = 0;
            keysets.length = 0;
            jsonParent = json = jsonRoot;
            while (depth > -1) {
                var ref = linkIndex = depth;
                refs.length = depth + 1;
                while (linkIndex >= -1) {
                    if (!!(ref = refs[linkIndex])) {
                        ~linkIndex || ++linkIndex;
                        linkHeight = ref.length;
                        var i = 0, j = 0;
                        while (i < linkHeight) {
                            optimizedPath[j++] = ref[i++];
                        }
                        i = linkIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        requestedPath.length = i;
                        optimizedPath.length = j;
                        break;
                    }
                    --linkIndex;
                }
                /* Walk Path Set */
                var key = void 0, isKeySet = false;
                height = path.length;
                node = nodeParent = nodes[depth - 1];
                message = messageParent = messages[depth - 1];
                depth = depth;
                follow_path_set_18656:
                    do {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            message = messageParent = messageRoot;
                            linkDepth = linkDepth;
                            follow_link_18879:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_18879;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    messageParent = message;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        message = messageParent && messageParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        node = node;
                                        message = message;
                                        merge_node_19049:
                                            do {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                if (node == null && message == null) {
                                                    node = node;
                                                    break merge_node_19049;
                                                } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                    node = node;
                                                    break merge_node_19049;
                                                }
                                                messageType = message && message[$TYPE] || void 0;
                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (message == null) {
                                                        node = node;
                                                        break merge_node_19049;
                                                    } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        if (node === message) {
                                                            if (node === nodeValue[__CONTAINER]) {
                                                                node = node;
                                                                break merge_node_19049;
                                                            }
                                                            messageType = nodeType;
                                                            messageValue = nodeValue;
                                                        } else if ((message && message[$EXPIRES]) === 0) {
                                                            node = node = message;
                                                            break merge_node_19049;
                                                        } else {
                                                            if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                                message = message;
                                                                messageValue = messageValue;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                replace_cache_reference_19221:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i === messageValue.length) {
                                                                            while (--i > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i] !== messageValue[i]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_19221;
                                                                                }
                                                                            }
                                                                            if (i === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_19221;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_19221;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                            if (node === message) {
                                                                node = node;
                                                                break merge_node_19049;
                                                            }
                                                        }
                                                    }
                                                } else if (node === message) {
                                                    node = node;
                                                    break merge_node_19049;
                                                } else if (!nodeType && (node != null && typeof node === 'object')) {
                                                    if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                                        node = node;
                                                        break merge_node_19049;
                                                    }
                                                }
                                                nodeSize = node && node[$SIZE] || 0;
                                                messageSize = message && message[$SIZE] || 0;
                                                if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                    message = message;
                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        delete messageValue[$SIZE];
                                                        if (messageType === SENTINEL) {
                                                            messageSize = 50 + (messageValue.length || 1);
                                                        } else {
                                                            messageSize = messageValue.length || 1;
                                                        }
                                                        message[$SIZE] = messageSize;
                                                        messageValue[__CONTAINER] = message;
                                                    } else if (messageType === SENTINEL) {
                                                        message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    } else if (messageType === ERROR) {
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    } else if (!(message != null && typeof message === 'object')) {
                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                        messageType = 'sentinel';
                                                        message = Object.create(null);
                                                        message[VALUE] = messageValue;
                                                        message[$TYPE] = messageType;
                                                        message[$SIZE] = messageSize;
                                                    } else {
                                                        messageType = message[$TYPE] = messageType || GROUP;
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    }
                                                }
                                                if (node == null) {
                                                    nodeParent[key$2] = node = message;
                                                } else if (node !== message) {
                                                    if (node !== message && (node != null && typeof node === 'object')) {
                                                        var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                                                        while (++i$2 < nodeRefsLength) {
                                                            if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                                                ref$2[__CONTEXT] = message;
                                                                message[__REF + (destRefsLength + i$2)] = ref$2;
                                                                node[__REF + i$2] = void 0;
                                                            }
                                                        }
                                                        message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                        node[__REFS_LENGTH] = ref$2 = void 0;
                                                        var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                                nodeParent,
                                                                invKey,
                                                                node
                                                            ], depth$2 = 0;
                                                        while (depth$2 > -1) {
                                                            nodeParent = stack[offset$2 = depth$2 * 8];
                                                            invKey = stack[offset$2 + 1];
                                                            node = stack[offset$2 + 2];
                                                            if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                                childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                            }
                                                            childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                            if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                                isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                            }
                                                            if (isBranch === true) {
                                                                if ((keys = stack[offset$2 + 6]) === void 0) {
                                                                    keys = stack[offset$2 + 6] = [];
                                                                    index$2 = -1;
                                                                    for (var childKey in node) {
                                                                        !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                                    }
                                                                }
                                                                index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                                if (index$2 < keys.length) {
                                                                    stack[offset$2 + 7] = index$2 + 1;
                                                                    stack[offset$2 = ++depth$2 * 8] = node;
                                                                    stack[offset$2 + 1] = invKey = keys[index$2];
                                                                    stack[offset$2 + 2] = node[invKey];
                                                                    continue;
                                                                }
                                                            }
                                                            var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                            if (ref$3 && Array.isArray(ref$3)) {
                                                                destination = ref$3[__CONTEXT];
                                                                if (destination) {
                                                                    var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$3 <= n) {
                                                                        destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                                                    }
                                                                    destination[__REFS_LENGTH] = n;
                                                                    ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                                while (++i$4 < n$2) {
                                                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                                next != null && typeof next === 'object' && (next.__prev = prev);
                                                                prev != null && typeof prev === 'object' && (prev.__next = next);
                                                                node === head && (root$2.__head = root$2.__next = next);
                                                                node === tail && (root$2.__tail = root$2.__prev = prev);
                                                                node.__next = node.__prev = void 0;
                                                                head = tail = next = prev = void 0;
                                                                ;
                                                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                            ;
                                                            delete stack[offset$2 + 0];
                                                            delete stack[offset$2 + 1];
                                                            delete stack[offset$2 + 2];
                                                            delete stack[offset$2 + 3];
                                                            delete stack[offset$2 + 4];
                                                            delete stack[offset$2 + 5];
                                                            delete stack[offset$2 + 6];
                                                            delete stack[offset$2 + 7];
                                                            --depth$2;
                                                        }
                                                        nodeParent = invParent;
                                                        node = invChild;
                                                    }
                                                    nodeParent[key$2] = node = message;
                                                }
                                                var sizeOffset = nodeSize - messageSize;
                                                if (sizeOffset !== 0) {
                                                    var self = nodeParent, child = node;
                                                    while (node = nodeParent) {
                                                        nodeParent = node[__PARENT];
                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                                            var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                                            if (ref$5 && Array.isArray(ref$5)) {
                                                                destination$2 = ref$5[__CONTEXT];
                                                                if (destination$2) {
                                                                    var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$5 <= n$3) {
                                                                        destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                                                    }
                                                                    destination$2[__REFS_LENGTH] = n$3;
                                                                    ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                                                while (++i$6 < n$4) {
                                                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                                                next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                                                prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                                                node === head$2 && (root$3.__head = root$3.__next = next$2);
                                                                node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                                                node.__next = node.__prev = void 0;
                                                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                                                                ;
                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$7, i$7, k, n$5;
                                                            while (depth$3 > -1) {
                                                                if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                    i$7 = k = -1;
                                                                    n$5 = node[__REFS_LENGTH] || 0;
                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                                    if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                                        linkPaths[++k] = ref$7;
                                                                    } else if (n$5 > 0) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5);
                                                                    }
                                                                    while (++i$7 < n$5) {
                                                                        if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            linkPaths[++k] = ref$7;
                                                                        }
                                                                    }
                                                                }
                                                                if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                    ++depth$3;
                                                                } else {
                                                                    stack$2[depth$3--] = void 0;
                                                                }
                                                            }
                                                            node = self$2;
                                                        }
                                                    }
                                                    nodeParent = self;
                                                    node = child;
                                                    ;
                                                }
                                                node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                break merge_node_19049;
                                            } while (true);
                                        node = node;
                                        node = node;
                                    }
                                    node = node;
                                    message = message;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_18879;
                                } while (true);
                            node = node;
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                message = message;
                                depth = depth;
                                continue follow_path_set_18656;
                            }
                        } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            if (key != null) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeExpires = node && node[$EXPIRES];
                                nodeTimestamp = node && node[$TIMESTAMP];
                                messageExpires = message && message[$EXPIRES];
                                messageTimestamp = message && message[$TIMESTAMP];
                                if (messageExpires === 0) {
                                    node = message;
                                    nodeType = message && message[$TYPE] || void 0;
                                    nodeValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                    nodeExpires = messageExpires;
                                    nodeTimestamp = messageTimestamp;
                                } else if (messageTimestamp < nodeTimestamp === false) {
                                    if (node !== message || !(node != null && typeof node === 'object')) {
                                        messageType = message && message[$TYPE] || void 0;
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var sizeOffset$2 = (node && node[$SIZE] || 0) - messageSize;
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                            while (++i$8 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                    ref$8[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                    node[__REF + i$8] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$2 = stack$3[offset$3 + 6] = [];
                                                        index$3 = -1;
                                                        for (var childKey$2 in node) {
                                                            !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                                        }
                                                    }
                                                    index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$3 < keys$2.length) {
                                                        stack$3[offset$3 + 7] = index$3 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$9 <= n$6) {
                                                            destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$6;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                    while (++i$10 < n$7) {
                                                        if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                                    next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                                    prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                                    node === head$3 && (root$4.__head = root$4.__next = next$3);
                                                    node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                                    node.__next = node.__prev = void 0;
                                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    ;
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = messageValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var self$3 = nodeParent, child$2 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$2) <= 0 && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$11 <= n$8) {
                                                            destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$8;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                    while (++i$12 < n$9) {
                                                        if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$13, i$13, k$2, n$10;
                                                while (depth$5 > -1) {
                                                    if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                        i$13 = k$2 = -1;
                                                        n$10 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$10 + 1);
                                                            linkPaths$2[++k$2] = ref$13;
                                                        } else if (n$10 > 0) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$10);
                                                        }
                                                        while (++i$13 < n$10) {
                                                            if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                                node = self$4;
                                            }
                                        }
                                        nodeParent = self$3;
                                        node = child$2;
                                    }
                                }
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                ;
                                var i$14 = -1, n$11 = requestedPath.length, copy = new Array(n$11);
                                while (++i$14 < n$11) {
                                    copy[i$14] = requestedPath[i$14];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$15 = -1, n$12 = optimizedPath.length, copy$2 = new Array(n$12);
                                while (++i$15 < n$12) {
                                    copy$2[i$15] = optimizedPath[i$15];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Insert the JSON value if:
                                //  1. The caller supplied a JSON root seed.
                                //  2. The path depth is past the bound path length.
                                //  3. The current node is a leaf or reference.
                                if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    var jsonKey = void 0, jsonDepth = depth;
                                    do {
                                        if (jsonKey == null) {
                                            jsonKey = keysets[jsonDepth];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                            if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest = node, src = dest, i$16 = -1, n$13, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$13 = src.length);
                                                            while (++i$16 < n$13) {
                                                                dest[i$16] = src[i$16];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$17 = -1, n$14, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$14 = src$2.length);
                                                            while (++i$17 < n$14) {
                                                                dest$2[i$17] = src$2[i$17];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                }
                                            } else if (boxed === true) {
                                                var dest$3 = node, src$3 = dest$3, i$18 = -1, n$15, x$3;
                                                if (dest$3 != null && typeof dest$3 === 'object') {
                                                    if (Array.isArray(src$3)) {
                                                        dest$3 = new Array(n$15 = src$3.length);
                                                        while (++i$18 < n$15) {
                                                            dest$3[i$18] = src$3[i$18];
                                                        }
                                                    } else {
                                                        dest$3 = Object.create(null);
                                                        for (x$3 in src$3) {
                                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                        }
                                                    }
                                                }
                                                json = dest$3;
                                                if (nodeType === SENTINEL) {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$19 = -1, n$16, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$16 = src$4.length);
                                                            while (++i$19 < n$16) {
                                                                dest$4[i$19] = src$4[i$19];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json.value = dest$4;
                                                }
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$20 = -1, n$17, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$17 = src$5.length);
                                                            while (++i$20 < n$17) {
                                                                dest$5[i$20] = src$5[i$20];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[jsonKey] = json;
                                            break;
                                        }
                                    } while (jsonDepth >= offset - 2);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                    if (node !== head$6) {
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                        root$7.__head = root$7.__next = head$6 = node;
                                        head$6.__next = next$6;
                                        head$6.__prev = void 0;
                                    }
                                    if (tail$6 == null || node === tail$6) {
                                        root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                    }
                                    root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                }
                                var pbv = Object.create(null), i$21 = -1, n$18 = requestedPath.length, val, copy$3 = new Array(n$18);
                                while (++i$21 < n$18) {
                                    copy$3[i$21] = requestedPath[i$21];
                                }
                                var dest$6 = node, src$6 = dest$6, i$22 = -1, n$19, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$19 = src$6.length);
                                        while (++i$22 < n$19) {
                                            dest$6[i$22] = src$6[i$22];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val = dest$6;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$23 = -1, j = -1, l = 0, n$20 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                                while (++i$23 < n$20) {
                                    req[i$23] = nodePath[i$23];
                                }
                                while (++j < k$3) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$23++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                    }
                                }
                                m = n$20 + l + height - depth;
                                while (i$23 < m) {
                                    req[i$23++] = path[l++];
                                }
                                req.length = i$23;
                                req.pathSetIndex = pathSetIndex;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                var i$24 = -1, n$21 = optimizedPath.length, opt = new Array(n$21 + height - depth), j$2, x$8;
                                while (++i$24 < n$21) {
                                    opt[i$24] = optimizedPath[i$24];
                                }
                                for (j$2 = depth, n$21 = height; j$2 < n$21;) {
                                    if ((x$8 = path[j$2++]) != null) {
                                        opt[i$24++] = x$8;
                                    }
                                }
                                opt.length = i$24;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            node = node;
                            break follow_path_set_18656;
                        }
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        nodes[depth - 1] = nodeParent = node;
                        messages[depth - 1] = messageParent = message;
                        requestedPath[requestedPath.length = depth] = key;
                        keysets[keysets.length = depth] = key;
                        if (key != null) {
                            node = nodeParent && nodeParent[key];
                            message = messageParent && messageParent[key];
                            optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                            node = node;
                            message = message;
                            merge_node_19946:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (node == null && message == null) {
                                        node = node;
                                        break merge_node_19946;
                                    } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        node = node;
                                        break merge_node_19946;
                                    }
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        if (message == null) {
                                            node = node;
                                            break merge_node_19946;
                                        } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            if (node === message) {
                                                if (node === nodeValue[__CONTAINER]) {
                                                    node = node;
                                                    break merge_node_19946;
                                                }
                                                messageType = nodeType;
                                                messageValue = nodeValue;
                                            } else if ((message && message[$EXPIRES]) === 0) {
                                                node = node = message;
                                                break merge_node_19946;
                                            } else {
                                                if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                    message = message;
                                                    messageValue = messageValue;
                                                    node = node;
                                                    nodeValue = nodeValue;
                                                    replace_cache_reference_20120:
                                                        do {
                                                            // compare the cache and message references.
                                                            // if they're the same, break early so we don't insert.
                                                            // if they're different, replace the cache reference.
                                                            var i$25 = nodeValue.length;
                                                            // If the reference lengths are equal, we have to check their keys
                                                            // for equality.
                                                            // If their lengths aren't the equal, the references aren't equal.
                                                            // Insert the reference from the message.
                                                            if (i$25 === messageValue.length) {
                                                                while (--i$25 > -1) {
                                                                    // If any of their keys are different, replace the reference
                                                                    // in the cache with the reference in the message.
                                                                    if (nodeValue[i$25] !== messageValue[i$25]) {
                                                                        message = message;
                                                                        break replace_cache_reference_20120;
                                                                    }
                                                                }
                                                                if (i$25 === -1) {
                                                                    message = node;
                                                                    break replace_cache_reference_20120;
                                                                }
                                                            }
                                                            message = message;
                                                            break replace_cache_reference_20120;
                                                        } while (true);
                                                    message = message;
                                                }
                                                if (node === message) {
                                                    node = node;
                                                    break merge_node_19946;
                                                }
                                            }
                                        }
                                    } else if (node === message) {
                                        node = node;
                                        break merge_node_19946;
                                    } else if (!nodeType && (node != null && typeof node === 'object')) {
                                        if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                            node = node;
                                            break merge_node_19946;
                                        }
                                    }
                                    nodeSize = node && node[$SIZE] || 0;
                                    messageSize = message && message[$SIZE] || 0;
                                    if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                    }
                                    if (node == null) {
                                        nodeParent[key] = node = message;
                                    } else if (node !== message) {
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$26 = -1, ref$14;
                                            while (++i$26 < nodeRefsLength$3) {
                                                if ((ref$14 = node[__REF + i$26]) !== void 0) {
                                                    ref$14[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$3 + i$26)] = ref$14;
                                                    node[__REF + i$26] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                    nodeParent,
                                                    invKey$3,
                                                    node
                                                ], depth$6 = 0;
                                            while (depth$6 > -1) {
                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                invKey$3 = stack$5[offset$4 + 1];
                                                node = stack$5[offset$4 + 2];
                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                }
                                                if (isBranch$3 === true) {
                                                    if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                                        keys$3 = stack$5[offset$4 + 6] = [];
                                                        index$4 = -1;
                                                        for (var childKey$3 in node) {
                                                            !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                                        }
                                                    }
                                                    index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                    if (index$4 < keys$3.length) {
                                                        stack$5[offset$4 + 7] = index$4 + 1;
                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                        stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                        continue;
                                                    }
                                                }
                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                if (ref$15 && Array.isArray(ref$15)) {
                                                    destination$5 = ref$15[__CONTEXT];
                                                    if (destination$5) {
                                                        var i$27 = (ref$15[__REF_INDEX] || 0) - 1, n$22 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$27 <= n$22) {
                                                            destination$5[__REF + i$27] = destination$5[__REF + (i$27 + 1)];
                                                        }
                                                        destination$5[__REFS_LENGTH] = n$22;
                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$16, i$28 = -1, n$23 = node[__REFS_LENGTH] || 0;
                                                    while (++i$28 < n$23) {
                                                        if ((ref$16 = node[__REF + i$28]) !== void 0) {
                                                            ref$16[__CONTEXT] = node[__REF + i$28] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7 = node.__next, prev$7 = node.__prev;
                                                    next$7 != null && typeof next$7 === 'object' && (next$7.__prev = prev$7);
                                                    prev$7 != null && typeof prev$7 === 'object' && (prev$7.__next = next$7);
                                                    node === head$7 && (root$8.__head = root$8.__next = next$7);
                                                    node === tail$7 && (root$8.__tail = root$8.__prev = prev$7);
                                                    node.__next = node.__prev = void 0;
                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                    ;
                                                    nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$5[offset$4 + 0];
                                                delete stack$5[offset$4 + 1];
                                                delete stack$5[offset$4 + 2];
                                                delete stack$5[offset$4 + 3];
                                                delete stack$5[offset$4 + 4];
                                                delete stack$5[offset$4 + 5];
                                                delete stack$5[offset$4 + 6];
                                                delete stack$5[offset$4 + 7];
                                                --depth$6;
                                            }
                                            nodeParent = invParent$3;
                                            node = invChild$3;
                                        }
                                        nodeParent[key] = node = message;
                                    }
                                    var sizeOffset$3 = nodeSize - messageSize;
                                    if (sizeOffset$3 !== 0) {
                                        var self$5 = nodeParent, child$3 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$3) <= 0 && nodeParent) {
                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                if (ref$17 && Array.isArray(ref$17)) {
                                                    destination$6 = ref$17[__CONTEXT];
                                                    if (destination$6) {
                                                        var i$29 = (ref$17[__REF_INDEX] || 0) - 1, n$24 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$29 <= n$24) {
                                                            destination$6[__REF + i$29] = destination$6[__REF + (i$29 + 1)];
                                                        }
                                                        destination$6[__REFS_LENGTH] = n$24;
                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$18, i$30 = -1, n$25 = node[__REFS_LENGTH] || 0;
                                                    while (++i$30 < n$25) {
                                                        if ((ref$18 = node[__REF + i$30]) !== void 0) {
                                                            ref$18[__CONTEXT] = node[__REF + i$30] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8 = node.__next, prev$8 = node.__prev;
                                                    next$8 != null && typeof next$8 === 'object' && (next$8.__prev = prev$8);
                                                    prev$8 != null && typeof prev$8 === 'object' && (prev$8.__next = next$8);
                                                    node === head$8 && (root$9.__head = root$9.__next = next$8);
                                                    node === tail$8 && (root$9.__tail = root$9.__prev = prev$8);
                                                    node.__next = node.__prev = void 0;
                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$19, i$31, k$4, n$26;
                                                while (depth$7 > -1) {
                                                    if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                                        i$31 = k$4 = -1;
                                                        n$26 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$26 + 1);
                                                            linkPaths$3[++k$4] = ref$19;
                                                        } else if (n$26 > 0) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$26);
                                                        }
                                                        while (++i$31 < n$26) {
                                                            if ((ref$19 = node[__REF + i$31]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$3[++k$4] = ref$19;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                                        ++depth$7;
                                                    } else {
                                                        stack$6[depth$7--] = void 0;
                                                    }
                                                }
                                                node = self$6;
                                            }
                                        }
                                        nodeParent = self$5;
                                        node = child$3;
                                        ;
                                    }
                                    node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    break merge_node_19946;
                                } while (true);
                            node = node;
                            node = node;
                            // Only create a branch if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a branch or reference.
                            if (jsonRoot != null && depth >= offset) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                    do {
                                        if (jsonKey$2 == null) {
                                            jsonKey$2 = keysets[jsonDepth$2];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                            if ((json = jsonParent[jsonKey$2]) == null) {
                                                json = jsonParent[jsonKey$2] = Object.create(null);
                                            } else if (typeof json !== 'object') {
                                                throw new Error('Fatal Falcor Error: encountered value in branch position while building Path Map.');
                                            }
                                            json[__KEY] = jsonKey$2;
                                            json[__GENERATION] = node[__GENERATION] || 0;
                                            jsonParent = json;
                                            break;
                                        }
                                    } while (jsonDepth$2 >= offset - 2);
                                    jsons[depth] = jsonParent;
                                }
                            }
                        }
                        node = node;
                        message = message;
                        depth = depth + 1;
                        continue follow_path_set_18656;
                    } while (true);
                node = node;
                var key$3;
                depth = depth - 1;
                unroll_18743:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_18743;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_18743;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_18743;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_18743;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_18743;
                        }
                        depth = path.depth = depth;
                        break unroll_18743;
                    } while (true);
                depth = depth;
            }
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsValues(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    offset = 0;
    var onNext;
    if (Array.isArray(values)) {
        values.length = 0;
    } else {
        onNext = values;
        values = undefined;
    }
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], nodePath = [], nodes = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, messages = [], messageRoot, messageParent, message, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    var envelope, pathSets, pathSetIndex = -1;
    for (var envelopeIndex = -1, envelopeCount = envelopes.length; ++envelopeIndex < envelopeCount;) {
        envelope = envelopes[envelopeIndex];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value;
        for (var index = -1, count = pathSets.length; ++index < count;) {
            pathSetIndex++;
            path = pathSets[index];
            depth = 0;
            refs.length = 0;
            while (depth > -1) {
                var ref = linkIndex = depth;
                refs.length = depth + 1;
                while (linkIndex >= -1) {
                    if (!!(ref = refs[linkIndex])) {
                        ~linkIndex || ++linkIndex;
                        linkHeight = ref.length;
                        var i = 0, j = 0;
                        while (i < linkHeight) {
                            optimizedPath[j++] = ref[i++];
                        }
                        i = linkIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        requestedPath.length = i;
                        optimizedPath.length = j;
                        break;
                    }
                    --linkIndex;
                }
                /* Walk Path Set */
                var key = void 0, isKeySet = false;
                height = path.length;
                node = nodeParent = nodes[depth - 1];
                message = messageParent = messages[depth - 1];
                depth = depth;
                follow_path_set_4919:
                    do {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            message = messageParent = messageRoot;
                            linkDepth = linkDepth;
                            follow_link_5140:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_5140;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    messageParent = message;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        message = messageParent && messageParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        node = node;
                                        message = message;
                                        merge_node_5310:
                                            do {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                if (node == null && message == null) {
                                                    node = node;
                                                    break merge_node_5310;
                                                } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                    node = node;
                                                    break merge_node_5310;
                                                }
                                                messageType = message && message[$TYPE] || void 0;
                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (message == null) {
                                                        node = node;
                                                        break merge_node_5310;
                                                    } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        if (node === message) {
                                                            if (node === nodeValue[__CONTAINER]) {
                                                                node = node;
                                                                break merge_node_5310;
                                                            }
                                                            messageType = nodeType;
                                                            messageValue = nodeValue;
                                                        } else if ((message && message[$EXPIRES]) === 0) {
                                                            node = node = message;
                                                            break merge_node_5310;
                                                        } else {
                                                            if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                                message = message;
                                                                messageValue = messageValue;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                replace_cache_reference_5482:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i === messageValue.length) {
                                                                            while (--i > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i] !== messageValue[i]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_5482;
                                                                                }
                                                                            }
                                                                            if (i === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_5482;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_5482;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                            if (node === message) {
                                                                node = node;
                                                                break merge_node_5310;
                                                            }
                                                        }
                                                    }
                                                } else if (node === message) {
                                                    node = node;
                                                    break merge_node_5310;
                                                } else if (!nodeType && (node != null && typeof node === 'object')) {
                                                    if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                                        node = node;
                                                        break merge_node_5310;
                                                    }
                                                }
                                                nodeSize = node && node[$SIZE] || 0;
                                                messageSize = message && message[$SIZE] || 0;
                                                if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                    message = message;
                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                        delete messageValue[$SIZE];
                                                        if (messageType === SENTINEL) {
                                                            messageSize = 50 + (messageValue.length || 1);
                                                        } else {
                                                            messageSize = messageValue.length || 1;
                                                        }
                                                        message[$SIZE] = messageSize;
                                                        messageValue[__CONTAINER] = message;
                                                    } else if (messageType === SENTINEL) {
                                                        message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    } else if (messageType === ERROR) {
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    } else if (!(message != null && typeof message === 'object')) {
                                                        messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                        messageType = 'sentinel';
                                                        message = Object.create(null);
                                                        message[VALUE] = messageValue;
                                                        message[$TYPE] = messageType;
                                                        message[$SIZE] = messageSize;
                                                    } else {
                                                        messageType = message[$TYPE] = messageType || GROUP;
                                                        message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                    }
                                                }
                                                if (node == null) {
                                                    nodeParent[key$2] = node = message;
                                                } else if (node !== message) {
                                                    if (node !== message && (node != null && typeof node === 'object')) {
                                                        var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                                                        while (++i$2 < nodeRefsLength) {
                                                            if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                                                ref$2[__CONTEXT] = message;
                                                                message[__REF + (destRefsLength + i$2)] = ref$2;
                                                                node[__REF + i$2] = void 0;
                                                            }
                                                        }
                                                        message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                        node[__REFS_LENGTH] = ref$2 = void 0;
                                                        var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                                nodeParent,
                                                                invKey,
                                                                node
                                                            ], depth$2 = 0;
                                                        while (depth$2 > -1) {
                                                            nodeParent = stack[offset$2 = depth$2 * 8];
                                                            invKey = stack[offset$2 + 1];
                                                            node = stack[offset$2 + 2];
                                                            if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                                childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                            }
                                                            childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                            if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                                isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                            }
                                                            if (isBranch === true) {
                                                                if ((keys = stack[offset$2 + 6]) === void 0) {
                                                                    keys = stack[offset$2 + 6] = [];
                                                                    index$2 = -1;
                                                                    for (var childKey in node) {
                                                                        !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                                    }
                                                                }
                                                                index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                                if (index$2 < keys.length) {
                                                                    stack[offset$2 + 7] = index$2 + 1;
                                                                    stack[offset$2 = ++depth$2 * 8] = node;
                                                                    stack[offset$2 + 1] = invKey = keys[index$2];
                                                                    stack[offset$2 + 2] = node[invKey];
                                                                    continue;
                                                                }
                                                            }
                                                            var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                            if (ref$3 && Array.isArray(ref$3)) {
                                                                destination = ref$3[__CONTEXT];
                                                                if (destination) {
                                                                    var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$3 <= n) {
                                                                        destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                                                    }
                                                                    destination[__REFS_LENGTH] = n;
                                                                    ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                                while (++i$4 < n$2) {
                                                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                                next != null && typeof next === 'object' && (next.__prev = prev);
                                                                prev != null && typeof prev === 'object' && (prev.__next = next);
                                                                node === head && (root$2.__head = root$2.__next = next);
                                                                node === tail && (root$2.__tail = root$2.__prev = prev);
                                                                node.__next = node.__prev = void 0;
                                                                head = tail = next = prev = void 0;
                                                                ;
                                                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                            ;
                                                            delete stack[offset$2 + 0];
                                                            delete stack[offset$2 + 1];
                                                            delete stack[offset$2 + 2];
                                                            delete stack[offset$2 + 3];
                                                            delete stack[offset$2 + 4];
                                                            delete stack[offset$2 + 5];
                                                            delete stack[offset$2 + 6];
                                                            delete stack[offset$2 + 7];
                                                            --depth$2;
                                                        }
                                                        nodeParent = invParent;
                                                        node = invChild;
                                                    }
                                                    nodeParent[key$2] = node = message;
                                                }
                                                var sizeOffset = nodeSize - messageSize;
                                                if (sizeOffset !== 0) {
                                                    var self = nodeParent, child = node;
                                                    while (node = nodeParent) {
                                                        nodeParent = node[__PARENT];
                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                                            var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                                            if (ref$5 && Array.isArray(ref$5)) {
                                                                destination$2 = ref$5[__CONTEXT];
                                                                if (destination$2) {
                                                                    var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                                    while (++i$5 <= n$3) {
                                                                        destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                                                    }
                                                                    destination$2[__REFS_LENGTH] = n$3;
                                                                    ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                                                }
                                                            }
                                                            if (node != null && typeof node === 'object') {
                                                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                                                while (++i$6 < n$4) {
                                                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                                                    }
                                                                }
                                                                node[__REFS_LENGTH] = void 0;
                                                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                                                next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                                                prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                                                node === head$2 && (root$3.__head = root$3.__next = next$2);
                                                                node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                                                node.__next = node.__prev = void 0;
                                                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                                                                ;
                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                            }
                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$7, i$7, k, n$5;
                                                            while (depth$3 > -1) {
                                                                if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                    i$7 = k = -1;
                                                                    n$5 = node[__REFS_LENGTH] || 0;
                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                                    if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5 + 1);
                                                                        linkPaths[++k] = ref$7;
                                                                    } else if (n$5 > 0) {
                                                                        stack$2[depth$3] = linkPaths = new Array(n$5);
                                                                    }
                                                                    while (++i$7 < n$5) {
                                                                        if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            linkPaths[++k] = ref$7;
                                                                        }
                                                                    }
                                                                }
                                                                if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                    ++depth$3;
                                                                } else {
                                                                    stack$2[depth$3--] = void 0;
                                                                }
                                                            }
                                                            node = self$2;
                                                        }
                                                    }
                                                    nodeParent = self;
                                                    node = child;
                                                    ;
                                                }
                                                node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                break merge_node_5310;
                                            } while (true);
                                        node = node;
                                        node = node;
                                    }
                                    node = node;
                                    message = message;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_5140;
                                } while (true);
                            node = node;
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                message = message;
                                depth = depth;
                                continue follow_path_set_4919;
                            }
                        } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                nodeType = void 0;
                                nodeValue = void 0;
                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            if (key != null) {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeExpires = node && node[$EXPIRES];
                                nodeTimestamp = node && node[$TIMESTAMP];
                                messageExpires = message && message[$EXPIRES];
                                messageTimestamp = message && message[$TIMESTAMP];
                                if (messageExpires === 0) {
                                    node = message;
                                    nodeType = message && message[$TYPE] || void 0;
                                    nodeValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                    nodeExpires = messageExpires;
                                    nodeTimestamp = messageTimestamp;
                                } else if (messageTimestamp < nodeTimestamp === false) {
                                    if (node !== message || !(node != null && typeof node === 'object')) {
                                        messageType = message && message[$TYPE] || void 0;
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var sizeOffset$2 = (node && node[$SIZE] || 0) - messageSize;
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                            while (++i$8 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                    ref$8[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                    node[__REF + i$8] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$2 = stack$3[offset$3 + 6] = [];
                                                        index$3 = -1;
                                                        for (var childKey$2 in node) {
                                                            !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                                        }
                                                    }
                                                    index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$3 < keys$2.length) {
                                                        stack$3[offset$3 + 7] = index$3 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$9 <= n$6) {
                                                            destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$6;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                    while (++i$10 < n$7) {
                                                        if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                                    next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                                    prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                                    node === head$3 && (root$4.__head = root$4.__next = next$3);
                                                    node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                                    node.__next = node.__prev = void 0;
                                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    ;
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = messageValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var self$3 = nodeParent, child$2 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$2) <= 0 && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$11 <= n$8) {
                                                            destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$8;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                    while (++i$12 < n$9) {
                                                        if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$13, i$13, k$2, n$10;
                                                while (depth$5 > -1) {
                                                    if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                        i$13 = k$2 = -1;
                                                        n$10 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$10 + 1);
                                                            linkPaths$2[++k$2] = ref$13;
                                                        } else if (n$10 > 0) {
                                                            stack$4[depth$5] = linkPaths$2 = new Array(n$10);
                                                        }
                                                        while (++i$13 < n$10) {
                                                            if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                                node = self$4;
                                            }
                                        }
                                        nodeParent = self$3;
                                        node = child$2;
                                    }
                                }
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                ;
                                var i$14 = -1, n$11 = requestedPath.length, copy = new Array(n$11);
                                while (++i$14 < n$11) {
                                    copy[i$14] = requestedPath[i$14];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$15 = -1, n$12 = optimizedPath.length, copy$2 = new Array(n$12);
                                while (++i$15 < n$12) {
                                    copy$2[i$15] = optimizedPath[i$15];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                var pbv = Object.create(null), i$16 = -1, n$13 = requestedPath.length, val, copy$3 = new Array(n$13);
                                while (++i$16 < n$13) {
                                    copy$3[i$16] = requestedPath[i$16];
                                }
                                if (materialized === true) {
                                    if (node == null) {
                                        val = Object.create(null);
                                        val[$TYPE] = SENTINEL;
                                    } else if (nodeValue === void 0) {
                                        var dest = node, src = dest, i$17 = -1, n$14, x;
                                        if (dest != null && typeof dest === 'object') {
                                            if (Array.isArray(src)) {
                                                dest = new Array(n$14 = src.length);
                                                while (++i$17 < n$14) {
                                                    dest[i$17] = src[i$17];
                                                }
                                            } else {
                                                dest = Object.create(null);
                                                for (x in src) {
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                            }
                                        }
                                        val = dest;
                                    } else {
                                        var dest$2 = nodeValue, src$2 = dest$2, i$18 = -1, n$15, x$2;
                                        if (dest$2 != null && typeof dest$2 === 'object') {
                                            if (Array.isArray(src$2)) {
                                                dest$2 = new Array(n$15 = src$2.length);
                                                while (++i$18 < n$15) {
                                                    dest$2[i$18] = src$2[i$18];
                                                }
                                            } else {
                                                dest$2 = Object.create(null);
                                                for (x$2 in src$2) {
                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                }
                                            }
                                        }
                                        val = dest$2;
                                    }
                                } else if (boxed === true) {
                                    var dest$3 = node, src$3 = dest$3, i$19 = -1, n$16, x$3;
                                    if (dest$3 != null && typeof dest$3 === 'object') {
                                        if (Array.isArray(src$3)) {
                                            dest$3 = new Array(n$16 = src$3.length);
                                            while (++i$19 < n$16) {
                                                dest$3[i$19] = src$3[i$19];
                                            }
                                        } else {
                                            dest$3 = Object.create(null);
                                            for (x$3 in src$3) {
                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                            }
                                        }
                                    }
                                    val = dest$3;
                                    if (nodeType === SENTINEL) {
                                        var dest$4 = nodeValue, src$4 = dest$4, i$20 = -1, n$17, x$4;
                                        if (dest$4 != null && typeof dest$4 === 'object') {
                                            if (Array.isArray(src$4)) {
                                                dest$4 = new Array(n$17 = src$4.length);
                                                while (++i$20 < n$17) {
                                                    dest$4[i$20] = src$4[i$20];
                                                }
                                            } else {
                                                dest$4 = Object.create(null);
                                                for (x$4 in src$4) {
                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                }
                                            }
                                        }
                                        val.value = dest$4;
                                    }
                                } else {
                                    var dest$5 = nodeValue, src$5 = dest$5, i$21 = -1, n$18, x$5;
                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                        if (Array.isArray(src$5)) {
                                            dest$5 = new Array(n$18 = src$5.length);
                                            while (++i$21 < n$18) {
                                                dest$5[i$21] = src$5[i$21];
                                            }
                                        } else {
                                            dest$5 = Object.create(null);
                                            for (x$5 in src$5) {
                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                            }
                                        }
                                    }
                                    val = dest$5;
                                }
                                pbv.path = copy$3;
                                pbv.value = val;
                                if (values) {
                                    values[values.length] = pbv;
                                } else if (onNext) {
                                    onNext(pbv);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                    if (node !== head$6) {
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                        root$7.__head = root$7.__next = head$6 = node;
                                        head$6.__next = next$6;
                                        head$6.__prev = void 0;
                                    }
                                    if (tail$6 == null || node === tail$6) {
                                        root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                    }
                                    root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                }
                                var pbv$2 = Object.create(null), i$22 = -1, n$19 = requestedPath.length, val$2, copy$4 = new Array(n$19);
                                while (++i$22 < n$19) {
                                    copy$4[i$22] = requestedPath[i$22];
                                }
                                var dest$6 = node, src$6 = dest$6, i$23 = -1, n$20, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$20 = src$6.length);
                                        while (++i$23 < n$20) {
                                            dest$6[i$23] = src$6[i$23];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val$2 = dest$6;
                                pbv$2.path = copy$4;
                                pbv$2.value = val$2;
                                errors[errors.length] = pbv$2;
                            } else if (refreshing === true || node == null) {
                                var i$24 = -1, j = -1, l = 0, n$21 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                                while (++i$24 < n$21) {
                                    req[i$24] = nodePath[i$24];
                                }
                                while (++j < k$3) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$24++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                    }
                                }
                                m = n$21 + l + height - depth;
                                while (i$24 < m) {
                                    req[i$24++] = path[l++];
                                }
                                req.length = i$24;
                                req.pathSetIndex = pathSetIndex;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                var i$25 = -1, n$22 = optimizedPath.length, opt = new Array(n$22 + height - depth), j$2, x$8;
                                while (++i$25 < n$22) {
                                    opt[i$25] = optimizedPath[i$25];
                                }
                                for (j$2 = depth, n$22 = height; j$2 < n$22;) {
                                    if ((x$8 = path[j$2++]) != null) {
                                        opt[i$25++] = x$8;
                                    }
                                }
                                opt.length = i$25;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            node = node;
                            break follow_path_set_4919;
                        }
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        nodes[depth - 1] = nodeParent = node;
                        messages[depth - 1] = messageParent = message;
                        requestedPath[requestedPath.length = depth] = key;
                        if (key != null) {
                            node = nodeParent && nodeParent[key];
                            message = messageParent && messageParent[key];
                            optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                            node = node;
                            message = message;
                            merge_node_6197:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (node == null && message == null) {
                                        node = node;
                                        break merge_node_6197;
                                    } else if (node === message && (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue))) {
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        node = node;
                                        break merge_node_6197;
                                    }
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        if (message == null) {
                                            node = node;
                                            break merge_node_6197;
                                        } else if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            if (node === message) {
                                                if (node === nodeValue[__CONTAINER]) {
                                                    node = node;
                                                    break merge_node_6197;
                                                }
                                                messageType = nodeType;
                                                messageValue = nodeValue;
                                            } else if ((message && message[$EXPIRES]) === 0) {
                                                node = node = message;
                                                break merge_node_6197;
                                            } else {
                                                if ((message && message[$TIMESTAMP]) < (node && node[$TIMESTAMP]) === false) {
                                                    message = message;
                                                    messageValue = messageValue;
                                                    node = node;
                                                    nodeValue = nodeValue;
                                                    replace_cache_reference_6369:
                                                        do {
                                                            // compare the cache and message references.
                                                            // if they're the same, break early so we don't insert.
                                                            // if they're different, replace the cache reference.
                                                            var i$26 = nodeValue.length;
                                                            // If the reference lengths are equal, we have to check their keys
                                                            // for equality.
                                                            // If their lengths aren't the equal, the references aren't equal.
                                                            // Insert the reference from the message.
                                                            if (i$26 === messageValue.length) {
                                                                while (--i$26 > -1) {
                                                                    // If any of their keys are different, replace the reference
                                                                    // in the cache with the reference in the message.
                                                                    if (nodeValue[i$26] !== messageValue[i$26]) {
                                                                        message = message;
                                                                        break replace_cache_reference_6369;
                                                                    }
                                                                }
                                                                if (i$26 === -1) {
                                                                    message = node;
                                                                    break replace_cache_reference_6369;
                                                                }
                                                            }
                                                            message = message;
                                                            break replace_cache_reference_6369;
                                                        } while (true);
                                                    message = message;
                                                }
                                                if (node === message) {
                                                    node = node;
                                                    break merge_node_6197;
                                                }
                                            }
                                        }
                                    } else if (node === message) {
                                        node = node;
                                        break merge_node_6197;
                                    } else if (!nodeType && (node != null && typeof node === 'object')) {
                                        if (message == null || !messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue)) {
                                            node = node;
                                            break merge_node_6197;
                                        }
                                    }
                                    nodeSize = node && node[$SIZE] || 0;
                                    messageSize = message && message[$SIZE] || 0;
                                    if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            delete messageValue[$SIZE];
                                            if (messageType === SENTINEL) {
                                                messageSize = 50 + (messageValue.length || 1);
                                            } else {
                                                messageSize = messageValue.length || 1;
                                            }
                                            message[$SIZE] = messageSize;
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = Object.create(null);
                                            message[VALUE] = messageValue;
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || GROUP;
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                    }
                                    if (node == null) {
                                        nodeParent[key] = node = message;
                                    } else if (node !== message) {
                                        if (node !== message && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$27 = -1, ref$14;
                                            while (++i$27 < nodeRefsLength$3) {
                                                if ((ref$14 = node[__REF + i$27]) !== void 0) {
                                                    ref$14[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$3 + i$27)] = ref$14;
                                                    node[__REF + i$27] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                    nodeParent,
                                                    invKey$3,
                                                    node
                                                ], depth$6 = 0;
                                            while (depth$6 > -1) {
                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                invKey$3 = stack$5[offset$4 + 1];
                                                node = stack$5[offset$4 + 2];
                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                }
                                                if (isBranch$3 === true) {
                                                    if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                                        keys$3 = stack$5[offset$4 + 6] = [];
                                                        index$4 = -1;
                                                        for (var childKey$3 in node) {
                                                            !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                                        }
                                                    }
                                                    index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                    if (index$4 < keys$3.length) {
                                                        stack$5[offset$4 + 7] = index$4 + 1;
                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                        stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                        continue;
                                                    }
                                                }
                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                if (ref$15 && Array.isArray(ref$15)) {
                                                    destination$5 = ref$15[__CONTEXT];
                                                    if (destination$5) {
                                                        var i$28 = (ref$15[__REF_INDEX] || 0) - 1, n$23 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$28 <= n$23) {
                                                            destination$5[__REF + i$28] = destination$5[__REF + (i$28 + 1)];
                                                        }
                                                        destination$5[__REFS_LENGTH] = n$23;
                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$16, i$29 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                                    while (++i$29 < n$24) {
                                                        if ((ref$16 = node[__REF + i$29]) !== void 0) {
                                                            ref$16[__CONTEXT] = node[__REF + i$29] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7 = node.__next, prev$7 = node.__prev;
                                                    next$7 != null && typeof next$7 === 'object' && (next$7.__prev = prev$7);
                                                    prev$7 != null && typeof prev$7 === 'object' && (prev$7.__next = next$7);
                                                    node === head$7 && (root$8.__head = root$8.__next = next$7);
                                                    node === tail$7 && (root$8.__tail = root$8.__prev = prev$7);
                                                    node.__next = node.__prev = void 0;
                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                    ;
                                                    nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack$5[offset$4 + 0];
                                                delete stack$5[offset$4 + 1];
                                                delete stack$5[offset$4 + 2];
                                                delete stack$5[offset$4 + 3];
                                                delete stack$5[offset$4 + 4];
                                                delete stack$5[offset$4 + 5];
                                                delete stack$5[offset$4 + 6];
                                                delete stack$5[offset$4 + 7];
                                                --depth$6;
                                            }
                                            nodeParent = invParent$3;
                                            node = invChild$3;
                                        }
                                        nodeParent[key] = node = message;
                                    }
                                    var sizeOffset$3 = nodeSize - messageSize;
                                    if (sizeOffset$3 !== 0) {
                                        var self$5 = nodeParent, child$3 = node;
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset$3) <= 0 && nodeParent) {
                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                if (ref$17 && Array.isArray(ref$17)) {
                                                    destination$6 = ref$17[__CONTEXT];
                                                    if (destination$6) {
                                                        var i$30 = (ref$17[__REF_INDEX] || 0) - 1, n$25 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$30 <= n$25) {
                                                            destination$6[__REF + i$30] = destination$6[__REF + (i$30 + 1)];
                                                        }
                                                        destination$6[__REFS_LENGTH] = n$25;
                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$18, i$31 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                                    while (++i$31 < n$26) {
                                                        if ((ref$18 = node[__REF + i$31]) !== void 0) {
                                                            ref$18[__CONTEXT] = node[__REF + i$31] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8 = node.__next, prev$8 = node.__prev;
                                                    next$8 != null && typeof next$8 === 'object' && (next$8.__prev = prev$8);
                                                    prev$8 != null && typeof prev$8 === 'object' && (prev$8.__next = next$8);
                                                    node === head$8 && (root$9.__head = root$9.__next = next$8);
                                                    node === tail$8 && (root$9.__tail = root$9.__prev = prev$8);
                                                    node.__next = node.__prev = void 0;
                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                    ;
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$19, i$32, k$4, n$27;
                                                while (depth$7 > -1) {
                                                    if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                                        i$32 = k$4 = -1;
                                                        n$27 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$27 + 1);
                                                            linkPaths$3[++k$4] = ref$19;
                                                        } else if (n$27 > 0) {
                                                            stack$6[depth$7] = linkPaths$3 = new Array(n$27);
                                                        }
                                                        while (++i$32 < n$27) {
                                                            if ((ref$19 = node[__REF + i$32]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths$3[++k$4] = ref$19;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                                        ++depth$7;
                                                    } else {
                                                        stack$6[depth$7--] = void 0;
                                                    }
                                                }
                                                node = self$6;
                                            }
                                        }
                                        nodeParent = self$5;
                                        node = child$3;
                                        ;
                                    }
                                    node = node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    break merge_node_6197;
                                } while (true);
                            node = node;
                            node = node;
                        }
                        node = node;
                        message = message;
                        depth = depth + 1;
                        continue follow_path_set_4919;
                    } while (true);
                node = node;
                var key$3;
                depth = depth - 1;
                unroll_5006:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_5006;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_5006;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_5006;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_5006;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_5006;
                        }
                        depth = path.depth = depth;
                        break unroll_5006;
                    } while (true);
                depth = depth;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPath(model, path, value, errorSelector) {
    ++__GENERATION_VERSION;
    if (Array.isArray(path) === false) {
        value = path.value;
        path = path.path;
    }
    var root = model._root, expired = root.expired;
    errorSelector = errorSelector || model._errorSelector;
    var depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, optimizedPath = [], nodeRoot = model._cache, nodeParent = nodeRoot, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    /* Walk Path */
    var key, isKeySet = false;
    height = path.length;
    node = nodeParent = nodeRoot;
    depth = depth;
    follow_path_8128:
        do {
            nodeType = node && node[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
            if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                    nodeType = void 0;
                    nodeValue = void 0;
                    node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                linkPath = nodeValue;
                linkIndex = depth;
                optimizedPath.length = 0;
                linkDepth = 0;
                linkHeight = 0;
                var location, container = linkPath[__CONTAINER] || linkPath;
                if ((location = container[__CONTEXT]) !== void 0) {
                    node = location;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    linkHeight = linkPath.length;
                    while (linkDepth < linkHeight) {
                        optimizedPath[linkDepth] = linkPath[linkDepth++];
                    }
                    optimizedPath.length = linkDepth;
                } else {
                    /* Walk Link */
                    var key$2, isKeySet$2 = false;
                    linkHeight = linkPath.length;
                    node = nodeParent = nodeRoot;
                    linkDepth = linkDepth;
                    follow_link_8272:
                        do {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                    nodeType = void 0;
                                    nodeValue = void 0;
                                    node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (nodeType === ERROR) {
                                    optimizedPath[optimizedPath.length] = null;
                                }
                                if (node != null && typeof node === 'object') {
                                    var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                    // Set up the hard-link so we don't have to do all
                                    // this work the next time we follow this linkPath.
                                    if (refContext === void 0) {
                                        var backRefs = node[__REFS_LENGTH] || 0;
                                        node[__REF + backRefs] = refContainer;
                                        node[__REFS_LENGTH] = backRefs + 1;
                                        // create a forward link
                                        refContainer[__REF_INDEX] = backRefs;
                                        refContainer[__CONTEXT] = node;
                                        refContainer = backRefs = void 0;
                                    }
                                }
                                node = node;
                                break follow_link_8272;
                            }
                            key$2 = linkPath[linkDepth];
                            nodeParent = node;
                            if (key$2 != null) {
                                node = nodeParent && nodeParent[key$2];
                                if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                    nodeType = void 0;
                                    nodeValue = Object.create(null);
                                    nodeSize = node && node[$SIZE] || 0;
                                    if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                        var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref;
                                        while (++i < nodeRefsLength) {
                                            if ((ref = node[__REF + i]) !== void 0) {
                                                ref[__CONTEXT] = nodeValue;
                                                nodeValue[__REF + (destRefsLength + i)] = ref;
                                                node[__REF + i] = void 0;
                                            }
                                        }
                                        nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                        node[__REFS_LENGTH] = ref = void 0;
                                        var invParent = nodeParent, invChild = node, invKey = key$2, keys, index, offset, childType, childValue, isBranch, stack = [
                                                nodeParent,
                                                invKey,
                                                node
                                            ], depth$2 = 0;
                                        while (depth$2 > -1) {
                                            nodeParent = stack[offset = depth$2 * 8];
                                            invKey = stack[offset + 1];
                                            node = stack[offset + 2];
                                            if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                                                childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch = stack[offset + 5]) === void 0) {
                                                isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                            }
                                            if (isBranch === true) {
                                                if ((keys = stack[offset + 6]) === void 0) {
                                                    keys = stack[offset + 6] = [];
                                                    index = -1;
                                                    for (var childKey in node) {
                                                        !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index] = childKey);
                                                    }
                                                }
                                                index = stack[offset + 7] || (stack[offset + 7] = 0);
                                                if (index < keys.length) {
                                                    stack[offset + 7] = index + 1;
                                                    stack[offset = ++depth$2 * 8] = node;
                                                    stack[offset + 1] = invKey = keys[index];
                                                    stack[offset + 2] = node[invKey];
                                                    continue;
                                                }
                                            }
                                            var ref$2 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                            if (ref$2 && Array.isArray(ref$2)) {
                                                destination = ref$2[__CONTEXT];
                                                if (destination) {
                                                    var i$2 = (ref$2[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$2 <= n) {
                                                        destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                    }
                                                    destination[__REFS_LENGTH] = n;
                                                    ref$2[__REF_INDEX] = ref$2[__CONTEXT] = destination = void 0;
                                                }
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var ref$3, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                while (++i$3 < n$2) {
                                                    if ((ref$3 = node[__REF + i$3]) !== void 0) {
                                                        ref$3[__CONTEXT] = node[__REF + i$3] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                next != null && typeof next === 'object' && (next.__prev = prev);
                                                prev != null && typeof prev === 'object' && (prev.__next = next);
                                                node === head && (root$2.__head = root$2.__next = next);
                                                node === tail && (root$2.__tail = root$2.__prev = prev);
                                                node.__next = node.__prev = void 0;
                                                head = tail = next = prev = void 0;
                                                ;
                                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            }
                                            ;
                                            delete stack[offset + 0];
                                            delete stack[offset + 1];
                                            delete stack[offset + 2];
                                            delete stack[offset + 3];
                                            delete stack[offset + 4];
                                            delete stack[offset + 5];
                                            delete stack[offset + 6];
                                            delete stack[offset + 7];
                                            --depth$2;
                                        }
                                        nodeParent = invParent;
                                        node = invChild;
                                    }
                                    nodeParent[key$2] = node = nodeValue;
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    var self = node, node$2;
                                    while (node$2 = node) {
                                        if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$4, i$4, k, n$3;
                                            while (depth$3 > -1) {
                                                if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                    i$4 = k = -1;
                                                    n$3 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = ++__GENERATION_GUID;
                                                    if ((ref$4 = node[__PARENT]) !== void 0 && ref$4[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                        linkPaths[++k] = ref$4;
                                                    } else if (n$3 > 0) {
                                                        stack$2[depth$3] = linkPaths = new Array(n$3);
                                                    }
                                                    while (++i$4 < n$3) {
                                                        if ((ref$4 = node[__REF + i$4]) !== void 0 && ref$4[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            linkPaths[++k] = ref$4;
                                                        }
                                                    }
                                                }
                                                if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                    ++depth$3;
                                                } else {
                                                    stack$2[depth$3--] = void 0;
                                                }
                                            }
                                            node = self$2;
                                        }
                                        node = node$2[__PARENT];
                                    }
                                    node = self;
                                }
                                optimizedPath[optimizedPath.length = linkDepth] = key$2;
                            }
                            node = node;
                            linkDepth = linkDepth + 1;
                            continue follow_link_8272;
                        } while (true);
                    node = node;
                }
                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                    key = null;
                    node = node;
                    depth = depth;
                    continue follow_path_8128;
                }
            } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                    nodeType = void 0;
                    nodeValue = void 0;
                    node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                if (key != null) {
                    var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                    nodeType = value && value[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                    newNode = value;
                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                        delete nodeValue[$SIZE];
                        if (nodeType === SENTINEL) {
                            nodeSize = 50 + (nodeValue.length || 1);
                        } else {
                            nodeSize = nodeValue.length || 1;
                        }
                        newNode[$SIZE] = nodeSize;
                        nodeValue[__CONTAINER] = newNode;
                    } else if (nodeType === SENTINEL) {
                        newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    } else if (nodeType === ERROR) {
                        newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                    } else if (!(value != null && typeof value === 'object')) {
                        nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                        nodeType = 'sentinel';
                        newNode = Object.create(null);
                        newNode[VALUE] = nodeValue;
                        newNode[$TYPE] = nodeType;
                        newNode[$SIZE] = nodeSize;
                    } else {
                        nodeType = newNode[$TYPE] = nodeType || GROUP;
                        newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                    }
                    ;
                    if (node !== newNode && (node != null && typeof node === 'object')) {
                        var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$5;
                        while (++i$5 < nodeRefsLength$2) {
                            if ((ref$5 = node[__REF + i$5]) !== void 0) {
                                ref$5[__CONTEXT] = newNode;
                                newNode[__REF + (destRefsLength$2 + i$5)] = ref$5;
                                node[__REF + i$5] = void 0;
                            }
                        }
                        newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                        node[__REFS_LENGTH] = ref$5 = void 0;
                        var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$2, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                nodeParent,
                                invKey$2,
                                node
                            ], depth$4 = 0;
                        while (depth$4 > -1) {
                            nodeParent = stack$3[offset$2 = depth$4 * 8];
                            invKey$2 = stack$3[offset$2 + 1];
                            node = stack$3[offset$2 + 2];
                            if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                            }
                            childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                            if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                            }
                            if (isBranch$2 === true) {
                                if ((keys$2 = stack$3[offset$2 + 6]) === void 0) {
                                    keys$2 = stack$3[offset$2 + 6] = [];
                                    index$2 = -1;
                                    for (var childKey$2 in node) {
                                        !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$2] = childKey$2);
                                    }
                                }
                                index$2 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                if (index$2 < keys$2.length) {
                                    stack$3[offset$2 + 7] = index$2 + 1;
                                    stack$3[offset$2 = ++depth$4 * 8] = node;
                                    stack$3[offset$2 + 1] = invKey$2 = keys$2[index$2];
                                    stack$3[offset$2 + 2] = node[invKey$2];
                                    continue;
                                }
                            }
                            var ref$6 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                            if (ref$6 && Array.isArray(ref$6)) {
                                destination$2 = ref$6[__CONTEXT];
                                if (destination$2) {
                                    var i$6 = (ref$6[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                    while (++i$6 <= n$4) {
                                        destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                    }
                                    destination$2[__REFS_LENGTH] = n$4;
                                    ref$6[__REF_INDEX] = ref$6[__CONTEXT] = destination$2 = void 0;
                                }
                            }
                            if (node != null && typeof node === 'object') {
                                var ref$7, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0) {
                                        ref$7[__CONTEXT] = node[__REF + i$7] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                node === head$2 && (root$3.__head = root$3.__next = next$2);
                                node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                node.__next = node.__prev = void 0;
                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                                ;
                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            }
                            ;
                            delete stack$3[offset$2 + 0];
                            delete stack$3[offset$2 + 1];
                            delete stack$3[offset$2 + 2];
                            delete stack$3[offset$2 + 3];
                            delete stack$3[offset$2 + 4];
                            delete stack$3[offset$2 + 5];
                            delete stack$3[offset$2 + 6];
                            delete stack$3[offset$2 + 7];
                            --depth$4;
                        }
                        nodeParent = invParent$2;
                        node = invChild$2;
                    }
                    nodeParent[key] = node = newNode;
                    nodeType = node && node[$TYPE] || void 0;
                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                    sizeOffset = edgeSize - nodeSize;
                    var self$3 = nodeParent, child = node;
                    while (node = nodeParent) {
                        nodeParent = node[__PARENT];
                        if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                            var ref$8 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                            if (ref$8 && Array.isArray(ref$8)) {
                                destination$3 = ref$8[__CONTEXT];
                                if (destination$3) {
                                    var i$8 = (ref$8[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                    while (++i$8 <= n$6) {
                                        destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                    }
                                    destination$3[__REFS_LENGTH] = n$6;
                                    ref$8[__REF_INDEX] = ref$8[__CONTEXT] = destination$3 = void 0;
                                }
                            }
                            if (node != null && typeof node === 'object') {
                                var ref$9, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                while (++i$9 < n$7) {
                                    if ((ref$9 = node[__REF + i$9]) !== void 0) {
                                        ref$9[__CONTEXT] = node[__REF + i$9] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                node === head$3 && (root$4.__head = root$4.__next = next$3);
                                node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                node.__next = node.__prev = void 0;
                                head$3 = tail$3 = next$3 = prev$3 = void 0;
                                ;
                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            }
                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                            var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$10, i$10, k$2, n$8;
                            while (depth$5 > -1) {
                                if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                    i$10 = k$2 = -1;
                                    n$8 = node[__REFS_LENGTH] || 0;
                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                    node[__GENERATION] = ++__GENERATION_GUID;
                                    if ((ref$10 = node[__PARENT]) !== void 0 && ref$10[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                        linkPaths$2[++k$2] = ref$10;
                                    } else if (n$8 > 0) {
                                        stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                    }
                                    while (++i$10 < n$8) {
                                        if ((ref$10 = node[__REF + i$10]) !== void 0 && ref$10[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            linkPaths$2[++k$2] = ref$10;
                                        }
                                    }
                                }
                                if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                    ++depth$5;
                                } else {
                                    stack$4[depth$5--] = void 0;
                                }
                            }
                            node = self$4;
                        }
                    }
                    nodeParent = self$3;
                    node = child;
                }
                node = node;
                break follow_path_8128;
            }
            key = path[depth];
            nodeParent = node;
            if (key != null) {
                node = nodeParent && nodeParent[key];
                optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                    nodeType = void 0;
                    nodeValue = Object.create(null);
                    nodeSize = node && node[$SIZE] || 0;
                    if (node !== nodeValue && (node != null && typeof node === 'object')) {
                        var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$11 = -1, ref$11;
                        while (++i$11 < nodeRefsLength$3) {
                            if ((ref$11 = node[__REF + i$11]) !== void 0) {
                                ref$11[__CONTEXT] = nodeValue;
                                nodeValue[__REF + (destRefsLength$3 + i$11)] = ref$11;
                                node[__REF + i$11] = void 0;
                            }
                        }
                        nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                        node[__REFS_LENGTH] = ref$11 = void 0;
                        var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$3, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                nodeParent,
                                invKey$3,
                                node
                            ], depth$6 = 0;
                        while (depth$6 > -1) {
                            nodeParent = stack$5[offset$3 = depth$6 * 8];
                            invKey$3 = stack$5[offset$3 + 1];
                            node = stack$5[offset$3 + 2];
                            if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                            }
                            childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                            if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                            }
                            if (isBranch$3 === true) {
                                if ((keys$3 = stack$5[offset$3 + 6]) === void 0) {
                                    keys$3 = stack$5[offset$3 + 6] = [];
                                    index$3 = -1;
                                    for (var childKey$3 in node) {
                                        !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$3] = childKey$3);
                                    }
                                }
                                index$3 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                if (index$3 < keys$3.length) {
                                    stack$5[offset$3 + 7] = index$3 + 1;
                                    stack$5[offset$3 = ++depth$6 * 8] = node;
                                    stack$5[offset$3 + 1] = invKey$3 = keys$3[index$3];
                                    stack$5[offset$3 + 2] = node[invKey$3];
                                    continue;
                                }
                            }
                            var ref$12 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                            if (ref$12 && Array.isArray(ref$12)) {
                                destination$4 = ref$12[__CONTEXT];
                                if (destination$4) {
                                    var i$12 = (ref$12[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                    while (++i$12 <= n$9) {
                                        destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                    }
                                    destination$4[__REFS_LENGTH] = n$9;
                                    ref$12[__REF_INDEX] = ref$12[__CONTEXT] = destination$4 = void 0;
                                }
                            }
                            if (node != null && typeof node === 'object') {
                                var ref$13, i$13 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                while (++i$13 < n$10) {
                                    if ((ref$13 = node[__REF + i$13]) !== void 0) {
                                        ref$13[__CONTEXT] = node[__REF + i$13] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                node === head$4 && (root$5.__head = root$5.__next = next$4);
                                node === tail$4 && (root$5.__tail = root$5.__prev = prev$4);
                                node.__next = node.__prev = void 0;
                                head$4 = tail$4 = next$4 = prev$4 = void 0;
                                ;
                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            }
                            ;
                            delete stack$5[offset$3 + 0];
                            delete stack$5[offset$3 + 1];
                            delete stack$5[offset$3 + 2];
                            delete stack$5[offset$3 + 3];
                            delete stack$5[offset$3 + 4];
                            delete stack$5[offset$3 + 5];
                            delete stack$5[offset$3 + 6];
                            delete stack$5[offset$3 + 7];
                            --depth$6;
                        }
                        nodeParent = invParent$3;
                        node = invChild$3;
                    }
                    nodeParent[key] = node = nodeValue;
                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                    var self$5 = node, node$3;
                    while (node$3 = node) {
                        if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                            var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$14, i$14, k$3, n$11;
                            while (depth$7 > -1) {
                                if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                    i$14 = k$3 = -1;
                                    n$11 = node[__REFS_LENGTH] || 0;
                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                    node[__GENERATION] = ++__GENERATION_GUID;
                                    if ((ref$14 = node[__PARENT]) !== void 0 && ref$14[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        stack$6[depth$7] = linkPaths$3 = new Array(n$11 + 1);
                                        linkPaths$3[++k$3] = ref$14;
                                    } else if (n$11 > 0) {
                                        stack$6[depth$7] = linkPaths$3 = new Array(n$11);
                                    }
                                    while (++i$14 < n$11) {
                                        if ((ref$14 = node[__REF + i$14]) !== void 0 && ref$14[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            linkPaths$3[++k$3] = ref$14;
                                        }
                                    }
                                }
                                if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                    ++depth$7;
                                } else {
                                    stack$6[depth$7--] = void 0;
                                }
                            }
                            node = self$6;
                        }
                        node = node$3[__PARENT];
                    }
                    node = self$5;
                }
            }
            node = node;
            depth = depth + 1;
            continue follow_path_8128;
        } while (true);
    node = node;
    return {
        path: optimizedPath,
        value: node
    };
}
function setPathMap(model, map, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot = Object.create(null), jsonParent = jsonRoot, json = jsonParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 1] = jsonRoot;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    mapStack[0] = map;
    while (depth > -1) {
        var ref = linkIndex = depth;
        refs.length = depth + 1;
        while (linkIndex >= -1) {
            if (!!(ref = refs[linkIndex])) {
                ~linkIndex || ++linkIndex;
                linkHeight = ref.length;
                var i = 0, j = 0;
                while (i < linkHeight) {
                    optimizedPath[j++] = ref[i++];
                }
                i = linkIndex;
                while (i < depth) {
                    optimizedPath[j++] = requestedPath[i++];
                }
                requestedPath.length = i;
                optimizedPath.length = j;
                break;
            }
            --linkIndex;
        }
        /* Walk Path Map */
        var isTerminus = false, offset$2 = 0, keys = void 0, index = void 0, key = void 0, isKeySet = false;
        node = nodeParent = nodes[depth - 1];
        depth = depth;
        follow_path_map_11146:
            do {
                height = depth;
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_11313:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_11313;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        if (typeof map === 'object') {
                                            for (var key$3 in map) {
                                                key$3[0] === '$' && key$3 !== $SIZE && (nodeParent && (nodeParent[key$3] = map[key$3]) || true);
                                            }
                                            map = map[key$2];
                                        }
                                        var mapType = map && map[$TYPE] || void 0;
                                        var mapValue = mapType === SENTINEL ? map[VALUE] : map;
                                        if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType && (map != null && typeof map === 'object') && !Array.isArray(mapValue))) {
                                            nodeType = void 0;
                                            nodeValue = Object.create(null);
                                            nodeSize = node && node[$SIZE] || 0;
                                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                while (++i < nodeRefsLength) {
                                                    if ((ref$2 = node[__REF + i]) !== void 0) {
                                                        ref$2[__CONTEXT] = nodeValue;
                                                        nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                        node[__REF + i] = void 0;
                                                    }
                                                }
                                                nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                node[__REFS_LENGTH] = ref$2 = void 0;
                                                var invParent = nodeParent, invChild = node, invKey = key$2, keys$2, index$2, offset$3, childType, childValue, isBranch, stack = [
                                                        nodeParent,
                                                        invKey,
                                                        node
                                                    ], depth$2 = 0;
                                                while (depth$2 > -1) {
                                                    nodeParent = stack[offset$3 = depth$2 * 8];
                                                    invKey = stack[offset$3 + 1];
                                                    node = stack[offset$3 + 2];
                                                    if ((childType = stack[offset$3 + 3]) === void 0 || (childType = void 0)) {
                                                        childType = stack[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue = stack[offset$3 + 4] || (stack[offset$3 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch = stack[offset$3 + 5]) === void 0) {
                                                        isBranch = stack[offset$3 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                    }
                                                    if (isBranch === true) {
                                                        if ((keys$2 = stack[offset$3 + 6]) === void 0) {
                                                            keys$2 = stack[offset$3 + 6] = [];
                                                            index$2 = -1;
                                                            for (var childKey in node) {
                                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$2] = childKey);
                                                            }
                                                        }
                                                        index$2 = stack[offset$3 + 7] || (stack[offset$3 + 7] = 0);
                                                        if (index$2 < keys$2.length) {
                                                            stack[offset$3 + 7] = index$2 + 1;
                                                            stack[offset$3 = ++depth$2 * 8] = node;
                                                            stack[offset$3 + 1] = invKey = keys$2[index$2];
                                                            stack[offset$3 + 2] = node[invKey];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                    if (ref$3 && Array.isArray(ref$3)) {
                                                        destination = ref$3[__CONTEXT];
                                                        if (destination) {
                                                            var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$2 <= n) {
                                                                destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                            }
                                                            destination[__REFS_LENGTH] = n;
                                                            ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                        }
                                                    }
                                                    if (node != null && typeof node === 'object') {
                                                        var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                        while (++i$3 < n$2) {
                                                            if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                            }
                                                        }
                                                        node[__REFS_LENGTH] = void 0;
                                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                                        node === head && (root$2.__head = root$2.__next = next);
                                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                                        node.__next = node.__prev = void 0;
                                                        head = tail = next = prev = void 0;
                                                        ;
                                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    }
                                                    ;
                                                    delete stack[offset$3 + 0];
                                                    delete stack[offset$3 + 1];
                                                    delete stack[offset$3 + 2];
                                                    delete stack[offset$3 + 3];
                                                    delete stack[offset$3 + 4];
                                                    delete stack[offset$3 + 5];
                                                    delete stack[offset$3 + 6];
                                                    delete stack[offset$3 + 7];
                                                    --depth$2;
                                                }
                                                nodeParent = invParent;
                                                node = invChild;
                                            }
                                            nodeParent[key$2] = node = nodeValue;
                                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                            var self = node, node$2;
                                            while (node$2 = node) {
                                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                    while (depth$3 > -1) {
                                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                            i$4 = k = -1;
                                                            n$3 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = ++__GENERATION_GUID;
                                                            if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                linkPaths[++k] = ref$5;
                                                            } else if (n$3 > 0) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3);
                                                            }
                                                            while (++i$4 < n$3) {
                                                                if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    linkPaths[++k] = ref$5;
                                                                }
                                                            }
                                                        }
                                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                            ++depth$3;
                                                        } else {
                                                            stack$2[depth$3--] = void 0;
                                                        }
                                                    }
                                                    node = self$2;
                                                }
                                                node = node$2[__PARENT];
                                            }
                                            node = self;
                                        }
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_11313;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_map_11146;
                        }
                    } else {
                        if (key != null) {
                            var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                            nodeType = map && map[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? map[VALUE] : map;
                            newNode = map;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                delete nodeValue[$SIZE];
                                if (nodeType === SENTINEL) {
                                    nodeSize = 50 + (nodeValue.length || 1);
                                } else {
                                    nodeSize = nodeValue.length || 1;
                                }
                                newNode[$SIZE] = nodeSize;
                                nodeValue[__CONTAINER] = newNode;
                            } else if (nodeType === SENTINEL) {
                                newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                            } else if (!(map != null && typeof map === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode = Object.create(null);
                                newNode[VALUE] = nodeValue;
                                newNode[$TYPE] = nodeType;
                                newNode[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode[$TYPE] = nodeType || GROUP;
                                newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node !== newNode && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                while (++i$5 < nodeRefsLength$2) {
                                    if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                        ref$6[__CONTEXT] = newNode;
                                        newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                        node[__REF + i$5] = void 0;
                                    }
                                }
                                newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                node[__REFS_LENGTH] = ref$6 = void 0;
                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$3, offset$4, childType$2, childValue$2, isBranch$2, stack$3 = [
                                        nodeParent,
                                        invKey$2,
                                        node
                                    ], depth$4 = 0;
                                while (depth$4 > -1) {
                                    nodeParent = stack$3[offset$4 = depth$4 * 8];
                                    invKey$2 = stack$3[offset$4 + 1];
                                    node = stack$3[offset$4 + 2];
                                    if ((childType$2 = stack$3[offset$4 + 3]) === void 0 || (childType$2 = void 0)) {
                                        childType$2 = stack$3[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$2 = stack$3[offset$4 + 4] || (stack$3[offset$4 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$2 = stack$3[offset$4 + 5]) === void 0) {
                                        isBranch$2 = stack$3[offset$4 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                    }
                                    if (isBranch$2 === true) {
                                        if ((keys$3 = stack$3[offset$4 + 6]) === void 0) {
                                            keys$3 = stack$3[offset$4 + 6] = [];
                                            index$3 = -1;
                                            for (var childKey$2 in node) {
                                                !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$3[++index$3] = childKey$2);
                                            }
                                        }
                                        index$3 = stack$3[offset$4 + 7] || (stack$3[offset$4 + 7] = 0);
                                        if (index$3 < keys$3.length) {
                                            stack$3[offset$4 + 7] = index$3 + 1;
                                            stack$3[offset$4 = ++depth$4 * 8] = node;
                                            stack$3[offset$4 + 1] = invKey$2 = keys$3[index$3];
                                            stack$3[offset$4 + 2] = node[invKey$2];
                                            continue;
                                        }
                                    }
                                    var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$7 && Array.isArray(ref$7)) {
                                        destination$2 = ref$7[__CONTEXT];
                                        if (destination$2) {
                                            var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$6 <= n$4) {
                                                destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$4;
                                            ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                        while (++i$7 < n$5) {
                                            if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$3[offset$4 + 0];
                                    delete stack$3[offset$4 + 1];
                                    delete stack$3[offset$4 + 2];
                                    delete stack$3[offset$4 + 3];
                                    delete stack$3[offset$4 + 4];
                                    delete stack$3[offset$4 + 5];
                                    delete stack$3[offset$4 + 6];
                                    delete stack$3[offset$4 + 7];
                                    --depth$4;
                                }
                                nodeParent = invParent$2;
                                node = invChild$2;
                            }
                            nodeParent[key] = node = newNode;
                            nodeType = node && node[$TYPE] || void 0;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            sizeOffset = edgeSize - nodeSize;
                            var self$3 = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                    if (ref$9 && Array.isArray(ref$9)) {
                                        destination$3 = ref$9[__CONTEXT];
                                        if (destination$3) {
                                            var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                            while (++i$8 <= n$6) {
                                                destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                            }
                                            destination$3[__REFS_LENGTH] = n$6;
                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                        while (++i$9 < n$7) {
                                            if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                        next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                        prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                        node === head$3 && (root$4.__head = root$4.__next = next$3);
                                        node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                        node.__next = node.__prev = void 0;
                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                    while (depth$5 > -1) {
                                        if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                            i$10 = k$2 = -1;
                                            n$8 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                linkPaths$2[++k$2] = ref$11;
                                            } else if (n$8 > 0) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                            }
                                            while (++i$10 < n$8) {
                                                if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$2[++k$2] = ref$11;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                            ++depth$5;
                                        } else {
                                            stack$4[depth$5--] = void 0;
                                        }
                                    }
                                    node = self$4;
                                }
                            }
                            nodeParent = self$3;
                            node = child;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                if (node !== head$4) {
                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                    (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                    root$5.__head = root$5.__next = head$4 = node;
                                    head$4.__next = next$4;
                                    head$4.__prev = void 0;
                                }
                                if (tail$4 == null || node === tail$4) {
                                    root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                }
                                root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                            }
                            ;
                            var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                            while (++i$11 < n$9) {
                                copy[i$11] = requestedPath[i$11];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                            while (++i$12 < n$10) {
                                copy$2[i$12] = optimizedPath[i$12];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$13 = -1, n$11, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$11 = src.length);
                                                        while (++i$13 < n$11) {
                                                            dest[i$13] = src[i$13];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$14 = -1, n$12, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$12 = src$2.length);
                                                        while (++i$14 < n$12) {
                                                            dest$2[i$14] = src$2[i$14];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$15 = -1, n$13, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$13 = src$3.length);
                                                    while (++i$15 < n$13) {
                                                        dest$3[i$15] = src$3[i$15];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$16 = -1, n$14, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$14 = src$4.length);
                                                        while (++i$16 < n$14) {
                                                            dest$4[i$16] = src$4[i$16];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$17 = -1, n$15, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$15 = src$5.length);
                                                        while (++i$17 < n$15) {
                                                            dest$5[i$17] = src$5[i$17];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                if (node !== head$5) {
                                    next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                    prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                    root$6.__head = root$6.__next = head$5 = node;
                                    head$5.__next = next$5;
                                    head$5.__prev = void 0;
                                }
                                if (tail$5 == null || node === tail$5) {
                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                }
                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                            }
                            var pbv = Object.create(null), i$18 = -1, n$16 = requestedPath.length, val, copy$3 = new Array(n$16);
                            while (++i$18 < n$16) {
                                copy$3[i$18] = requestedPath[i$18];
                            }
                            var dest$6 = node, src$6 = dest$6, i$19 = -1, n$17, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$17 = src$6.length);
                                    while (++i$19 < n$17) {
                                        dest$6[i$19] = src$6[i$19];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$20 = -1, j = -1, l = -1, o, n$18 = nodePath.length, k$3 = requestedPath.length, req = [], opt = [], x$7, map$2, offset$5, keys$4, key$4, index$4;
                            while (++i$20 < n$18) {
                                req[i$20] = nodePath[i$20];
                            }
                            while (++j < k$3) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$20++] = (keys$4 = mapStack[(offset$5 = ++l * 4) + 1]) && keys$4.length > 1 && [x$7] || x$7;
                                }
                            }
                            j = -1;
                            n$18 = optimizedPath.length;
                            while (++j < n$18) {
                                opt[j] = optimizedPath[j];
                            }
                            o = n$18 - depth;
                            i$20 = (j = depth) - 1;
                            while (j > i$20) {
                                if ((map$2 = mapStack[offset$5 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$4 = mapStack[offset$5 + 1] || (mapStack[offset$5 + 1] = Object.keys(map$2))) && ((index$4 = mapStack[offset$5 + 2] || (mapStack[offset$5 + 2] = 0)) || true) && keys$4.length > 0) {
                                    if ((mapStack[offset$5 + 2] = ++index$4) - 1 < keys$4.length) {
                                        key$4 = keys$4[index$4 - 1];
                                        if (keys$4.length > 1) {
                                            keys$4 = req[j] || (req[j] = []);
                                            if (key$4 === __NULL) {
                                                keys$4[keys$4.length] = null;
                                            } else {
                                                keys$4[keys$4.length] = key$4;
                                                keys$4 = opt[j + o] || (opt[j + o] = []);
                                                keys$4[keys$4.length] = key$4;
                                            }
                                        } else if (key$4 === __NULL) {
                                            req[j] = null;
                                        } else {
                                            req[j] = opt[j + o] = key$4;
                                        }
                                        mapStack[offset$5 = ++j * 4] = map$2[key$4];
                                        continue;
                                    }
                                }
                                delete mapStack[offset$5 = j-- * 4];
                                delete mapStack[offset$5 + 1];
                                delete mapStack[offset$5 + 2];
                                delete mapStack[offset$5 + 3];
                            }
                            j = -1;
                            i$20 = -1;
                            n$18 = opt.length;
                            while (++j < n$18) {
                                opt[j] != null && (opt[++i$20] = opt[j]);
                            }
                            req.pathSetIndex = 0;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        ;
                        node = node;
                        break follow_path_map_11146;
                    }
                }
                if ((key = keys[index]) == null) {
                    node = node;
                    break follow_path_map_11146;
                } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                    mapStack[(depth + 1) * 4 + 3] = key;
                } else {
                    mapStack[offset$2 + 2] = index + 1;
                    node = node;
                    depth = depth;
                    continue follow_path_map_11146;
                }
                nodes[depth - 1] = nodeParent = node;
                requestedPath[requestedPath.length = depth] = key;
                keysets[keysets.length = depth] = isKeySet ? key : void 0;
                if (key != null) {
                    node = nodeParent && nodeParent[key];
                    optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                    if (typeof map === 'object') {
                        for (var key$5 in map) {
                            key$5[0] === '$' && key$5 !== $SIZE && (nodeParent && (nodeParent[key$5] = map[key$5]) || true);
                        }
                        map = map[key];
                    }
                    var mapType$2 = map && map[$TYPE] || void 0;
                    var mapValue$2 = mapType$2 === SENTINEL ? map[VALUE] : map;
                    if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType$2 && (map != null && typeof map === 'object') && !Array.isArray(mapValue$2))) {
                        nodeType = void 0;
                        nodeValue = Object.create(null);
                        nodeSize = node && node[$SIZE] || 0;
                        if (node !== nodeValue && (node != null && typeof node === 'object')) {
                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$21 = -1, ref$12;
                            while (++i$21 < nodeRefsLength$3) {
                                if ((ref$12 = node[__REF + i$21]) !== void 0) {
                                    ref$12[__CONTEXT] = nodeValue;
                                    nodeValue[__REF + (destRefsLength$3 + i$21)] = ref$12;
                                    node[__REF + i$21] = void 0;
                                }
                            }
                            nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                            node[__REFS_LENGTH] = ref$12 = void 0;
                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$5, index$5, offset$6, childType$3, childValue$3, isBranch$3, stack$5 = [
                                    nodeParent,
                                    invKey$3,
                                    node
                                ], depth$6 = 0;
                            while (depth$6 > -1) {
                                nodeParent = stack$5[offset$6 = depth$6 * 8];
                                invKey$3 = stack$5[offset$6 + 1];
                                node = stack$5[offset$6 + 2];
                                if ((childType$3 = stack$5[offset$6 + 3]) === void 0 || (childType$3 = void 0)) {
                                    childType$3 = stack$5[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue$3 = stack$5[offset$6 + 4] || (stack$5[offset$6 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                if ((isBranch$3 = stack$5[offset$6 + 5]) === void 0) {
                                    isBranch$3 = stack$5[offset$6 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                }
                                if (isBranch$3 === true) {
                                    if ((keys$5 = stack$5[offset$6 + 6]) === void 0) {
                                        keys$5 = stack$5[offset$6 + 6] = [];
                                        index$5 = -1;
                                        for (var childKey$3 in node) {
                                            !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$5[++index$5] = childKey$3);
                                        }
                                    }
                                    index$5 = stack$5[offset$6 + 7] || (stack$5[offset$6 + 7] = 0);
                                    if (index$5 < keys$5.length) {
                                        stack$5[offset$6 + 7] = index$5 + 1;
                                        stack$5[offset$6 = ++depth$6 * 8] = node;
                                        stack$5[offset$6 + 1] = invKey$3 = keys$5[index$5];
                                        stack$5[offset$6 + 2] = node[invKey$3];
                                        continue;
                                    }
                                }
                                var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                if (ref$13 && Array.isArray(ref$13)) {
                                    destination$4 = ref$13[__CONTEXT];
                                    if (destination$4) {
                                        var i$22 = (ref$13[__REF_INDEX] || 0) - 1, n$19 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                        while (++i$22 <= n$19) {
                                            destination$4[__REF + i$22] = destination$4[__REF + (i$22 + 1)];
                                        }
                                        destination$4[__REFS_LENGTH] = n$19;
                                        ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                    }
                                }
                                if (node != null && typeof node === 'object') {
                                    var ref$14, i$23 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                    while (++i$23 < n$20) {
                                        if ((ref$14 = node[__REF + i$23]) !== void 0) {
                                            ref$14[__CONTEXT] = node[__REF + i$23] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                    next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                    prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                    node === head$6 && (root$7.__head = root$7.__next = next$6);
                                    node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                    node.__next = node.__prev = void 0;
                                    head$6 = tail$6 = next$6 = prev$6 = void 0;
                                    ;
                                    nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                }
                                ;
                                delete stack$5[offset$6 + 0];
                                delete stack$5[offset$6 + 1];
                                delete stack$5[offset$6 + 2];
                                delete stack$5[offset$6 + 3];
                                delete stack$5[offset$6 + 4];
                                delete stack$5[offset$6 + 5];
                                delete stack$5[offset$6 + 6];
                                delete stack$5[offset$6 + 7];
                                --depth$6;
                            }
                            nodeParent = invParent$3;
                            node = invChild$3;
                        }
                        nodeParent[key] = node = nodeValue;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var self$5 = node, node$3;
                        while (node$3 = node) {
                            if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$24, k$4, n$21;
                                while (depth$7 > -1) {
                                    if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                        i$24 = k$4 = -1;
                                        n$21 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = ++__GENERATION_GUID;
                                        if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$6[depth$7] = linkPaths$3 = new Array(n$21 + 1);
                                            linkPaths$3[++k$4] = ref$15;
                                        } else if (n$21 > 0) {
                                            stack$6[depth$7] = linkPaths$3 = new Array(n$21);
                                        }
                                        while (++i$24 < n$21) {
                                            if ((ref$15 = node[__REF + i$24]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                linkPaths$3[++k$4] = ref$15;
                                            }
                                        }
                                    }
                                    if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                        ++depth$7;
                                    } else {
                                        stack$6[depth$7--] = void 0;
                                    }
                                }
                                node = self$6;
                            }
                            node = node$3[__PARENT];
                        }
                        node = self$5;
                    }
                    // Only create a branch if:
                    //  1. The current key is a keyset.
                    //  2. The caller supplied a JSON root seed.
                    //  3. The path depth is past the bound path length.
                    //  4. The current node is a branch or reference.
                    if (isKeySet === true && jsonRoot != null && depth >= offset) {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            var jsonKey$2 = void 0, jsonDepth$2 = depth;
                            do {
                                if (jsonKey$2 == null) {
                                    jsonKey$2 = keysets[jsonDepth$2];
                                }
                                if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                    if ((json = jsonParent[jsonKey$2]) == null) {
                                        json = jsonParent[jsonKey$2] = Object.create(null);
                                    }
                                    jsonParent = json;
                                    break;
                                }
                            } while (jsonDepth$2 >= offset - 2);
                            jsons[depth] = jsonParent;
                        }
                    }
                }
                node = node;
                depth = depth + 1;
                continue follow_path_map_11146;
            } while (true);
        node = node;
        var offset$7 = depth * 4, keys$6, index$6;
        do {
            delete mapStack[offset$7 + 0];
            delete mapStack[offset$7 + 1];
            delete mapStack[offset$7 + 2];
            delete mapStack[offset$7 + 3];
        } while ((keys$6 = mapStack[(offset$7 = 4 * --depth) + 1]) && ((index$6 = mapStack[offset$7 + 2]) || true) && (mapStack[offset$7 + 2] = ++index$6) >= keys$6.length);
    }
    return {
        'values': [{ json: jsons[offset - 1] }],
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsJSON(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, map, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[index];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_14357:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_14524:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                requestedPath[requestedPath.length] = null;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_14524;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        if (key$2 != null) {
                                            node = nodeParent && nodeParent[key$2];
                                            if (typeof map === 'object') {
                                                for (var key$3 in map) {
                                                    key$3[0] === '$' && key$3 !== $SIZE && (nodeParent && (nodeParent[key$3] = map[key$3]) || true);
                                                }
                                                map = map[key$2];
                                            }
                                            var mapType = map && map[$TYPE] || void 0;
                                            var mapValue = mapType === SENTINEL ? map[VALUE] : map;
                                            if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType && (map != null && typeof map === 'object') && !Array.isArray(mapValue))) {
                                                nodeType = void 0;
                                                nodeValue = Object.create(null);
                                                nodeSize = node && node[$SIZE] || 0;
                                                if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                    while (++i < nodeRefsLength) {
                                                        if ((ref$2 = node[__REF + i]) !== void 0) {
                                                            ref$2[__CONTEXT] = nodeValue;
                                                            nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                            node[__REF + i] = void 0;
                                                        }
                                                    }
                                                    nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                    node[__REFS_LENGTH] = ref$2 = void 0;
                                                    var invParent = nodeParent, invChild = node, invKey = key$2, keys$2, index$3, offset$3, childType, childValue, isBranch, stack = [
                                                            nodeParent,
                                                            invKey,
                                                            node
                                                        ], depth$2 = 0;
                                                    while (depth$2 > -1) {
                                                        nodeParent = stack[offset$3 = depth$2 * 8];
                                                        invKey = stack[offset$3 + 1];
                                                        node = stack[offset$3 + 2];
                                                        if ((childType = stack[offset$3 + 3]) === void 0 || (childType = void 0)) {
                                                            childType = stack[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                        }
                                                        childValue = stack[offset$3 + 4] || (stack[offset$3 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                        if ((isBranch = stack[offset$3 + 5]) === void 0) {
                                                            isBranch = stack[offset$3 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                        }
                                                        if (isBranch === true) {
                                                            if ((keys$2 = stack[offset$3 + 6]) === void 0) {
                                                                keys$2 = stack[offset$3 + 6] = [];
                                                                index$3 = -1;
                                                                for (var childKey in node) {
                                                                    !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$3] = childKey);
                                                                }
                                                            }
                                                            index$3 = stack[offset$3 + 7] || (stack[offset$3 + 7] = 0);
                                                            if (index$3 < keys$2.length) {
                                                                stack[offset$3 + 7] = index$3 + 1;
                                                                stack[offset$3 = ++depth$2 * 8] = node;
                                                                stack[offset$3 + 1] = invKey = keys$2[index$3];
                                                                stack[offset$3 + 2] = node[invKey];
                                                                continue;
                                                            }
                                                        }
                                                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                        if (ref$3 && Array.isArray(ref$3)) {
                                                            destination = ref$3[__CONTEXT];
                                                            if (destination) {
                                                                var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                while (++i$2 <= n) {
                                                                    destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                                }
                                                                destination[__REFS_LENGTH] = n;
                                                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                            }
                                                        }
                                                        if (node != null && typeof node === 'object') {
                                                            var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                            while (++i$3 < n$2) {
                                                                if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                    ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                                }
                                                            }
                                                            node[__REFS_LENGTH] = void 0;
                                                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                            next != null && typeof next === 'object' && (next.__prev = prev);
                                                            prev != null && typeof prev === 'object' && (prev.__next = next);
                                                            node === head && (root$2.__head = root$2.__next = next);
                                                            node === tail && (root$2.__tail = root$2.__prev = prev);
                                                            node.__next = node.__prev = void 0;
                                                            head = tail = next = prev = void 0;
                                                            ;
                                                            nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                        }
                                                        ;
                                                        delete stack[offset$3 + 0];
                                                        delete stack[offset$3 + 1];
                                                        delete stack[offset$3 + 2];
                                                        delete stack[offset$3 + 3];
                                                        delete stack[offset$3 + 4];
                                                        delete stack[offset$3 + 5];
                                                        delete stack[offset$3 + 6];
                                                        delete stack[offset$3 + 7];
                                                        --depth$2;
                                                    }
                                                    nodeParent = invParent;
                                                    node = invChild;
                                                }
                                                nodeParent[key$2] = node = nodeValue;
                                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                var self = node, node$2;
                                                while (node$2 = node) {
                                                    if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                        while (depth$3 > -1) {
                                                            if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                i$4 = k = -1;
                                                                n$3 = node[__REFS_LENGTH] || 0;
                                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                                if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                    linkPaths[++k] = ref$5;
                                                                } else if (n$3 > 0) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$3);
                                                                }
                                                                while (++i$4 < n$3) {
                                                                    if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        linkPaths[++k] = ref$5;
                                                                    }
                                                                }
                                                            }
                                                            if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                ++depth$3;
                                                            } else {
                                                                stack$2[depth$3--] = void 0;
                                                            }
                                                        }
                                                        node = self$2;
                                                    }
                                                    node = node$2[__PARENT];
                                                }
                                                node = self;
                                            }
                                            optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        }
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_14524;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_14357;
                            }
                        } else {
                            if (key != null) {
                                var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                                nodeType = map && map[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? map[VALUE] : map;
                                newNode = map;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    delete nodeValue[$SIZE];
                                    if (nodeType === SENTINEL) {
                                        nodeSize = 50 + (nodeValue.length || 1);
                                    } else {
                                        nodeSize = nodeValue.length || 1;
                                    }
                                    newNode[$SIZE] = nodeSize;
                                    nodeValue[__CONTAINER] = newNode;
                                } else if (nodeType === SENTINEL) {
                                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                } else if (!(map != null && typeof map === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode = Object.create(null);
                                    newNode[VALUE] = nodeValue;
                                    newNode[$TYPE] = nodeType;
                                    newNode[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode[$TYPE] = nodeType || GROUP;
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node !== newNode && (node != null && typeof node === 'object')) {
                                    var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                    while (++i$5 < nodeRefsLength$2) {
                                        if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                            ref$6[__CONTEXT] = newNode;
                                            newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                            node[__REF + i$5] = void 0;
                                        }
                                    }
                                    newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                    node[__REFS_LENGTH] = ref$6 = void 0;
                                    var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$4, childType$2, childValue$2, isBranch$2, stack$3 = [
                                            nodeParent,
                                            invKey$2,
                                            node
                                        ], depth$4 = 0;
                                    while (depth$4 > -1) {
                                        nodeParent = stack$3[offset$4 = depth$4 * 8];
                                        invKey$2 = stack$3[offset$4 + 1];
                                        node = stack$3[offset$4 + 2];
                                        if ((childType$2 = stack$3[offset$4 + 3]) === void 0 || (childType$2 = void 0)) {
                                            childType$2 = stack$3[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$2 = stack$3[offset$4 + 4] || (stack$3[offset$4 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$2 = stack$3[offset$4 + 5]) === void 0) {
                                            isBranch$2 = stack$3[offset$4 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                        }
                                        if (isBranch$2 === true) {
                                            if ((keys$3 = stack$3[offset$4 + 6]) === void 0) {
                                                keys$3 = stack$3[offset$4 + 6] = [];
                                                index$4 = -1;
                                                for (var childKey$2 in node) {
                                                    !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$3[++index$4] = childKey$2);
                                                }
                                            }
                                            index$4 = stack$3[offset$4 + 7] || (stack$3[offset$4 + 7] = 0);
                                            if (index$4 < keys$3.length) {
                                                stack$3[offset$4 + 7] = index$4 + 1;
                                                stack$3[offset$4 = ++depth$4 * 8] = node;
                                                stack$3[offset$4 + 1] = invKey$2 = keys$3[index$4];
                                                stack$3[offset$4 + 2] = node[invKey$2];
                                                continue;
                                            }
                                        }
                                        var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                        if (ref$7 && Array.isArray(ref$7)) {
                                            destination$2 = ref$7[__CONTEXT];
                                            if (destination$2) {
                                                var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                while (++i$6 <= n$4) {
                                                    destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                                }
                                                destination$2[__REFS_LENGTH] = n$4;
                                                ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                            while (++i$7 < n$5) {
                                                if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                    ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                            next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                            prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                            node === head$2 && (root$3.__head = root$3.__next = next$2);
                                            node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                            node.__next = node.__prev = void 0;
                                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                                            ;
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                        ;
                                        delete stack$3[offset$4 + 0];
                                        delete stack$3[offset$4 + 1];
                                        delete stack$3[offset$4 + 2];
                                        delete stack$3[offset$4 + 3];
                                        delete stack$3[offset$4 + 4];
                                        delete stack$3[offset$4 + 5];
                                        delete stack$3[offset$4 + 6];
                                        delete stack$3[offset$4 + 7];
                                        --depth$4;
                                    }
                                    nodeParent = invParent$2;
                                    node = invChild$2;
                                }
                                nodeParent[key] = node = newNode;
                                nodeType = node && node[$TYPE] || void 0;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                sizeOffset = edgeSize - nodeSize;
                                var self$3 = nodeParent, child = node;
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                        var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                        if (ref$9 && Array.isArray(ref$9)) {
                                            destination$3 = ref$9[__CONTEXT];
                                            if (destination$3) {
                                                var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                while (++i$8 <= n$6) {
                                                    destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                                }
                                                destination$3[__REFS_LENGTH] = n$6;
                                                ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                            while (++i$9 < n$7) {
                                                if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                            next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                            prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                            node === head$3 && (root$4.__head = root$4.__next = next$3);
                                            node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                            node.__next = node.__prev = void 0;
                                            head$3 = tail$3 = next$3 = prev$3 = void 0;
                                            ;
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                        while (depth$5 > -1) {
                                            if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                i$10 = k$2 = -1;
                                                n$8 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                    linkPaths$2[++k$2] = ref$11;
                                                } else if (n$8 > 0) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                                }
                                                while (++i$10 < n$8) {
                                                    if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        linkPaths$2[++k$2] = ref$11;
                                                    }
                                                }
                                            }
                                            if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                ++depth$5;
                                            } else {
                                                stack$4[depth$5--] = void 0;
                                            }
                                        }
                                        node = self$4;
                                    }
                                }
                                nodeParent = self$3;
                                node = child;
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                    if (node !== head$4) {
                                        next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                        prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                        (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                        root$5.__head = root$5.__next = head$4 = node;
                                        head$4.__next = next$4;
                                        head$4.__prev = void 0;
                                    }
                                    if (tail$4 == null || node === tail$4) {
                                        root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                    }
                                    root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                                }
                                ;
                                var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                                while (++i$11 < n$9) {
                                    copy[i$11] = requestedPath[i$11];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                                while (++i$12 < n$10) {
                                    copy$2[i$12] = optimizedPath[i$12];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Insert the JSON value if:
                                //  1. The caller supplied a JSON root seed.
                                //  2. The path depth is past the bound path length.
                                //  3. The current node is a leaf or reference.
                                if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    var jsonKey = void 0, jsonDepth = depth;
                                    do {
                                        if (jsonKey == null) {
                                            jsonKey = keysets[jsonDepth];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                            if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest = node, src = dest, i$13 = -1, n$11, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$11 = src.length);
                                                            while (++i$13 < n$11) {
                                                                dest[i$13] = src[i$13];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$14 = -1, n$12, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$12 = src$2.length);
                                                            while (++i$14 < n$12) {
                                                                dest$2[i$14] = src$2[i$14];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                }
                                            } else if (boxed === true) {
                                                var dest$3 = node, src$3 = dest$3, i$15 = -1, n$13, x$3;
                                                if (dest$3 != null && typeof dest$3 === 'object') {
                                                    if (Array.isArray(src$3)) {
                                                        dest$3 = new Array(n$13 = src$3.length);
                                                        while (++i$15 < n$13) {
                                                            dest$3[i$15] = src$3[i$15];
                                                        }
                                                    } else {
                                                        dest$3 = Object.create(null);
                                                        for (x$3 in src$3) {
                                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                        }
                                                    }
                                                }
                                                json = dest$3;
                                                if (nodeType === SENTINEL) {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$16 = -1, n$14, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$14 = src$4.length);
                                                            while (++i$16 < n$14) {
                                                                dest$4[i$16] = src$4[i$16];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json.value = dest$4;
                                                }
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$17 = -1, n$15, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$15 = src$5.length);
                                                            while (++i$17 < n$15) {
                                                                dest$5[i$17] = src$5[i$17];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[jsonKey] = json;
                                            break;
                                        }
                                    } while (jsonDepth >= offset - 2);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                var pbv = Object.create(null), i$18 = -1, n$16 = requestedPath.length, val, copy$3 = new Array(n$16);
                                while (++i$18 < n$16) {
                                    copy$3[i$18] = requestedPath[i$18];
                                }
                                var dest$6 = node, src$6 = dest$6, i$19 = -1, n$17, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$17 = src$6.length);
                                        while (++i$19 < n$17) {
                                            dest$6[i$19] = src$6[i$19];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val = dest$6;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$20 = -1, j = -1, l = -1, o, n$18 = nodePath.length, k$3 = requestedPath.length, req = [], opt = [], x$7, map$2, offset$5, keys$4, key$4, index$5;
                                while (++i$20 < n$18) {
                                    req[i$20] = nodePath[i$20];
                                }
                                while (++j < k$3) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$20++] = (keys$4 = mapStack[(offset$5 = ++l * 4) + 1]) && keys$4.length > 1 && [x$7] || x$7;
                                    }
                                }
                                j = -1;
                                n$18 = optimizedPath.length;
                                while (++j < n$18) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$18 - depth;
                                i$20 = (j = depth) - 1;
                                while (j > i$20) {
                                    if ((map$2 = mapStack[offset$5 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$4 = mapStack[offset$5 + 1] || (mapStack[offset$5 + 1] = Object.keys(map$2))) && ((index$5 = mapStack[offset$5 + 2] || (mapStack[offset$5 + 2] = 0)) || true) && keys$4.length > 0) {
                                        if ((mapStack[offset$5 + 2] = ++index$5) - 1 < keys$4.length) {
                                            key$4 = keys$4[index$5 - 1];
                                            if (keys$4.length > 1) {
                                                keys$4 = req[j] || (req[j] = []);
                                                if (key$4 === __NULL) {
                                                    keys$4[keys$4.length] = null;
                                                } else {
                                                    keys$4[keys$4.length] = key$4;
                                                    keys$4 = opt[j + o] || (opt[j + o] = []);
                                                    keys$4[keys$4.length] = key$4;
                                                }
                                            } else if (key$4 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$4;
                                            }
                                            mapStack[offset$5 = ++j * 4] = map$2[key$4];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$5 = j-- * 4];
                                    delete mapStack[offset$5 + 1];
                                    delete mapStack[offset$5 + 2];
                                    delete mapStack[offset$5 + 3];
                                }
                                j = -1;
                                i$20 = -1;
                                n$18 = opt.length;
                                while (++j < n$18) {
                                    opt[j] != null && (opt[++i$20] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_14357;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_14357;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_14357;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = isKeySet ? key : void 0;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (typeof map === 'object') {
                            for (var key$5 in map) {
                                key$5[0] === '$' && key$5 !== $SIZE && (nodeParent && (nodeParent[key$5] = map[key$5]) || true);
                            }
                            map = map[key];
                        }
                        var mapType$2 = map && map[$TYPE] || void 0;
                        var mapValue$2 = mapType$2 === SENTINEL ? map[VALUE] : map;
                        if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType$2 && (map != null && typeof map === 'object') && !Array.isArray(mapValue$2))) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$21 = -1, ref$12;
                                while (++i$21 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$21]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$21)] = ref$12;
                                        node[__REF + i$21] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$5, index$6, offset$6, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$6 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$6 + 1];
                                    node = stack$5[offset$6 + 2];
                                    if ((childType$3 = stack$5[offset$6 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$6 + 4] || (stack$5[offset$6 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$6 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$6 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$5 = stack$5[offset$6 + 6]) === void 0) {
                                            keys$5 = stack$5[offset$6 + 6] = [];
                                            index$6 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$5[++index$6] = childKey$3);
                                            }
                                        }
                                        index$6 = stack$5[offset$6 + 7] || (stack$5[offset$6 + 7] = 0);
                                        if (index$6 < keys$5.length) {
                                            stack$5[offset$6 + 7] = index$6 + 1;
                                            stack$5[offset$6 = ++depth$6 * 8] = node;
                                            stack$5[offset$6 + 1] = invKey$3 = keys$5[index$6];
                                            stack$5[offset$6 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$22 = (ref$13[__REF_INDEX] || 0) - 1, n$19 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$22 <= n$19) {
                                                destination$4[__REF + i$22] = destination$4[__REF + (i$22 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$19;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$23 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                        while (++i$23 < n$20) {
                                            if ((ref$14 = node[__REF + i$23]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$23] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$6 + 0];
                                    delete stack$5[offset$6 + 1];
                                    delete stack$5[offset$6 + 2];
                                    delete stack$5[offset$6 + 3];
                                    delete stack$5[offset$6 + 4];
                                    delete stack$5[offset$6 + 5];
                                    delete stack$5[offset$6 + 6];
                                    delete stack$5[offset$6 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$24, k$4, n$21;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$24 = k$4 = -1;
                                            n$21 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$21 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$21 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$21);
                                            }
                                            while (++i$24 < n$21) {
                                                if ((ref$15 = node[__REF + i$24]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                        // Only create a branch if:
                        //  1. The current key is a keyset.
                        //  2. The caller supplied a JSON root seed.
                        //  3. The path depth is past the bound path length.
                        //  4. The current node is a branch or reference.
                        if (isKeySet === true && jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        }
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_14357;
                } while (true);
            node = node;
            var offset$7 = depth * 4, keys$6, index$7;
            do {
                delete mapStack[offset$7 + 0];
                delete mapStack[offset$7 + 1];
                delete mapStack[offset$7 + 2];
                delete mapStack[offset$7 + 3];
            } while ((keys$6 = mapStack[(offset$7 = 4 * --depth) + 1]) && ((index$7 = mapStack[offset$7 + 2]) || true) && (mapStack[offset$7 + 2] = ++index$7) >= keys$6.length);
        }
        values && (values[index] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsJSONG(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = true, map, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            json = jsonParent = jsons[depth - 1];
            depth = depth;
            follow_path_map_5006:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            json = jsonParent = jsonRoot;
                            linkDepth = linkDepth;
                            follow_link_5160:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_5160;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    jsonParent = json;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        json = jsonParent && jsonParent[key$2];
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            nodeType = void 0;
                                            nodeValue = Object.create(null);
                                            nodeSize = node && node[$SIZE] || 0;
                                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                while (++i < nodeRefsLength) {
                                                    if ((ref$2 = node[__REF + i]) !== void 0) {
                                                        ref$2[__CONTEXT] = nodeValue;
                                                        nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                        node[__REF + i] = void 0;
                                                    }
                                                }
                                                nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                node[__REFS_LENGTH] = ref$2 = void 0;
                                                var invParent = nodeParent, invChild = node, invKey = key$2, keys$2, index$3, offset$3, childType, childValue, isBranch, stack = [
                                                        nodeParent,
                                                        invKey,
                                                        node
                                                    ], depth$2 = 0;
                                                while (depth$2 > -1) {
                                                    nodeParent = stack[offset$3 = depth$2 * 8];
                                                    invKey = stack[offset$3 + 1];
                                                    node = stack[offset$3 + 2];
                                                    if ((childType = stack[offset$3 + 3]) === void 0 || (childType = void 0)) {
                                                        childType = stack[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue = stack[offset$3 + 4] || (stack[offset$3 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch = stack[offset$3 + 5]) === void 0) {
                                                        isBranch = stack[offset$3 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                    }
                                                    if (isBranch === true) {
                                                        if ((keys$2 = stack[offset$3 + 6]) === void 0) {
                                                            keys$2 = stack[offset$3 + 6] = [];
                                                            index$3 = -1;
                                                            for (var childKey in node) {
                                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$3] = childKey);
                                                            }
                                                        }
                                                        index$3 = stack[offset$3 + 7] || (stack[offset$3 + 7] = 0);
                                                        if (index$3 < keys$2.length) {
                                                            stack[offset$3 + 7] = index$3 + 1;
                                                            stack[offset$3 = ++depth$2 * 8] = node;
                                                            stack[offset$3 + 1] = invKey = keys$2[index$3];
                                                            stack[offset$3 + 2] = node[invKey];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                    if (ref$3 && Array.isArray(ref$3)) {
                                                        destination = ref$3[__CONTEXT];
                                                        if (destination) {
                                                            var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$2 <= n) {
                                                                destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                            }
                                                            destination[__REFS_LENGTH] = n;
                                                            ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                        }
                                                    }
                                                    if (node != null && typeof node === 'object') {
                                                        var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                        while (++i$3 < n$2) {
                                                            if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                            }
                                                        }
                                                        node[__REFS_LENGTH] = void 0;
                                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                                        node === head && (root$2.__head = root$2.__next = next);
                                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                                        node.__next = node.__prev = void 0;
                                                        head = tail = next = prev = void 0;
                                                        ;
                                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    }
                                                    ;
                                                    delete stack[offset$3 + 0];
                                                    delete stack[offset$3 + 1];
                                                    delete stack[offset$3 + 2];
                                                    delete stack[offset$3 + 3];
                                                    delete stack[offset$3 + 4];
                                                    delete stack[offset$3 + 5];
                                                    delete stack[offset$3 + 6];
                                                    delete stack[offset$3 + 7];
                                                    --depth$2;
                                                }
                                                nodeParent = invParent;
                                                node = invChild;
                                            }
                                            nodeParent[key$2] = node = nodeValue;
                                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                            var self = node, node$2;
                                            while (node$2 = node) {
                                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                    while (depth$3 > -1) {
                                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                            i$4 = k = -1;
                                                            n$3 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = ++__GENERATION_GUID;
                                                            if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                linkPaths[++k] = ref$5;
                                                            } else if (n$3 > 0) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3);
                                                            }
                                                            while (++i$4 < n$3) {
                                                                if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    linkPaths[++k] = ref$5;
                                                                }
                                                            }
                                                        }
                                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                            ++depth$3;
                                                        } else {
                                                            stack$2[depth$3--] = void 0;
                                                        }
                                                    }
                                                    node = self$2;
                                                }
                                                node = node$2[__PARENT];
                                            }
                                            node = self;
                                        }
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        // Create a JSONG branch, or insert the value if:
                                        //  1. The caller provided a JSONG root seed.
                                        //  2. The node is a branch or value, or materialized mode is on.
                                        if (jsonRoot != null) {
                                            if (node != null) {
                                                nodeType = node && node[$TYPE] || void 0;
                                                nodeValue = node[$TYPE] === SENTINEL ? node[VALUE] : node;
                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                    if (boxed === true) {
                                                        var dest = node, src = dest, i$5 = -1, n$4, x;
                                                        if (dest != null && typeof dest === 'object') {
                                                            if (Array.isArray(src)) {
                                                                dest = new Array(n$4 = src.length);
                                                                while (++i$5 < n$4) {
                                                                    dest[i$5] = src[i$5];
                                                                }
                                                            } else {
                                                                dest = Object.create(null);
                                                                for (x in src) {
                                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                                }
                                                            }
                                                        }
                                                        json = dest;
                                                    } else {
                                                        var dest$2 = nodeValue, src$2 = dest$2, i$6 = -1, n$5, x$2;
                                                        if (dest$2 != null && typeof dest$2 === 'object') {
                                                            if (Array.isArray(src$2)) {
                                                                dest$2 = new Array(n$5 = src$2.length);
                                                                while (++i$6 < n$5) {
                                                                    dest$2[i$6] = src$2[i$6];
                                                                }
                                                            } else {
                                                                dest$2 = Object.create(null);
                                                                for (x$2 in src$2) {
                                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$2;
                                                    }
                                                } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                                    if ((json = jsonParent[key$2]) == null) {
                                                        json = Object.create(null);
                                                    } else if (typeof json !== 'object') {
                                                        throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                                    }
                                                } else if (materialized === true) {
                                                    if (node == null) {
                                                        json = Object.create(null);
                                                        json[$TYPE] = SENTINEL;
                                                    } else if (nodeValue === void 0) {
                                                        var dest$3 = node, src$3 = dest$3, i$7 = -1, n$6, x$3;
                                                        if (dest$3 != null && typeof dest$3 === 'object') {
                                                            if (Array.isArray(src$3)) {
                                                                dest$3 = new Array(n$6 = src$3.length);
                                                                while (++i$7 < n$6) {
                                                                    dest$3[i$7] = src$3[i$7];
                                                                }
                                                            } else {
                                                                dest$3 = Object.create(null);
                                                                for (x$3 in src$3) {
                                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$3;
                                                    } else {
                                                        var dest$4 = nodeValue, src$4 = dest$4, i$8 = -1, n$7, x$4;
                                                        if (dest$4 != null && typeof dest$4 === 'object') {
                                                            if (Array.isArray(src$4)) {
                                                                dest$4 = new Array(n$7 = src$4.length);
                                                                while (++i$8 < n$7) {
                                                                    dest$4[i$8] = src$4[i$8];
                                                                }
                                                            } else {
                                                                dest$4 = Object.create(null);
                                                                for (x$4 in src$4) {
                                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$4;
                                                    }
                                                } else if (boxed === true) {
                                                    json = node;
                                                } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                    if (node != null) {
                                                        var dest$5 = nodeValue, src$5 = dest$5, i$9 = -1, n$8, x$5;
                                                        if (dest$5 != null && typeof dest$5 === 'object') {
                                                            if (Array.isArray(src$5)) {
                                                                dest$5 = new Array(n$8 = src$5.length);
                                                                while (++i$9 < n$8) {
                                                                    dest$5[i$9] = src$5[i$9];
                                                                }
                                                            } else {
                                                                dest$5 = Object.create(null);
                                                                for (x$5 in src$5) {
                                                                    !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                                }
                                                            }
                                                        }
                                                        json = dest$5;
                                                    } else {
                                                        json = void 0;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else if (materialized === true) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[key$2] = json;
                                        }
                                    }
                                    node = node;
                                    json = json;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_5160;
                                } while (true);
                            node = node;
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                json = json;
                                depth = depth;
                                continue follow_path_map_5006;
                            }
                        } else {
                            if (key != null) {
                                var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                                nodeType = map && map[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? map[VALUE] : map;
                                newNode = map;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    delete nodeValue[$SIZE];
                                    if (nodeType === SENTINEL) {
                                        nodeSize = 50 + (nodeValue.length || 1);
                                    } else {
                                        nodeSize = nodeValue.length || 1;
                                    }
                                    newNode[$SIZE] = nodeSize;
                                    nodeValue[__CONTAINER] = newNode;
                                } else if (nodeType === SENTINEL) {
                                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                } else if (!(map != null && typeof map === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode = Object.create(null);
                                    newNode[VALUE] = nodeValue;
                                    newNode[$TYPE] = nodeType;
                                    newNode[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode[$TYPE] = nodeType || GROUP;
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node !== newNode && (node != null && typeof node === 'object')) {
                                    var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$10 = -1, ref$6;
                                    while (++i$10 < nodeRefsLength$2) {
                                        if ((ref$6 = node[__REF + i$10]) !== void 0) {
                                            ref$6[__CONTEXT] = newNode;
                                            newNode[__REF + (destRefsLength$2 + i$10)] = ref$6;
                                            node[__REF + i$10] = void 0;
                                        }
                                    }
                                    newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                    node[__REFS_LENGTH] = ref$6 = void 0;
                                    var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$4, childType$2, childValue$2, isBranch$2, stack$3 = [
                                            nodeParent,
                                            invKey$2,
                                            node
                                        ], depth$4 = 0;
                                    while (depth$4 > -1) {
                                        nodeParent = stack$3[offset$4 = depth$4 * 8];
                                        invKey$2 = stack$3[offset$4 + 1];
                                        node = stack$3[offset$4 + 2];
                                        if ((childType$2 = stack$3[offset$4 + 3]) === void 0 || (childType$2 = void 0)) {
                                            childType$2 = stack$3[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$2 = stack$3[offset$4 + 4] || (stack$3[offset$4 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$2 = stack$3[offset$4 + 5]) === void 0) {
                                            isBranch$2 = stack$3[offset$4 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                        }
                                        if (isBranch$2 === true) {
                                            if ((keys$3 = stack$3[offset$4 + 6]) === void 0) {
                                                keys$3 = stack$3[offset$4 + 6] = [];
                                                index$4 = -1;
                                                for (var childKey$2 in node) {
                                                    !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$3[++index$4] = childKey$2);
                                                }
                                            }
                                            index$4 = stack$3[offset$4 + 7] || (stack$3[offset$4 + 7] = 0);
                                            if (index$4 < keys$3.length) {
                                                stack$3[offset$4 + 7] = index$4 + 1;
                                                stack$3[offset$4 = ++depth$4 * 8] = node;
                                                stack$3[offset$4 + 1] = invKey$2 = keys$3[index$4];
                                                stack$3[offset$4 + 2] = node[invKey$2];
                                                continue;
                                            }
                                        }
                                        var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                        if (ref$7 && Array.isArray(ref$7)) {
                                            destination$2 = ref$7[__CONTEXT];
                                            if (destination$2) {
                                                var i$11 = (ref$7[__REF_INDEX] || 0) - 1, n$9 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                while (++i$11 <= n$9) {
                                                    destination$2[__REF + i$11] = destination$2[__REF + (i$11 + 1)];
                                                }
                                                destination$2[__REFS_LENGTH] = n$9;
                                                ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$8, i$12 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                            while (++i$12 < n$10) {
                                                if ((ref$8 = node[__REF + i$12]) !== void 0) {
                                                    ref$8[__CONTEXT] = node[__REF + i$12] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                            next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                            prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                            node === head$2 && (root$3.__head = root$3.__next = next$2);
                                            node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                            node.__next = node.__prev = void 0;
                                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                                            ;
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                        ;
                                        delete stack$3[offset$4 + 0];
                                        delete stack$3[offset$4 + 1];
                                        delete stack$3[offset$4 + 2];
                                        delete stack$3[offset$4 + 3];
                                        delete stack$3[offset$4 + 4];
                                        delete stack$3[offset$4 + 5];
                                        delete stack$3[offset$4 + 6];
                                        delete stack$3[offset$4 + 7];
                                        --depth$4;
                                    }
                                    nodeParent = invParent$2;
                                    node = invChild$2;
                                }
                                nodeParent[key] = node = newNode;
                                nodeType = node && node[$TYPE] || void 0;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                sizeOffset = edgeSize - nodeSize;
                                var self$3 = nodeParent, child = node;
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                        var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                        if (ref$9 && Array.isArray(ref$9)) {
                                            destination$3 = ref$9[__CONTEXT];
                                            if (destination$3) {
                                                var i$13 = (ref$9[__REF_INDEX] || 0) - 1, n$11 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                while (++i$13 <= n$11) {
                                                    destination$3[__REF + i$13] = destination$3[__REF + (i$13 + 1)];
                                                }
                                                destination$3[__REFS_LENGTH] = n$11;
                                                ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$10, i$14 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                            while (++i$14 < n$12) {
                                                if ((ref$10 = node[__REF + i$14]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$14] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                            next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                            prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                            node === head$3 && (root$4.__head = root$4.__next = next$3);
                                            node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                            node.__next = node.__prev = void 0;
                                            head$3 = tail$3 = next$3 = prev$3 = void 0;
                                            ;
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$15, k$2, n$13;
                                        while (depth$5 > -1) {
                                            if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                i$15 = k$2 = -1;
                                                n$13 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$13 + 1);
                                                    linkPaths$2[++k$2] = ref$11;
                                                } else if (n$13 > 0) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$13);
                                                }
                                                while (++i$15 < n$13) {
                                                    if ((ref$11 = node[__REF + i$15]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        linkPaths$2[++k$2] = ref$11;
                                                    }
                                                }
                                            }
                                            if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                ++depth$5;
                                            } else {
                                                stack$4[depth$5--] = void 0;
                                            }
                                        }
                                        node = self$4;
                                    }
                                }
                                nodeParent = self$3;
                                node = child;
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                    if (node !== head$4) {
                                        next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                        prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                        (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                        root$5.__head = root$5.__next = head$4 = node;
                                        head$4.__next = next$4;
                                        head$4.__prev = void 0;
                                    }
                                    if (tail$4 == null || node === tail$4) {
                                        root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                    }
                                    root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                                }
                                ;
                                var i$16 = -1, n$14 = requestedPath.length, copy = new Array(n$14);
                                while (++i$16 < n$14) {
                                    copy[i$16] = requestedPath[i$16];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$17 = -1, n$15 = optimizedPath.length, copy$2 = new Array(n$15);
                                while (++i$17 < n$15) {
                                    copy$2[i$17] = optimizedPath[i$17];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Create a JSONG value if:
                                //  1. The caller provided a JSONG root seed.
                                //  2. The key isn't null.
                                //  3. The current node is a value or reference.
                                if (jsonRoot != null && key != null && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if (materialized === true) {
                                        if (node == null) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else if (nodeValue === void 0) {
                                            var dest$6 = node, src$6 = dest$6, i$18 = -1, n$16, x$6;
                                            if (dest$6 != null && typeof dest$6 === 'object') {
                                                if (Array.isArray(src$6)) {
                                                    dest$6 = new Array(n$16 = src$6.length);
                                                    while (++i$18 < n$16) {
                                                        dest$6[i$18] = src$6[i$18];
                                                    }
                                                } else {
                                                    dest$6 = Object.create(null);
                                                    for (x$6 in src$6) {
                                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                                    }
                                                }
                                            }
                                            json = dest$6;
                                        } else {
                                            var dest$7 = nodeValue, src$7 = dest$7, i$19 = -1, n$17, x$7;
                                            if (dest$7 != null && typeof dest$7 === 'object') {
                                                if (Array.isArray(src$7)) {
                                                    dest$7 = new Array(n$17 = src$7.length);
                                                    while (++i$19 < n$17) {
                                                        dest$7[i$19] = src$7[i$19];
                                                    }
                                                } else {
                                                    dest$7 = Object.create(null);
                                                    for (x$7 in src$7) {
                                                        !(!(x$7[0] !== '_' || x$7[1] !== '_') || (x$7 === __SELF || x$7 === __PARENT || x$7 === __ROOT)) && (dest$7[x$7] = src$7[x$7]);
                                                    }
                                                }
                                            }
                                            json = dest$7;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        }
                                    } else if (boxed === true) {
                                        var dest$8 = node, src$8 = dest$8, i$20 = -1, n$18, x$8;
                                        if (dest$8 != null && typeof dest$8 === 'object') {
                                            if (Array.isArray(src$8)) {
                                                dest$8 = new Array(n$18 = src$8.length);
                                                while (++i$20 < n$18) {
                                                    dest$8[i$20] = src$8[i$20];
                                                }
                                            } else {
                                                dest$8 = Object.create(null);
                                                for (x$8 in src$8) {
                                                    !(!(x$8[0] !== '_' || x$8[1] !== '_') || (x$8 === __SELF || x$8 === __PARENT || x$8 === __ROOT)) && (dest$8[x$8] = src$8[x$8]);
                                                }
                                            }
                                        }
                                        json = dest$8;
                                        if (nodeType === SENTINEL) {
                                            var dest$9 = nodeValue, src$9 = dest$9, i$21 = -1, n$19, x$9;
                                            if (dest$9 != null && typeof dest$9 === 'object') {
                                                if (Array.isArray(src$9)) {
                                                    dest$9 = new Array(n$19 = src$9.length);
                                                    while (++i$21 < n$19) {
                                                        dest$9[i$21] = src$9[i$21];
                                                    }
                                                } else {
                                                    dest$9 = Object.create(null);
                                                    for (x$9 in src$9) {
                                                        !(!(x$9[0] !== '_' || x$9[1] !== '_') || (x$9 === __SELF || x$9 === __PARENT || x$9 === __ROOT)) && (dest$9[x$9] = src$9[x$9]);
                                                    }
                                                }
                                            }
                                            json.value = dest$9;
                                        }
                                    } else if (errorsAsValues === true || nodeType !== ERROR) {
                                        if (node != null) {
                                            var dest$10 = nodeValue, src$10 = dest$10, i$22 = -1, n$20, x$10;
                                            if (dest$10 != null && typeof dest$10 === 'object') {
                                                if (Array.isArray(src$10)) {
                                                    dest$10 = new Array(n$20 = src$10.length);
                                                    while (++i$22 < n$20) {
                                                        dest$10[i$22] = src$10[i$22];
                                                    }
                                                } else {
                                                    dest$10 = Object.create(null);
                                                    for (x$10 in src$10) {
                                                        !(!(x$10[0] !== '_' || x$10[1] !== '_') || (x$10 === __SELF || x$10 === __PARENT || x$10 === __ROOT)) && (dest$10[x$10] = src$10[x$10]);
                                                    }
                                                }
                                            }
                                            json = dest$10;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                    jsonParent[key] = json;
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                var pbv = Object.create(null), i$23 = -1, n$21 = requestedPath.length, val, copy$3 = new Array(n$21);
                                while (++i$23 < n$21) {
                                    copy$3[i$23] = requestedPath[i$23];
                                }
                                var dest$11 = node, src$11 = dest$11, i$24 = -1, n$22, x$11;
                                if (dest$11 != null && typeof dest$11 === 'object') {
                                    if (Array.isArray(src$11)) {
                                        dest$11 = new Array(n$22 = src$11.length);
                                        while (++i$24 < n$22) {
                                            dest$11[i$24] = src$11[i$24];
                                        }
                                    } else {
                                        dest$11 = Object.create(null);
                                        for (x$11 in src$11) {
                                            !(!(x$11[0] !== '_' || x$11[1] !== '_') || (x$11 === __SELF || x$11 === __PARENT || x$11 === __ROOT)) && (dest$11[x$11] = src$11[x$11]);
                                        }
                                    }
                                }
                                val = dest$11;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$25 = -1, j = -1, l = -1, o, n$23 = nodePath.length, k$3 = requestedPath.length, req = [], opt = [], x$12, map$2, offset$5, keys$4, key$3, index$5;
                                while (++i$25 < n$23) {
                                    req[i$25] = nodePath[i$25];
                                }
                                while (++j < k$3) {
                                    if ((x$12 = requestedPath[j]) != null) {
                                        req[i$25++] = (keys$4 = mapStack[(offset$5 = ++l * 4) + 1]) && keys$4.length > 1 && [x$12] || x$12;
                                    }
                                }
                                j = -1;
                                n$23 = optimizedPath.length;
                                while (++j < n$23) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$23 - depth;
                                i$25 = (j = depth) - 1;
                                while (j > i$25) {
                                    if ((map$2 = mapStack[offset$5 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$4 = mapStack[offset$5 + 1] || (mapStack[offset$5 + 1] = Object.keys(map$2))) && ((index$5 = mapStack[offset$5 + 2] || (mapStack[offset$5 + 2] = 0)) || true) && keys$4.length > 0) {
                                        if ((mapStack[offset$5 + 2] = ++index$5) - 1 < keys$4.length) {
                                            key$3 = keys$4[index$5 - 1];
                                            if (keys$4.length > 1) {
                                                keys$4 = req[j] || (req[j] = []);
                                                if (key$3 === __NULL) {
                                                    keys$4[keys$4.length] = null;
                                                } else {
                                                    keys$4[keys$4.length] = key$3;
                                                    keys$4 = opt[j + o] || (opt[j + o] = []);
                                                    keys$4[keys$4.length] = key$3;
                                                }
                                            } else if (key$3 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$3;
                                            }
                                            mapStack[offset$5 = ++j * 4] = map$2[key$3];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$5 = j-- * 4];
                                    delete mapStack[offset$5 + 1];
                                    delete mapStack[offset$5 + 2];
                                    delete mapStack[offset$5 + 3];
                                }
                                j = -1;
                                i$25 = -1;
                                n$23 = opt.length;
                                while (++j < n$23) {
                                    opt[j] != null && (opt[++i$25] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_5006;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_5006;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        json = json;
                        depth = depth;
                        continue follow_path_map_5006;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    jsons[depth - 1] = jsonParent = json;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        json = jsonParent && jsonParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$26 = -1, ref$12;
                                while (++i$26 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$26]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$26)] = ref$12;
                                        node[__REF + i$26] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$5, index$6, offset$6, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$6 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$6 + 1];
                                    node = stack$5[offset$6 + 2];
                                    if ((childType$3 = stack$5[offset$6 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$6 + 4] || (stack$5[offset$6 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$6 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$6 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$5 = stack$5[offset$6 + 6]) === void 0) {
                                            keys$5 = stack$5[offset$6 + 6] = [];
                                            index$6 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$5[++index$6] = childKey$3);
                                            }
                                        }
                                        index$6 = stack$5[offset$6 + 7] || (stack$5[offset$6 + 7] = 0);
                                        if (index$6 < keys$5.length) {
                                            stack$5[offset$6 + 7] = index$6 + 1;
                                            stack$5[offset$6 = ++depth$6 * 8] = node;
                                            stack$5[offset$6 + 1] = invKey$3 = keys$5[index$6];
                                            stack$5[offset$6 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$27 = (ref$13[__REF_INDEX] || 0) - 1, n$24 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$27 <= n$24) {
                                                destination$4[__REF + i$27] = destination$4[__REF + (i$27 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$24;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$28 = -1, n$25 = node[__REFS_LENGTH] || 0;
                                        while (++i$28 < n$25) {
                                            if ((ref$14 = node[__REF + i$28]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$28] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$6 + 0];
                                    delete stack$5[offset$6 + 1];
                                    delete stack$5[offset$6 + 2];
                                    delete stack$5[offset$6 + 3];
                                    delete stack$5[offset$6 + 4];
                                    delete stack$5[offset$6 + 5];
                                    delete stack$5[offset$6 + 6];
                                    delete stack$5[offset$6 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$29, k$4, n$26;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$29 = k$4 = -1;
                                            n$26 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$26 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$26 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$26);
                                            }
                                            while (++i$29 < n$26) {
                                                if ((ref$15 = node[__REF + i$29]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                        // Create a JSONG branch or insert a reference if:
                        //  1. The caller provided a JSONG root seed.
                        //  2. The current node is a branch or reference.
                        if (jsonRoot != null) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                if (boxed === true) {
                                    var dest$12 = node, src$12 = dest$12, i$30 = -1, n$27, x$13;
                                    if (dest$12 != null && typeof dest$12 === 'object') {
                                        if (Array.isArray(src$12)) {
                                            dest$12 = new Array(n$27 = src$12.length);
                                            while (++i$30 < n$27) {
                                                dest$12[i$30] = src$12[i$30];
                                            }
                                        } else {
                                            dest$12 = Object.create(null);
                                            for (x$13 in src$12) {
                                                !(!(x$13[0] !== '_' || x$13[1] !== '_') || (x$13 === __SELF || x$13 === __PARENT || x$13 === __ROOT)) && (dest$12[x$13] = src$12[x$13]);
                                            }
                                        }
                                    }
                                    json = dest$12;
                                } else {
                                    var dest$13 = nodeValue, src$13 = dest$13, i$31 = -1, n$28, x$14;
                                    if (dest$13 != null && typeof dest$13 === 'object') {
                                        if (Array.isArray(src$13)) {
                                            dest$13 = new Array(n$28 = src$13.length);
                                            while (++i$31 < n$28) {
                                                dest$13[i$31] = src$13[i$31];
                                            }
                                        } else {
                                            dest$13 = Object.create(null);
                                            for (x$14 in src$13) {
                                                !(!(x$14[0] !== '_' || x$14[1] !== '_') || (x$14 === __SELF || x$14 === __PARENT || x$14 === __ROOT)) && (dest$13[x$14] = src$13[x$14]);
                                            }
                                        }
                                    }
                                    json = dest$13;
                                }
                                jsonParent[key] = json;
                            } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                if ((json = jsonParent[key]) == null) {
                                    json = Object.create(null);
                                } else if (typeof json !== 'object') {
                                    throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                }
                                jsonParent[key] = json;
                            }
                        }
                    }
                    node = node;
                    json = json;
                    depth = depth + 1;
                    continue follow_path_map_5006;
                } while (true);
            node = node;
            var offset$7 = depth * 4, keys$6, index$7;
            do {
                delete mapStack[offset$7 + 0];
                delete mapStack[offset$7 + 1];
                delete mapStack[offset$7 + 2];
                delete mapStack[offset$7 + 3];
            } while ((keys$6 = mapStack[(offset$7 = 4 * --depth) + 1]) && ((index$7 = mapStack[offset$7 + 2]) || true) && (mapStack[offset$7 + 2] = ++index$7) >= keys$6.length);
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && {
        jsong: jsons[offset - 1],
        paths: requestedPaths
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsPathMap(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, map, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_8499:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_8665:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                requestedPath[requestedPath.length] = null;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_8665;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        if (key$2 != null) {
                                            node = nodeParent && nodeParent[key$2];
                                            if (typeof map === 'object') {
                                                for (var key$3 in map) {
                                                    key$3[0] === '$' && key$3 !== $SIZE && (nodeParent && (nodeParent[key$3] = map[key$3]) || true);
                                                }
                                                map = map[key$2];
                                            }
                                            var mapType = map && map[$TYPE] || void 0;
                                            var mapValue = mapType === SENTINEL ? map[VALUE] : map;
                                            if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType && (map != null && typeof map === 'object') && !Array.isArray(mapValue))) {
                                                nodeType = void 0;
                                                nodeValue = Object.create(null);
                                                nodeSize = node && node[$SIZE] || 0;
                                                if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                    while (++i < nodeRefsLength) {
                                                        if ((ref$2 = node[__REF + i]) !== void 0) {
                                                            ref$2[__CONTEXT] = nodeValue;
                                                            nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                            node[__REF + i] = void 0;
                                                        }
                                                    }
                                                    nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                    node[__REFS_LENGTH] = ref$2 = void 0;
                                                    var invParent = nodeParent, invChild = node, invKey = key$2, keys$2, index$3, offset$3, childType, childValue, isBranch, stack = [
                                                            nodeParent,
                                                            invKey,
                                                            node
                                                        ], depth$2 = 0;
                                                    while (depth$2 > -1) {
                                                        nodeParent = stack[offset$3 = depth$2 * 8];
                                                        invKey = stack[offset$3 + 1];
                                                        node = stack[offset$3 + 2];
                                                        if ((childType = stack[offset$3 + 3]) === void 0 || (childType = void 0)) {
                                                            childType = stack[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                        }
                                                        childValue = stack[offset$3 + 4] || (stack[offset$3 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                        if ((isBranch = stack[offset$3 + 5]) === void 0) {
                                                            isBranch = stack[offset$3 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                        }
                                                        if (isBranch === true) {
                                                            if ((keys$2 = stack[offset$3 + 6]) === void 0) {
                                                                keys$2 = stack[offset$3 + 6] = [];
                                                                index$3 = -1;
                                                                for (var childKey in node) {
                                                                    !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$3] = childKey);
                                                                }
                                                            }
                                                            index$3 = stack[offset$3 + 7] || (stack[offset$3 + 7] = 0);
                                                            if (index$3 < keys$2.length) {
                                                                stack[offset$3 + 7] = index$3 + 1;
                                                                stack[offset$3 = ++depth$2 * 8] = node;
                                                                stack[offset$3 + 1] = invKey = keys$2[index$3];
                                                                stack[offset$3 + 2] = node[invKey];
                                                                continue;
                                                            }
                                                        }
                                                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                        if (ref$3 && Array.isArray(ref$3)) {
                                                            destination = ref$3[__CONTEXT];
                                                            if (destination) {
                                                                var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                while (++i$2 <= n) {
                                                                    destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                                }
                                                                destination[__REFS_LENGTH] = n;
                                                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                            }
                                                        }
                                                        if (node != null && typeof node === 'object') {
                                                            var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                            while (++i$3 < n$2) {
                                                                if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                    ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                                }
                                                            }
                                                            node[__REFS_LENGTH] = void 0;
                                                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                            next != null && typeof next === 'object' && (next.__prev = prev);
                                                            prev != null && typeof prev === 'object' && (prev.__next = next);
                                                            node === head && (root$2.__head = root$2.__next = next);
                                                            node === tail && (root$2.__tail = root$2.__prev = prev);
                                                            node.__next = node.__prev = void 0;
                                                            head = tail = next = prev = void 0;
                                                            ;
                                                            nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                        }
                                                        ;
                                                        delete stack[offset$3 + 0];
                                                        delete stack[offset$3 + 1];
                                                        delete stack[offset$3 + 2];
                                                        delete stack[offset$3 + 3];
                                                        delete stack[offset$3 + 4];
                                                        delete stack[offset$3 + 5];
                                                        delete stack[offset$3 + 6];
                                                        delete stack[offset$3 + 7];
                                                        --depth$2;
                                                    }
                                                    nodeParent = invParent;
                                                    node = invChild;
                                                }
                                                nodeParent[key$2] = node = nodeValue;
                                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                var self = node, node$2;
                                                while (node$2 = node) {
                                                    if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                        while (depth$3 > -1) {
                                                            if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                i$4 = k = -1;
                                                                n$3 = node[__REFS_LENGTH] || 0;
                                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                                if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                    linkPaths[++k] = ref$5;
                                                                } else if (n$3 > 0) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$3);
                                                                }
                                                                while (++i$4 < n$3) {
                                                                    if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        linkPaths[++k] = ref$5;
                                                                    }
                                                                }
                                                            }
                                                            if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                ++depth$3;
                                                            } else {
                                                                stack$2[depth$3--] = void 0;
                                                            }
                                                        }
                                                        node = self$2;
                                                    }
                                                    node = node$2[__PARENT];
                                                }
                                                node = self;
                                            }
                                            optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        }
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_8665;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_8499;
                            }
                        } else {
                            if (key != null) {
                                var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                                nodeType = map && map[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? map[VALUE] : map;
                                newNode = map;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    delete nodeValue[$SIZE];
                                    if (nodeType === SENTINEL) {
                                        nodeSize = 50 + (nodeValue.length || 1);
                                    } else {
                                        nodeSize = nodeValue.length || 1;
                                    }
                                    newNode[$SIZE] = nodeSize;
                                    nodeValue[__CONTAINER] = newNode;
                                } else if (nodeType === SENTINEL) {
                                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                } else if (!(map != null && typeof map === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode = Object.create(null);
                                    newNode[VALUE] = nodeValue;
                                    newNode[$TYPE] = nodeType;
                                    newNode[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode[$TYPE] = nodeType || GROUP;
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node !== newNode && (node != null && typeof node === 'object')) {
                                    var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                    while (++i$5 < nodeRefsLength$2) {
                                        if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                            ref$6[__CONTEXT] = newNode;
                                            newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                            node[__REF + i$5] = void 0;
                                        }
                                    }
                                    newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                    node[__REFS_LENGTH] = ref$6 = void 0;
                                    var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$4, childType$2, childValue$2, isBranch$2, stack$3 = [
                                            nodeParent,
                                            invKey$2,
                                            node
                                        ], depth$4 = 0;
                                    while (depth$4 > -1) {
                                        nodeParent = stack$3[offset$4 = depth$4 * 8];
                                        invKey$2 = stack$3[offset$4 + 1];
                                        node = stack$3[offset$4 + 2];
                                        if ((childType$2 = stack$3[offset$4 + 3]) === void 0 || (childType$2 = void 0)) {
                                            childType$2 = stack$3[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$2 = stack$3[offset$4 + 4] || (stack$3[offset$4 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$2 = stack$3[offset$4 + 5]) === void 0) {
                                            isBranch$2 = stack$3[offset$4 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                        }
                                        if (isBranch$2 === true) {
                                            if ((keys$3 = stack$3[offset$4 + 6]) === void 0) {
                                                keys$3 = stack$3[offset$4 + 6] = [];
                                                index$4 = -1;
                                                for (var childKey$2 in node) {
                                                    !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$3[++index$4] = childKey$2);
                                                }
                                            }
                                            index$4 = stack$3[offset$4 + 7] || (stack$3[offset$4 + 7] = 0);
                                            if (index$4 < keys$3.length) {
                                                stack$3[offset$4 + 7] = index$4 + 1;
                                                stack$3[offset$4 = ++depth$4 * 8] = node;
                                                stack$3[offset$4 + 1] = invKey$2 = keys$3[index$4];
                                                stack$3[offset$4 + 2] = node[invKey$2];
                                                continue;
                                            }
                                        }
                                        var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                        if (ref$7 && Array.isArray(ref$7)) {
                                            destination$2 = ref$7[__CONTEXT];
                                            if (destination$2) {
                                                var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                while (++i$6 <= n$4) {
                                                    destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                                }
                                                destination$2[__REFS_LENGTH] = n$4;
                                                ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                            while (++i$7 < n$5) {
                                                if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                    ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                            next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                            prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                            node === head$2 && (root$3.__head = root$3.__next = next$2);
                                            node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                            node.__next = node.__prev = void 0;
                                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                                            ;
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                        ;
                                        delete stack$3[offset$4 + 0];
                                        delete stack$3[offset$4 + 1];
                                        delete stack$3[offset$4 + 2];
                                        delete stack$3[offset$4 + 3];
                                        delete stack$3[offset$4 + 4];
                                        delete stack$3[offset$4 + 5];
                                        delete stack$3[offset$4 + 6];
                                        delete stack$3[offset$4 + 7];
                                        --depth$4;
                                    }
                                    nodeParent = invParent$2;
                                    node = invChild$2;
                                }
                                nodeParent[key] = node = newNode;
                                nodeType = node && node[$TYPE] || void 0;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                sizeOffset = edgeSize - nodeSize;
                                var self$3 = nodeParent, child = node;
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                        var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                        if (ref$9 && Array.isArray(ref$9)) {
                                            destination$3 = ref$9[__CONTEXT];
                                            if (destination$3) {
                                                var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                while (++i$8 <= n$6) {
                                                    destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                                }
                                                destination$3[__REFS_LENGTH] = n$6;
                                                ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                            while (++i$9 < n$7) {
                                                if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                            next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                            prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                            node === head$3 && (root$4.__head = root$4.__next = next$3);
                                            node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                            node.__next = node.__prev = void 0;
                                            head$3 = tail$3 = next$3 = prev$3 = void 0;
                                            ;
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                        while (depth$5 > -1) {
                                            if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                i$10 = k$2 = -1;
                                                n$8 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                    linkPaths$2[++k$2] = ref$11;
                                                } else if (n$8 > 0) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                                }
                                                while (++i$10 < n$8) {
                                                    if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        linkPaths$2[++k$2] = ref$11;
                                                    }
                                                }
                                            }
                                            if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                ++depth$5;
                                            } else {
                                                stack$4[depth$5--] = void 0;
                                            }
                                        }
                                        node = self$4;
                                    }
                                }
                                nodeParent = self$3;
                                node = child;
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                hasValue = true;
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                    if (node !== head$4) {
                                        next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                        prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                        (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                        root$5.__head = root$5.__next = head$4 = node;
                                        head$4.__next = next$4;
                                        head$4.__prev = void 0;
                                    }
                                    if (tail$4 == null || node === tail$4) {
                                        root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                    }
                                    root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                                }
                                ;
                                var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                                while (++i$11 < n$9) {
                                    copy[i$11] = requestedPath[i$11];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                                while (++i$12 < n$10) {
                                    copy$2[i$12] = optimizedPath[i$12];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                // Insert the JSON value if:
                                //  1. The caller supplied a JSON root seed.
                                //  2. The path depth is past the bound path length.
                                //  3. The current node is a leaf or reference.
                                if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    var jsonKey = void 0, jsonDepth = depth;
                                    do {
                                        if (jsonKey == null) {
                                            jsonKey = keysets[jsonDepth];
                                        }
                                        if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                            if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest = node, src = dest, i$13 = -1, n$11, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$11 = src.length);
                                                            while (++i$13 < n$11) {
                                                                dest[i$13] = src[i$13];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$14 = -1, n$12, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$12 = src$2.length);
                                                            while (++i$14 < n$12) {
                                                                dest$2[i$14] = src$2[i$14];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                }
                                            } else if (boxed === true) {
                                                var dest$3 = node, src$3 = dest$3, i$15 = -1, n$13, x$3;
                                                if (dest$3 != null && typeof dest$3 === 'object') {
                                                    if (Array.isArray(src$3)) {
                                                        dest$3 = new Array(n$13 = src$3.length);
                                                        while (++i$15 < n$13) {
                                                            dest$3[i$15] = src$3[i$15];
                                                        }
                                                    } else {
                                                        dest$3 = Object.create(null);
                                                        for (x$3 in src$3) {
                                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                        }
                                                    }
                                                }
                                                json = dest$3;
                                                if (nodeType === SENTINEL) {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$16 = -1, n$14, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$14 = src$4.length);
                                                            while (++i$16 < n$14) {
                                                                dest$4[i$16] = src$4[i$16];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json.value = dest$4;
                                                }
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$17 = -1, n$15, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$15 = src$5.length);
                                                            while (++i$17 < n$15) {
                                                                dest$5[i$17] = src$5[i$17];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                    if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                        json[$TYPE] = GROUP;
                                                    }
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                            jsonParent[jsonKey] = json;
                                            break;
                                        }
                                    } while (jsonDepth >= offset - 2);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                var pbv = Object.create(null), i$18 = -1, n$16 = requestedPath.length, val, copy$3 = new Array(n$16);
                                while (++i$18 < n$16) {
                                    copy$3[i$18] = requestedPath[i$18];
                                }
                                var dest$6 = node, src$6 = dest$6, i$19 = -1, n$17, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$17 = src$6.length);
                                        while (++i$19 < n$17) {
                                            dest$6[i$19] = src$6[i$19];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val = dest$6;
                                pbv.path = copy$3;
                                pbv.value = val;
                                errors[errors.length] = pbv;
                            } else if (refreshing === true || node == null) {
                                var i$20 = -1, j = -1, l = -1, o, n$18 = nodePath.length, k$3 = requestedPath.length, req = [], opt = [], x$7, map$2, offset$5, keys$4, key$4, index$5;
                                while (++i$20 < n$18) {
                                    req[i$20] = nodePath[i$20];
                                }
                                while (++j < k$3) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$20++] = (keys$4 = mapStack[(offset$5 = ++l * 4) + 1]) && keys$4.length > 1 && [x$7] || x$7;
                                    }
                                }
                                j = -1;
                                n$18 = optimizedPath.length;
                                while (++j < n$18) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$18 - depth;
                                i$20 = (j = depth) - 1;
                                while (j > i$20) {
                                    if ((map$2 = mapStack[offset$5 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$4 = mapStack[offset$5 + 1] || (mapStack[offset$5 + 1] = Object.keys(map$2))) && ((index$5 = mapStack[offset$5 + 2] || (mapStack[offset$5 + 2] = 0)) || true) && keys$4.length > 0) {
                                        if ((mapStack[offset$5 + 2] = ++index$5) - 1 < keys$4.length) {
                                            key$4 = keys$4[index$5 - 1];
                                            if (keys$4.length > 1) {
                                                keys$4 = req[j] || (req[j] = []);
                                                if (key$4 === __NULL) {
                                                    keys$4[keys$4.length] = null;
                                                } else {
                                                    keys$4[keys$4.length] = key$4;
                                                    keys$4 = opt[j + o] || (opt[j + o] = []);
                                                    keys$4[keys$4.length] = key$4;
                                                }
                                            } else if (key$4 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$4;
                                            }
                                            mapStack[offset$5 = ++j * 4] = map$2[key$4];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$5 = j-- * 4];
                                    delete mapStack[offset$5 + 1];
                                    delete mapStack[offset$5 + 2];
                                    delete mapStack[offset$5 + 3];
                                }
                                j = -1;
                                i$20 = -1;
                                n$18 = opt.length;
                                while (++j < n$18) {
                                    opt[j] != null && (opt[++i$20] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_8499;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_8499;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_8499;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (typeof map === 'object') {
                            for (var key$5 in map) {
                                key$5[0] === '$' && key$5 !== $SIZE && (nodeParent && (nodeParent[key$5] = map[key$5]) || true);
                            }
                            map = map[key];
                        }
                        var mapType$2 = map && map[$TYPE] || void 0;
                        var mapValue$2 = mapType$2 === SENTINEL ? map[VALUE] : map;
                        if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType$2 && (map != null && typeof map === 'object') && !Array.isArray(mapValue$2))) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$21 = -1, ref$12;
                                while (++i$21 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$21]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$21)] = ref$12;
                                        node[__REF + i$21] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$5, index$6, offset$6, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$6 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$6 + 1];
                                    node = stack$5[offset$6 + 2];
                                    if ((childType$3 = stack$5[offset$6 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$6 + 4] || (stack$5[offset$6 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$6 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$6 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$5 = stack$5[offset$6 + 6]) === void 0) {
                                            keys$5 = stack$5[offset$6 + 6] = [];
                                            index$6 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$5[++index$6] = childKey$3);
                                            }
                                        }
                                        index$6 = stack$5[offset$6 + 7] || (stack$5[offset$6 + 7] = 0);
                                        if (index$6 < keys$5.length) {
                                            stack$5[offset$6 + 7] = index$6 + 1;
                                            stack$5[offset$6 = ++depth$6 * 8] = node;
                                            stack$5[offset$6 + 1] = invKey$3 = keys$5[index$6];
                                            stack$5[offset$6 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$22 = (ref$13[__REF_INDEX] || 0) - 1, n$19 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$22 <= n$19) {
                                                destination$4[__REF + i$22] = destination$4[__REF + (i$22 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$19;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$23 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                        while (++i$23 < n$20) {
                                            if ((ref$14 = node[__REF + i$23]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$23] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$6 + 0];
                                    delete stack$5[offset$6 + 1];
                                    delete stack$5[offset$6 + 2];
                                    delete stack$5[offset$6 + 3];
                                    delete stack$5[offset$6 + 4];
                                    delete stack$5[offset$6 + 5];
                                    delete stack$5[offset$6 + 6];
                                    delete stack$5[offset$6 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$24, k$4, n$21;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$24 = k$4 = -1;
                                            n$21 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$21 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$21 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$21);
                                            }
                                            while (++i$24 < n$21) {
                                                if ((ref$15 = node[__REF + i$24]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                        // Only create a branch if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a branch or reference.
                        if (jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        } else if (typeof json !== 'object') {
                                            throw new Error('Fatal Falcor Error: encountered value in branch position while building Path Map.');
                                        }
                                        json[__KEY] = jsonKey$2;
                                        json[__GENERATION] = node[__GENERATION] || 0;
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_8499;
                } while (true);
            node = node;
            var offset$7 = depth * 4, keys$6, index$7;
            do {
                delete mapStack[offset$7 + 0];
                delete mapStack[offset$7 + 1];
                delete mapStack[offset$7 + 2];
                delete mapStack[offset$7 + 3];
            } while ((keys$6 = mapStack[(offset$7 = 4 * --depth) + 1]) && ((index$7 = mapStack[offset$7 + 2]) || true) && (mapStack[offset$7 + 2] = ++index$7) >= keys$6.length);
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsValues(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var onNext;
    if (Array.isArray(values)) {
        values.length = 0;
    } else {
        onNext = values;
        values = undefined;
    }
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, map, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], mapStack = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathMaps.length; ++index < count;) {
        map = mapStack[0] = pathMaps[index];
        depth = 0;
        refs.length = 0;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Map */
            var isTerminus = false, offset$2 = 0, keys = void 0, index$2 = void 0, key = void 0, isKeySet = false;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_map_11656:
                do {
                    height = depth;
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if ((isTerminus = !((map = mapStack[offset$2 = depth * 4]) != null && typeof map === 'object') || map[$TYPE] !== void 0 || Array.isArray(map) || !((keys = mapStack[offset$2 + 1] || (mapStack[offset$2 + 1] = Object.keys(map))) && ((index$2 = mapStack[offset$2 + 2] || (mapStack[offset$2 + 2] = 0)) || true) && ((isKeySet = keys.length > 1) || keys.length > 0))) || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (!isTerminus && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                            linkPath = nodeValue;
                            linkIndex = depth;
                            refs[linkIndex] = linkPath;
                            optimizedPath.length = 0;
                            linkDepth = 0;
                            linkHeight = 0;
                            var location, container = linkPath[__CONTAINER] || linkPath;
                            if ((location = container[__CONTEXT]) !== void 0) {
                                node = location;
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                linkHeight = linkPath.length;
                                while (linkDepth < linkHeight) {
                                    optimizedPath[linkDepth] = linkPath[linkDepth++];
                                }
                                optimizedPath.length = linkDepth;
                            } else {
                                /* Walk Link */
                                var key$2, isKeySet$2 = false;
                                linkHeight = linkPath.length;
                                node = nodeParent = nodeRoot;
                                linkDepth = linkDepth;
                                follow_link_11820:
                                    do {
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                            if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                                nodeType = void 0;
                                                nodeValue = void 0;
                                                node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                            if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                requestedPath[requestedPath.length] = null;
                                            }
                                            if (node != null && typeof node === 'object') {
                                                var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                                // Set up the hard-link so we don't have to do all
                                                // this work the next time we follow this linkPath.
                                                if (refContext === void 0) {
                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                    node[__REF + backRefs] = refContainer;
                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                    // create a forward link
                                                    refContainer[__REF_INDEX] = backRefs;
                                                    refContainer[__CONTEXT] = node;
                                                    refContainer = backRefs = void 0;
                                                }
                                            }
                                            node = node;
                                            break follow_link_11820;
                                        }
                                        key$2 = linkPath[linkDepth];
                                        nodeParent = node;
                                        if (key$2 != null) {
                                            node = nodeParent && nodeParent[key$2];
                                            if (typeof map === 'object') {
                                                for (var key$3 in map) {
                                                    key$3[0] === '$' && key$3 !== $SIZE && (nodeParent && (nodeParent[key$3] = map[key$3]) || true);
                                                }
                                                map = map[key$2];
                                            }
                                            var mapType = map && map[$TYPE] || void 0;
                                            var mapValue = mapType === SENTINEL ? map[VALUE] : map;
                                            if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType && (map != null && typeof map === 'object') && !Array.isArray(mapValue))) {
                                                nodeType = void 0;
                                                nodeValue = Object.create(null);
                                                nodeSize = node && node[$SIZE] || 0;
                                                if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                    while (++i < nodeRefsLength) {
                                                        if ((ref$2 = node[__REF + i]) !== void 0) {
                                                            ref$2[__CONTEXT] = nodeValue;
                                                            nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                            node[__REF + i] = void 0;
                                                        }
                                                    }
                                                    nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                    node[__REFS_LENGTH] = ref$2 = void 0;
                                                    var invParent = nodeParent, invChild = node, invKey = key$2, keys$2, index$3, offset$3, childType, childValue, isBranch, stack = [
                                                            nodeParent,
                                                            invKey,
                                                            node
                                                        ], depth$2 = 0;
                                                    while (depth$2 > -1) {
                                                        nodeParent = stack[offset$3 = depth$2 * 8];
                                                        invKey = stack[offset$3 + 1];
                                                        node = stack[offset$3 + 2];
                                                        if ((childType = stack[offset$3 + 3]) === void 0 || (childType = void 0)) {
                                                            childType = stack[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                        }
                                                        childValue = stack[offset$3 + 4] || (stack[offset$3 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                        if ((isBranch = stack[offset$3 + 5]) === void 0) {
                                                            isBranch = stack[offset$3 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                        }
                                                        if (isBranch === true) {
                                                            if ((keys$2 = stack[offset$3 + 6]) === void 0) {
                                                                keys$2 = stack[offset$3 + 6] = [];
                                                                index$3 = -1;
                                                                for (var childKey in node) {
                                                                    !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys$2[++index$3] = childKey);
                                                                }
                                                            }
                                                            index$3 = stack[offset$3 + 7] || (stack[offset$3 + 7] = 0);
                                                            if (index$3 < keys$2.length) {
                                                                stack[offset$3 + 7] = index$3 + 1;
                                                                stack[offset$3 = ++depth$2 * 8] = node;
                                                                stack[offset$3 + 1] = invKey = keys$2[index$3];
                                                                stack[offset$3 + 2] = node[invKey];
                                                                continue;
                                                            }
                                                        }
                                                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                        if (ref$3 && Array.isArray(ref$3)) {
                                                            destination = ref$3[__CONTEXT];
                                                            if (destination) {
                                                                var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                                while (++i$2 <= n) {
                                                                    destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                                }
                                                                destination[__REFS_LENGTH] = n;
                                                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                            }
                                                        }
                                                        if (node != null && typeof node === 'object') {
                                                            var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                            while (++i$3 < n$2) {
                                                                if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                    ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                                }
                                                            }
                                                            node[__REFS_LENGTH] = void 0;
                                                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                            next != null && typeof next === 'object' && (next.__prev = prev);
                                                            prev != null && typeof prev === 'object' && (prev.__next = next);
                                                            node === head && (root$2.__head = root$2.__next = next);
                                                            node === tail && (root$2.__tail = root$2.__prev = prev);
                                                            node.__next = node.__prev = void 0;
                                                            head = tail = next = prev = void 0;
                                                            ;
                                                            nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                        }
                                                        ;
                                                        delete stack[offset$3 + 0];
                                                        delete stack[offset$3 + 1];
                                                        delete stack[offset$3 + 2];
                                                        delete stack[offset$3 + 3];
                                                        delete stack[offset$3 + 4];
                                                        delete stack[offset$3 + 5];
                                                        delete stack[offset$3 + 6];
                                                        delete stack[offset$3 + 7];
                                                        --depth$2;
                                                    }
                                                    nodeParent = invParent;
                                                    node = invChild;
                                                }
                                                nodeParent[key$2] = node = nodeValue;
                                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                var self = node, node$2;
                                                while (node$2 = node) {
                                                    if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                        while (depth$3 > -1) {
                                                            if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                                i$4 = k = -1;
                                                                n$3 = node[__REFS_LENGTH] || 0;
                                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                                if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                    linkPaths[++k] = ref$5;
                                                                } else if (n$3 > 0) {
                                                                    stack$2[depth$3] = linkPaths = new Array(n$3);
                                                                }
                                                                while (++i$4 < n$3) {
                                                                    if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        linkPaths[++k] = ref$5;
                                                                    }
                                                                }
                                                            }
                                                            if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                                ++depth$3;
                                                            } else {
                                                                stack$2[depth$3--] = void 0;
                                                            }
                                                        }
                                                        node = self$2;
                                                    }
                                                    node = node$2[__PARENT];
                                                }
                                                node = self;
                                            }
                                            optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        }
                                        node = node;
                                        linkDepth = linkDepth + 1;
                                        continue follow_link_11820;
                                    } while (true);
                                node = node;
                            }
                            if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                key = null;
                                node = node;
                                depth = depth;
                                continue follow_path_map_11656;
                            }
                        } else {
                            if (key != null) {
                                var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                                nodeType = map && map[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? map[VALUE] : map;
                                newNode = map;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    delete nodeValue[$SIZE];
                                    if (nodeType === SENTINEL) {
                                        nodeSize = 50 + (nodeValue.length || 1);
                                    } else {
                                        nodeSize = nodeValue.length || 1;
                                    }
                                    newNode[$SIZE] = nodeSize;
                                    nodeValue[__CONTAINER] = newNode;
                                } else if (nodeType === SENTINEL) {
                                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                } else if (!(map != null && typeof map === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode = Object.create(null);
                                    newNode[VALUE] = nodeValue;
                                    newNode[$TYPE] = nodeType;
                                    newNode[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode[$TYPE] = nodeType || GROUP;
                                    newNode[$SIZE] = nodeSize = map && map[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node !== newNode && (node != null && typeof node === 'object')) {
                                    var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                    while (++i$5 < nodeRefsLength$2) {
                                        if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                            ref$6[__CONTEXT] = newNode;
                                            newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                            node[__REF + i$5] = void 0;
                                        }
                                    }
                                    newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                    node[__REFS_LENGTH] = ref$6 = void 0;
                                    var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$4, childType$2, childValue$2, isBranch$2, stack$3 = [
                                            nodeParent,
                                            invKey$2,
                                            node
                                        ], depth$4 = 0;
                                    while (depth$4 > -1) {
                                        nodeParent = stack$3[offset$4 = depth$4 * 8];
                                        invKey$2 = stack$3[offset$4 + 1];
                                        node = stack$3[offset$4 + 2];
                                        if ((childType$2 = stack$3[offset$4 + 3]) === void 0 || (childType$2 = void 0)) {
                                            childType$2 = stack$3[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$2 = stack$3[offset$4 + 4] || (stack$3[offset$4 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$2 = stack$3[offset$4 + 5]) === void 0) {
                                            isBranch$2 = stack$3[offset$4 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                        }
                                        if (isBranch$2 === true) {
                                            if ((keys$3 = stack$3[offset$4 + 6]) === void 0) {
                                                keys$3 = stack$3[offset$4 + 6] = [];
                                                index$4 = -1;
                                                for (var childKey$2 in node) {
                                                    !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$3[++index$4] = childKey$2);
                                                }
                                            }
                                            index$4 = stack$3[offset$4 + 7] || (stack$3[offset$4 + 7] = 0);
                                            if (index$4 < keys$3.length) {
                                                stack$3[offset$4 + 7] = index$4 + 1;
                                                stack$3[offset$4 = ++depth$4 * 8] = node;
                                                stack$3[offset$4 + 1] = invKey$2 = keys$3[index$4];
                                                stack$3[offset$4 + 2] = node[invKey$2];
                                                continue;
                                            }
                                        }
                                        var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                        if (ref$7 && Array.isArray(ref$7)) {
                                            destination$2 = ref$7[__CONTEXT];
                                            if (destination$2) {
                                                var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                                while (++i$6 <= n$4) {
                                                    destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                                }
                                                destination$2[__REFS_LENGTH] = n$4;
                                                ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                            while (++i$7 < n$5) {
                                                if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                    ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                            next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                            prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                            node === head$2 && (root$3.__head = root$3.__next = next$2);
                                            node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                            node.__next = node.__prev = void 0;
                                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                                            ;
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                        ;
                                        delete stack$3[offset$4 + 0];
                                        delete stack$3[offset$4 + 1];
                                        delete stack$3[offset$4 + 2];
                                        delete stack$3[offset$4 + 3];
                                        delete stack$3[offset$4 + 4];
                                        delete stack$3[offset$4 + 5];
                                        delete stack$3[offset$4 + 6];
                                        delete stack$3[offset$4 + 7];
                                        --depth$4;
                                    }
                                    nodeParent = invParent$2;
                                    node = invChild$2;
                                }
                                nodeParent[key] = node = newNode;
                                nodeType = node && node[$TYPE] || void 0;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                sizeOffset = edgeSize - nodeSize;
                                var self$3 = nodeParent, child = node;
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                        var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                        if (ref$9 && Array.isArray(ref$9)) {
                                            destination$3 = ref$9[__CONTEXT];
                                            if (destination$3) {
                                                var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                while (++i$8 <= n$6) {
                                                    destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                                }
                                                destination$3[__REFS_LENGTH] = n$6;
                                                ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                            }
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                            while (++i$9 < n$7) {
                                                if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                            next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                            prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                            node === head$3 && (root$4.__head = root$4.__next = next$3);
                                            node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                            node.__next = node.__prev = void 0;
                                            head$3 = tail$3 = next$3 = prev$3 = void 0;
                                            ;
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                        while (depth$5 > -1) {
                                            if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                                i$10 = k$2 = -1;
                                                n$8 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = ++__GENERATION_GUID;
                                                if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                    linkPaths$2[++k$2] = ref$11;
                                                } else if (n$8 > 0) {
                                                    stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                                }
                                                while (++i$10 < n$8) {
                                                    if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        linkPaths$2[++k$2] = ref$11;
                                                    }
                                                }
                                            }
                                            if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                                ++depth$5;
                                            } else {
                                                stack$4[depth$5--] = void 0;
                                            }
                                        }
                                        node = self$4;
                                    }
                                }
                                nodeParent = self$3;
                                node = child;
                            }
                            if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                    if (node !== head$4) {
                                        next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                        prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                        (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                        root$5.__head = root$5.__next = head$4 = node;
                                        head$4.__next = next$4;
                                        head$4.__prev = void 0;
                                    }
                                    if (tail$4 == null || node === tail$4) {
                                        root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                    }
                                    root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                                }
                                ;
                                var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                                while (++i$11 < n$9) {
                                    copy[i$11] = requestedPath[i$11];
                                }
                                requestedPaths[requestedPaths.length] = copy;
                                var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                                while (++i$12 < n$10) {
                                    copy$2[i$12] = optimizedPath[i$12];
                                }
                                optimizedPaths[optimizedPaths.length] = copy$2;
                                var pbv = Object.create(null), i$13 = -1, n$11 = requestedPath.length, val, copy$3 = new Array(n$11);
                                while (++i$13 < n$11) {
                                    copy$3[i$13] = requestedPath[i$13];
                                }
                                if (materialized === true) {
                                    if (node == null) {
                                        val = Object.create(null);
                                        val[$TYPE] = SENTINEL;
                                    } else if (nodeValue === void 0) {
                                        var dest = node, src = dest, i$14 = -1, n$12, x;
                                        if (dest != null && typeof dest === 'object') {
                                            if (Array.isArray(src)) {
                                                dest = new Array(n$12 = src.length);
                                                while (++i$14 < n$12) {
                                                    dest[i$14] = src[i$14];
                                                }
                                            } else {
                                                dest = Object.create(null);
                                                for (x in src) {
                                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                }
                                            }
                                        }
                                        val = dest;
                                    } else {
                                        var dest$2 = nodeValue, src$2 = dest$2, i$15 = -1, n$13, x$2;
                                        if (dest$2 != null && typeof dest$2 === 'object') {
                                            if (Array.isArray(src$2)) {
                                                dest$2 = new Array(n$13 = src$2.length);
                                                while (++i$15 < n$13) {
                                                    dest$2[i$15] = src$2[i$15];
                                                }
                                            } else {
                                                dest$2 = Object.create(null);
                                                for (x$2 in src$2) {
                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                }
                                            }
                                        }
                                        val = dest$2;
                                    }
                                } else if (boxed === true) {
                                    var dest$3 = node, src$3 = dest$3, i$16 = -1, n$14, x$3;
                                    if (dest$3 != null && typeof dest$3 === 'object') {
                                        if (Array.isArray(src$3)) {
                                            dest$3 = new Array(n$14 = src$3.length);
                                            while (++i$16 < n$14) {
                                                dest$3[i$16] = src$3[i$16];
                                            }
                                        } else {
                                            dest$3 = Object.create(null);
                                            for (x$3 in src$3) {
                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                            }
                                        }
                                    }
                                    val = dest$3;
                                    if (nodeType === SENTINEL) {
                                        var dest$4 = nodeValue, src$4 = dest$4, i$17 = -1, n$15, x$4;
                                        if (dest$4 != null && typeof dest$4 === 'object') {
                                            if (Array.isArray(src$4)) {
                                                dest$4 = new Array(n$15 = src$4.length);
                                                while (++i$17 < n$15) {
                                                    dest$4[i$17] = src$4[i$17];
                                                }
                                            } else {
                                                dest$4 = Object.create(null);
                                                for (x$4 in src$4) {
                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                }
                                            }
                                        }
                                        val.value = dest$4;
                                    }
                                } else {
                                    var dest$5 = nodeValue, src$5 = dest$5, i$18 = -1, n$16, x$5;
                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                        if (Array.isArray(src$5)) {
                                            dest$5 = new Array(n$16 = src$5.length);
                                            while (++i$18 < n$16) {
                                                dest$5[i$18] = src$5[i$18];
                                            }
                                        } else {
                                            dest$5 = Object.create(null);
                                            for (x$5 in src$5) {
                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                            }
                                        }
                                    }
                                    val = dest$5;
                                }
                                pbv.path = copy$3;
                                pbv.value = val;
                                if (values) {
                                    values[values.length] = pbv;
                                } else if (onNext) {
                                    onNext(pbv);
                                }
                            } else if (nodeType === ERROR) {
                                if (node != null && (node && node[$EXPIRES]) !== 1) {
                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                    if (node !== head$5) {
                                        next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                        prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                        (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                        root$6.__head = root$6.__next = head$5 = node;
                                        head$5.__next = next$5;
                                        head$5.__prev = void 0;
                                    }
                                    if (tail$5 == null || node === tail$5) {
                                        root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                    }
                                    root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                }
                                var pbv$2 = Object.create(null), i$19 = -1, n$17 = requestedPath.length, val$2, copy$4 = new Array(n$17);
                                while (++i$19 < n$17) {
                                    copy$4[i$19] = requestedPath[i$19];
                                }
                                var dest$6 = node, src$6 = dest$6, i$20 = -1, n$18, x$6;
                                if (dest$6 != null && typeof dest$6 === 'object') {
                                    if (Array.isArray(src$6)) {
                                        dest$6 = new Array(n$18 = src$6.length);
                                        while (++i$20 < n$18) {
                                            dest$6[i$20] = src$6[i$20];
                                        }
                                    } else {
                                        dest$6 = Object.create(null);
                                        for (x$6 in src$6) {
                                            !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                        }
                                    }
                                }
                                val$2 = dest$6;
                                pbv$2.path = copy$4;
                                pbv$2.value = val$2;
                                errors[errors.length] = pbv$2;
                            } else if (refreshing === true || node == null) {
                                var i$21 = -1, j = -1, l = -1, o, n$19 = nodePath.length, k$3 = requestedPath.length, req = [], opt = [], x$7, map$2, offset$5, keys$4, key$4, index$5;
                                while (++i$21 < n$19) {
                                    req[i$21] = nodePath[i$21];
                                }
                                while (++j < k$3) {
                                    if ((x$7 = requestedPath[j]) != null) {
                                        req[i$21++] = (keys$4 = mapStack[(offset$5 = ++l * 4) + 1]) && keys$4.length > 1 && [x$7] || x$7;
                                    }
                                }
                                j = -1;
                                n$19 = optimizedPath.length;
                                while (++j < n$19) {
                                    opt[j] = optimizedPath[j];
                                }
                                o = n$19 - depth;
                                i$21 = (j = depth) - 1;
                                while (j > i$21) {
                                    if ((map$2 = mapStack[offset$5 = j * 4]) != null && typeof map$2 === 'object' && map$2[$TYPE] === void 0 && Array.isArray(map$2) === false && (keys$4 = mapStack[offset$5 + 1] || (mapStack[offset$5 + 1] = Object.keys(map$2))) && ((index$5 = mapStack[offset$5 + 2] || (mapStack[offset$5 + 2] = 0)) || true) && keys$4.length > 0) {
                                        if ((mapStack[offset$5 + 2] = ++index$5) - 1 < keys$4.length) {
                                            key$4 = keys$4[index$5 - 1];
                                            if (keys$4.length > 1) {
                                                keys$4 = req[j] || (req[j] = []);
                                                if (key$4 === __NULL) {
                                                    keys$4[keys$4.length] = null;
                                                } else {
                                                    keys$4[keys$4.length] = key$4;
                                                    keys$4 = opt[j + o] || (opt[j + o] = []);
                                                    keys$4[keys$4.length] = key$4;
                                                }
                                            } else if (key$4 === __NULL) {
                                                req[j] = null;
                                            } else {
                                                req[j] = opt[j + o] = key$4;
                                            }
                                            mapStack[offset$5 = ++j * 4] = map$2[key$4];
                                            continue;
                                        }
                                    }
                                    delete mapStack[offset$5 = j-- * 4];
                                    delete mapStack[offset$5 + 1];
                                    delete mapStack[offset$5 + 2];
                                    delete mapStack[offset$5 + 3];
                                }
                                j = -1;
                                i$21 = -1;
                                n$19 = opt.length;
                                while (++j < n$19) {
                                    opt[j] != null && (opt[++i$21] = opt[j]);
                                }
                                req.pathSetIndex = index;
                                requestedMissingPaths[requestedMissingPaths.length] = req;
                                optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                            }
                            ;
                            node = node;
                            break follow_path_map_11656;
                        }
                    }
                    if ((key = keys[index$2]) == null) {
                        node = node;
                        break follow_path_map_11656;
                    } else if (key === __NULL && ((key = null) || true) || !(!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') && ((mapStack[(depth + 1) * 4] = map[key]) || true)) {
                        mapStack[(depth + 1) * 4 + 3] = key;
                    } else {
                        mapStack[offset$2 + 2] = index$2 + 1;
                        node = node;
                        depth = depth;
                        continue follow_path_map_11656;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (typeof map === 'object') {
                            for (var key$5 in map) {
                                key$5[0] === '$' && key$5 !== $SIZE && (nodeParent && (nodeParent[key$5] = map[key$5]) || true);
                            }
                            map = map[key];
                        }
                        var mapType$2 = map && map[$TYPE] || void 0;
                        var mapValue$2 = mapType$2 === SENTINEL ? map[VALUE] : map;
                        if ((node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) && (!mapType$2 && (map != null && typeof map === 'object') && !Array.isArray(mapValue$2))) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$22 = -1, ref$12;
                                while (++i$22 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$22]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$22)] = ref$12;
                                        node[__REF + i$22] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$5, index$6, offset$6, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$6 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$6 + 1];
                                    node = stack$5[offset$6 + 2];
                                    if ((childType$3 = stack$5[offset$6 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$6 + 4] || (stack$5[offset$6 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$6 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$6 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$5 = stack$5[offset$6 + 6]) === void 0) {
                                            keys$5 = stack$5[offset$6 + 6] = [];
                                            index$6 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$5[++index$6] = childKey$3);
                                            }
                                        }
                                        index$6 = stack$5[offset$6 + 7] || (stack$5[offset$6 + 7] = 0);
                                        if (index$6 < keys$5.length) {
                                            stack$5[offset$6 + 7] = index$6 + 1;
                                            stack$5[offset$6 = ++depth$6 * 8] = node;
                                            stack$5[offset$6 + 1] = invKey$3 = keys$5[index$6];
                                            stack$5[offset$6 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$23 = (ref$13[__REF_INDEX] || 0) - 1, n$20 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$23 <= n$20) {
                                                destination$4[__REF + i$23] = destination$4[__REF + (i$23 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$20;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$24 = -1, n$21 = node[__REFS_LENGTH] || 0;
                                        while (++i$24 < n$21) {
                                            if ((ref$14 = node[__REF + i$24]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$24] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$6 + 0];
                                    delete stack$5[offset$6 + 1];
                                    delete stack$5[offset$6 + 2];
                                    delete stack$5[offset$6 + 3];
                                    delete stack$5[offset$6 + 4];
                                    delete stack$5[offset$6 + 5];
                                    delete stack$5[offset$6 + 6];
                                    delete stack$5[offset$6 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$25, k$4, n$22;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$25 = k$4 = -1;
                                            n$22 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$22 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$22 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$22);
                                            }
                                            while (++i$25 < n$22) {
                                                if ((ref$15 = node[__REF + i$25]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_map_11656;
                } while (true);
            node = node;
            var offset$7 = depth * 4, keys$6, index$7;
            do {
                delete mapStack[offset$7 + 0];
                delete mapStack[offset$7 + 1];
                delete mapStack[offset$7 + 2];
                delete mapStack[offset$7 + 3];
            } while ((keys$6 = mapStack[(offset$7 = 4 * --depth) + 1]) && ((index$7 = mapStack[offset$7 + 2]) || true) && (mapStack[offset$7 + 2] = ++index$7) >= keys$6.length);
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathSet(model, path, value, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    if (Array.isArray(path) === false) {
        if (typeof offset !== 'number') {
            offset = value;
        }
        value = path.value;
        path = path.path;
    }
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot = Object.create(null), jsonParent = jsonRoot, json = jsonParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 1] = jsonRoot;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    while (depth > -1) {
        var ref = linkIndex = depth;
        refs.length = depth + 1;
        while (linkIndex >= -1) {
            if (!!(ref = refs[linkIndex])) {
                ~linkIndex || ++linkIndex;
                linkHeight = ref.length;
                var i = 0, j = 0;
                while (i < linkHeight) {
                    optimizedPath[j++] = ref[i++];
                }
                i = linkIndex;
                while (i < depth) {
                    optimizedPath[j++] = requestedPath[i++];
                }
                requestedPath.length = i;
                optimizedPath.length = j;
                break;
            }
            --linkIndex;
        }
        /* Walk Path Set */
        var key = void 0, isKeySet = false;
        height = path.length;
        node = nodeParent = nodes[depth - 1];
        depth = depth;
        follow_path_set_14853:
            do {
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    linkPath = nodeValue;
                    linkIndex = depth;
                    refs[linkIndex] = linkPath;
                    optimizedPath.length = 0;
                    linkDepth = 0;
                    linkHeight = 0;
                    var location, container = linkPath[__CONTAINER] || linkPath;
                    if ((location = container[__CONTEXT]) !== void 0) {
                        node = location;
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        linkHeight = linkPath.length;
                        while (linkDepth < linkHeight) {
                            optimizedPath[linkDepth] = linkPath[linkDepth++];
                        }
                        optimizedPath.length = linkDepth;
                    } else {
                        /* Walk Link */
                        var key$2, isKeySet$2 = false;
                        linkHeight = linkPath.length;
                        node = nodeParent = nodeRoot;
                        linkDepth = linkDepth;
                        follow_link_15091:
                            do {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                        nodeType = void 0;
                                        nodeValue = void 0;
                                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                        // Set up the hard-link so we don't have to do all
                                        // this work the next time we follow this linkPath.
                                        if (refContext === void 0) {
                                            var backRefs = node[__REFS_LENGTH] || 0;
                                            node[__REF + backRefs] = refContainer;
                                            node[__REFS_LENGTH] = backRefs + 1;
                                            // create a forward link
                                            refContainer[__REF_INDEX] = backRefs;
                                            refContainer[__CONTEXT] = node;
                                            refContainer = backRefs = void 0;
                                        }
                                    }
                                    node = node;
                                    break follow_link_15091;
                                }
                                key$2 = linkPath[linkDepth];
                                nodeParent = node;
                                if (key$2 != null) {
                                    node = nodeParent && nodeParent[key$2];
                                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        nodeType = void 0;
                                        nodeValue = Object.create(null);
                                        nodeSize = node && node[$SIZE] || 0;
                                        if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                            while (++i < nodeRefsLength) {
                                                if ((ref$2 = node[__REF + i]) !== void 0) {
                                                    ref$2[__CONTEXT] = nodeValue;
                                                    nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                    node[__REF + i] = void 0;
                                                }
                                            }
                                            nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                            node[__REFS_LENGTH] = ref$2 = void 0;
                                            var invParent = nodeParent, invChild = node, invKey = key$2, keys, index, offset$2, childType, childValue, isBranch, stack = [
                                                    nodeParent,
                                                    invKey,
                                                    node
                                                ], depth$2 = 0;
                                            while (depth$2 > -1) {
                                                nodeParent = stack[offset$2 = depth$2 * 8];
                                                invKey = stack[offset$2 + 1];
                                                node = stack[offset$2 + 2];
                                                if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                    childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                    isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                }
                                                if (isBranch === true) {
                                                    if ((keys = stack[offset$2 + 6]) === void 0) {
                                                        keys = stack[offset$2 + 6] = [];
                                                        index = -1;
                                                        for (var childKey in node) {
                                                            !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index] = childKey);
                                                        }
                                                    }
                                                    index = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                    if (index < keys.length) {
                                                        stack[offset$2 + 7] = index + 1;
                                                        stack[offset$2 = ++depth$2 * 8] = node;
                                                        stack[offset$2 + 1] = invKey = keys[index];
                                                        stack[offset$2 + 2] = node[invKey];
                                                        continue;
                                                    }
                                                }
                                                var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                if (ref$3 && Array.isArray(ref$3)) {
                                                    destination = ref$3[__CONTEXT];
                                                    if (destination) {
                                                        var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$2 <= n) {
                                                            destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                        }
                                                        destination[__REFS_LENGTH] = n;
                                                        ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                    while (++i$3 < n$2) {
                                                        if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                            ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                                    node === head && (root$2.__head = root$2.__next = next);
                                                    node === tail && (root$2.__tail = root$2.__prev = prev);
                                                    node.__next = node.__prev = void 0;
                                                    head = tail = next = prev = void 0;
                                                    ;
                                                    nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack[offset$2 + 0];
                                                delete stack[offset$2 + 1];
                                                delete stack[offset$2 + 2];
                                                delete stack[offset$2 + 3];
                                                delete stack[offset$2 + 4];
                                                delete stack[offset$2 + 5];
                                                delete stack[offset$2 + 6];
                                                delete stack[offset$2 + 7];
                                                --depth$2;
                                            }
                                            nodeParent = invParent;
                                            node = invChild;
                                        }
                                        nodeParent[key$2] = node = nodeValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var self = node, node$2;
                                        while (node$2 = node) {
                                            if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                while (depth$3 > -1) {
                                                    if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                        i$4 = k = -1;
                                                        n$3 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                            linkPaths[++k] = ref$5;
                                                        } else if (n$3 > 0) {
                                                            stack$2[depth$3] = linkPaths = new Array(n$3);
                                                        }
                                                        while (++i$4 < n$3) {
                                                            if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths[++k] = ref$5;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                        ++depth$3;
                                                    } else {
                                                        stack$2[depth$3--] = void 0;
                                                    }
                                                }
                                                node = self$2;
                                            }
                                            node = node$2[__PARENT];
                                        }
                                        node = self;
                                    }
                                    optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                }
                                node = node;
                                linkDepth = linkDepth + 1;
                                continue follow_link_15091;
                            } while (true);
                        node = node;
                    }
                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                        key = null;
                        node = node;
                        depth = depth;
                        continue follow_path_set_14853;
                    }
                } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                        nodeType = void 0;
                        nodeValue = void 0;
                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    if (key != null) {
                        var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                        nodeType = value && value[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                        newNode = value;
                        if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            delete nodeValue[$SIZE];
                            if (nodeType === SENTINEL) {
                                nodeSize = 50 + (nodeValue.length || 1);
                            } else {
                                nodeSize = nodeValue.length || 1;
                            }
                            newNode[$SIZE] = nodeSize;
                            nodeValue[__CONTAINER] = newNode;
                        } else if (nodeType === SENTINEL) {
                            newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                        } else if (nodeType === ERROR) {
                            newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                        } else if (!(value != null && typeof value === 'object')) {
                            nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            nodeType = 'sentinel';
                            newNode = Object.create(null);
                            newNode[VALUE] = nodeValue;
                            newNode[$TYPE] = nodeType;
                            newNode[$SIZE] = nodeSize;
                        } else {
                            nodeType = newNode[$TYPE] = nodeType || GROUP;
                            newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                        }
                        ;
                        if (node !== newNode && (node != null && typeof node === 'object')) {
                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                            while (++i$5 < nodeRefsLength$2) {
                                if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                    ref$6[__CONTEXT] = newNode;
                                    newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                    node[__REF + i$5] = void 0;
                                }
                            }
                            newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                            node[__REFS_LENGTH] = ref$6 = void 0;
                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$2, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                    nodeParent,
                                    invKey$2,
                                    node
                                ], depth$4 = 0;
                            while (depth$4 > -1) {
                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                invKey$2 = stack$3[offset$3 + 1];
                                node = stack$3[offset$3 + 2];
                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                }
                                if (isBranch$2 === true) {
                                    if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                        keys$2 = stack$3[offset$3 + 6] = [];
                                        index$2 = -1;
                                        for (var childKey$2 in node) {
                                            !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$2] = childKey$2);
                                        }
                                    }
                                    index$2 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                    if (index$2 < keys$2.length) {
                                        stack$3[offset$3 + 7] = index$2 + 1;
                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                        stack$3[offset$3 + 1] = invKey$2 = keys$2[index$2];
                                        stack$3[offset$3 + 2] = node[invKey$2];
                                        continue;
                                    }
                                }
                                var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                if (ref$7 && Array.isArray(ref$7)) {
                                    destination$2 = ref$7[__CONTEXT];
                                    if (destination$2) {
                                        var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                        while (++i$6 <= n$4) {
                                            destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                        }
                                        destination$2[__REFS_LENGTH] = n$4;
                                        ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                    }
                                }
                                if (node != null && typeof node === 'object') {
                                    var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                    while (++i$7 < n$5) {
                                        if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                            ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                    next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                    prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                    node === head$2 && (root$3.__head = root$3.__next = next$2);
                                    node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                    node.__next = node.__prev = void 0;
                                    head$2 = tail$2 = next$2 = prev$2 = void 0;
                                    ;
                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                }
                                ;
                                delete stack$3[offset$3 + 0];
                                delete stack$3[offset$3 + 1];
                                delete stack$3[offset$3 + 2];
                                delete stack$3[offset$3 + 3];
                                delete stack$3[offset$3 + 4];
                                delete stack$3[offset$3 + 5];
                                delete stack$3[offset$3 + 6];
                                delete stack$3[offset$3 + 7];
                                --depth$4;
                            }
                            nodeParent = invParent$2;
                            node = invChild$2;
                        }
                        nodeParent[key] = node = newNode;
                        nodeType = node && node[$TYPE] || void 0;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        sizeOffset = edgeSize - nodeSize;
                        var self$3 = nodeParent, child = node;
                        while (node = nodeParent) {
                            nodeParent = node[__PARENT];
                            if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                if (ref$9 && Array.isArray(ref$9)) {
                                    destination$3 = ref$9[__CONTEXT];
                                    if (destination$3) {
                                        var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                        while (++i$8 <= n$6) {
                                            destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                        }
                                        destination$3[__REFS_LENGTH] = n$6;
                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                    }
                                }
                                if (node != null && typeof node === 'object') {
                                    var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                    while (++i$9 < n$7) {
                                        if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                            ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                    next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                    prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                    node === head$3 && (root$4.__head = root$4.__next = next$3);
                                    node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                    node.__next = node.__prev = void 0;
                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                    ;
                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                }
                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                while (depth$5 > -1) {
                                    if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                        i$10 = k$2 = -1;
                                        n$8 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = ++__GENERATION_GUID;
                                        if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                            linkPaths$2[++k$2] = ref$11;
                                        } else if (n$8 > 0) {
                                            stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                        }
                                        while (++i$10 < n$8) {
                                            if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                linkPaths$2[++k$2] = ref$11;
                                            }
                                        }
                                    }
                                    if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                        ++depth$5;
                                    } else {
                                        stack$4[depth$5--] = void 0;
                                    }
                                }
                                node = self$4;
                            }
                        }
                        nodeParent = self$3;
                        node = child;
                    }
                    if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                        if (node != null && (node && node[$EXPIRES]) !== 1) {
                            var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                            if (node !== head$4) {
                                next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                root$5.__head = root$5.__next = head$4 = node;
                                head$4.__next = next$4;
                                head$4.__prev = void 0;
                            }
                            if (tail$4 == null || node === tail$4) {
                                root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                            }
                            root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                        }
                        ;
                        var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                        while (++i$11 < n$9) {
                            copy[i$11] = requestedPath[i$11];
                        }
                        requestedPaths[requestedPaths.length] = copy;
                        var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                        while (++i$12 < n$10) {
                            copy$2[i$12] = optimizedPath[i$12];
                        }
                        optimizedPaths[optimizedPaths.length] = copy$2;
                        // Insert the JSON value if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a leaf or reference.
                        if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                            var jsonKey = void 0, jsonDepth = depth;
                            do {
                                if (jsonKey == null) {
                                    jsonKey = keysets[jsonDepth];
                                }
                                if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                    if (materialized === true) {
                                        if (node == null) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else if (nodeValue === void 0) {
                                            var dest = node, src = dest, i$13 = -1, n$11, x;
                                            if (dest != null && typeof dest === 'object') {
                                                if (Array.isArray(src)) {
                                                    dest = new Array(n$11 = src.length);
                                                    while (++i$13 < n$11) {
                                                        dest[i$13] = src[i$13];
                                                    }
                                                } else {
                                                    dest = Object.create(null);
                                                    for (x in src) {
                                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                    }
                                                }
                                            }
                                            json = dest;
                                        } else {
                                            var dest$2 = nodeValue, src$2 = dest$2, i$14 = -1, n$12, x$2;
                                            if (dest$2 != null && typeof dest$2 === 'object') {
                                                if (Array.isArray(src$2)) {
                                                    dest$2 = new Array(n$12 = src$2.length);
                                                    while (++i$14 < n$12) {
                                                        dest$2[i$14] = src$2[i$14];
                                                    }
                                                } else {
                                                    dest$2 = Object.create(null);
                                                    for (x$2 in src$2) {
                                                        !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                    }
                                                }
                                            }
                                            json = dest$2;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        }
                                    } else if (boxed === true) {
                                        var dest$3 = node, src$3 = dest$3, i$15 = -1, n$13, x$3;
                                        if (dest$3 != null && typeof dest$3 === 'object') {
                                            if (Array.isArray(src$3)) {
                                                dest$3 = new Array(n$13 = src$3.length);
                                                while (++i$15 < n$13) {
                                                    dest$3[i$15] = src$3[i$15];
                                                }
                                            } else {
                                                dest$3 = Object.create(null);
                                                for (x$3 in src$3) {
                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                }
                                            }
                                        }
                                        json = dest$3;
                                        if (nodeType === SENTINEL) {
                                            var dest$4 = nodeValue, src$4 = dest$4, i$16 = -1, n$14, x$4;
                                            if (dest$4 != null && typeof dest$4 === 'object') {
                                                if (Array.isArray(src$4)) {
                                                    dest$4 = new Array(n$14 = src$4.length);
                                                    while (++i$16 < n$14) {
                                                        dest$4[i$16] = src$4[i$16];
                                                    }
                                                } else {
                                                    dest$4 = Object.create(null);
                                                    for (x$4 in src$4) {
                                                        !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                    }
                                                }
                                            }
                                            json.value = dest$4;
                                        }
                                    } else if (errorsAsValues === true || nodeType !== ERROR) {
                                        if (node != null) {
                                            var dest$5 = nodeValue, src$5 = dest$5, i$17 = -1, n$15, x$5;
                                            if (dest$5 != null && typeof dest$5 === 'object') {
                                                if (Array.isArray(src$5)) {
                                                    dest$5 = new Array(n$15 = src$5.length);
                                                    while (++i$17 < n$15) {
                                                        dest$5[i$17] = src$5[i$17];
                                                    }
                                                } else {
                                                    dest$5 = Object.create(null);
                                                    for (x$5 in src$5) {
                                                        !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                    }
                                                }
                                            }
                                            json = dest$5;
                                            if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                json[$TYPE] = GROUP;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                    jsonParent[jsonKey] = json;
                                    break;
                                }
                            } while (jsonDepth >= offset - 2);
                        }
                    } else if (nodeType === ERROR) {
                        if (node != null && (node && node[$EXPIRES]) !== 1) {
                            var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                            if (node !== head$5) {
                                next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                root$6.__head = root$6.__next = head$5 = node;
                                head$5.__next = next$5;
                                head$5.__prev = void 0;
                            }
                            if (tail$5 == null || node === tail$5) {
                                root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                            }
                            root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                        }
                        var pbv = Object.create(null), i$18 = -1, n$16 = requestedPath.length, val, copy$3 = new Array(n$16);
                        while (++i$18 < n$16) {
                            copy$3[i$18] = requestedPath[i$18];
                        }
                        var dest$6 = node, src$6 = dest$6, i$19 = -1, n$17, x$6;
                        if (dest$6 != null && typeof dest$6 === 'object') {
                            if (Array.isArray(src$6)) {
                                dest$6 = new Array(n$17 = src$6.length);
                                while (++i$19 < n$17) {
                                    dest$6[i$19] = src$6[i$19];
                                }
                            } else {
                                dest$6 = Object.create(null);
                                for (x$6 in src$6) {
                                    !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                }
                            }
                        }
                        val = dest$6;
                        pbv.path = copy$3;
                        pbv.value = val;
                        errors[errors.length] = pbv;
                    } else if (refreshing === true || node == null) {
                        var i$20 = -1, j = -1, l = 0, n$18 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                        while (++i$20 < n$18) {
                            req[i$20] = nodePath[i$20];
                        }
                        while (++j < k$3) {
                            if ((x$7 = requestedPath[j]) != null) {
                                req[i$20++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                            }
                        }
                        m = n$18 + l + height - depth;
                        while (i$20 < m) {
                            req[i$20++] = path[l++];
                        }
                        req.length = i$20;
                        req.pathSetIndex = 0;
                        requestedMissingPaths[requestedMissingPaths.length] = req;
                        var i$21 = -1, n$19 = optimizedPath.length, opt = new Array(n$19 + height - depth), j$2, x$8;
                        while (++i$21 < n$19) {
                            opt[i$21] = optimizedPath[i$21];
                        }
                        for (j$2 = depth, n$19 = height; j$2 < n$19;) {
                            if ((x$8 = path[j$2++]) != null) {
                                opt[i$21++] = x$8;
                            }
                        }
                        opt.length = i$21;
                        optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                    }
                    node = node;
                    break follow_path_set_14853;
                }
                key = path[depth];
                if (isKeySet = key != null && typeof key === 'object') {
                    if (Array.isArray(key)) {
                        if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    } else {
                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                    }
                }
                if (key === __NULL) {
                    key = null;
                }
                nodes[depth - 1] = nodeParent = node;
                requestedPath[requestedPath.length = depth] = key;
                keysets[keysets.length = depth] = isKeySet ? key : void 0;
                if (key != null) {
                    node = nodeParent && nodeParent[key];
                    optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                        nodeType = void 0;
                        nodeValue = Object.create(null);
                        nodeSize = node && node[$SIZE] || 0;
                        if (node !== nodeValue && (node != null && typeof node === 'object')) {
                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$22 = -1, ref$12;
                            while (++i$22 < nodeRefsLength$3) {
                                if ((ref$12 = node[__REF + i$22]) !== void 0) {
                                    ref$12[__CONTEXT] = nodeValue;
                                    nodeValue[__REF + (destRefsLength$3 + i$22)] = ref$12;
                                    node[__REF + i$22] = void 0;
                                }
                            }
                            nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                            node[__REFS_LENGTH] = ref$12 = void 0;
                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$3, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                    nodeParent,
                                    invKey$3,
                                    node
                                ], depth$6 = 0;
                            while (depth$6 > -1) {
                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                invKey$3 = stack$5[offset$4 + 1];
                                node = stack$5[offset$4 + 2];
                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                }
                                if (isBranch$3 === true) {
                                    if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                        keys$3 = stack$5[offset$4 + 6] = [];
                                        index$3 = -1;
                                        for (var childKey$3 in node) {
                                            !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$3] = childKey$3);
                                        }
                                    }
                                    index$3 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                    if (index$3 < keys$3.length) {
                                        stack$5[offset$4 + 7] = index$3 + 1;
                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                        stack$5[offset$4 + 1] = invKey$3 = keys$3[index$3];
                                        stack$5[offset$4 + 2] = node[invKey$3];
                                        continue;
                                    }
                                }
                                var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                if (ref$13 && Array.isArray(ref$13)) {
                                    destination$4 = ref$13[__CONTEXT];
                                    if (destination$4) {
                                        var i$23 = (ref$13[__REF_INDEX] || 0) - 1, n$20 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                        while (++i$23 <= n$20) {
                                            destination$4[__REF + i$23] = destination$4[__REF + (i$23 + 1)];
                                        }
                                        destination$4[__REFS_LENGTH] = n$20;
                                        ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                    }
                                }
                                if (node != null && typeof node === 'object') {
                                    var ref$14, i$24 = -1, n$21 = node[__REFS_LENGTH] || 0;
                                    while (++i$24 < n$21) {
                                        if ((ref$14 = node[__REF + i$24]) !== void 0) {
                                            ref$14[__CONTEXT] = node[__REF + i$24] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                    next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                    prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                    node === head$6 && (root$7.__head = root$7.__next = next$6);
                                    node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                    node.__next = node.__prev = void 0;
                                    head$6 = tail$6 = next$6 = prev$6 = void 0;
                                    ;
                                    nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                }
                                ;
                                delete stack$5[offset$4 + 0];
                                delete stack$5[offset$4 + 1];
                                delete stack$5[offset$4 + 2];
                                delete stack$5[offset$4 + 3];
                                delete stack$5[offset$4 + 4];
                                delete stack$5[offset$4 + 5];
                                delete stack$5[offset$4 + 6];
                                delete stack$5[offset$4 + 7];
                                --depth$6;
                            }
                            nodeParent = invParent$3;
                            node = invChild$3;
                        }
                        nodeParent[key] = node = nodeValue;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var self$5 = node, node$3;
                        while (node$3 = node) {
                            if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$25, k$4, n$22;
                                while (depth$7 > -1) {
                                    if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                        i$25 = k$4 = -1;
                                        n$22 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = ++__GENERATION_GUID;
                                        if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$6[depth$7] = linkPaths$3 = new Array(n$22 + 1);
                                            linkPaths$3[++k$4] = ref$15;
                                        } else if (n$22 > 0) {
                                            stack$6[depth$7] = linkPaths$3 = new Array(n$22);
                                        }
                                        while (++i$25 < n$22) {
                                            if ((ref$15 = node[__REF + i$25]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                linkPaths$3[++k$4] = ref$15;
                                            }
                                        }
                                    }
                                    if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                        ++depth$7;
                                    } else {
                                        stack$6[depth$7--] = void 0;
                                    }
                                }
                                node = self$6;
                            }
                            node = node$3[__PARENT];
                        }
                        node = self$5;
                    }
                    // Only create a branch if:
                    //  1. The current key is a keyset.
                    //  2. The caller supplied a JSON root seed.
                    //  3. The path depth is past the bound path length.
                    //  4. The current node is a branch or reference.
                    if (isKeySet === true && jsonRoot != null && depth >= offset) {
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            var jsonKey$2 = void 0, jsonDepth$2 = depth;
                            do {
                                if (jsonKey$2 == null) {
                                    jsonKey$2 = keysets[jsonDepth$2];
                                }
                                if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                    if ((json = jsonParent[jsonKey$2]) == null) {
                                        json = jsonParent[jsonKey$2] = Object.create(null);
                                    }
                                    jsonParent = json;
                                    break;
                                }
                            } while (jsonDepth$2 >= offset - 2);
                            jsons[depth] = jsonParent;
                        }
                    }
                }
                node = node;
                depth = depth + 1;
                continue follow_path_set_14853;
            } while (true);
        node = node;
        var key$3;
        depth = depth - 1;
        unroll_14940:
            do {
                if (depth < 0) {
                    depth = (path.depth = 0) - 1;
                    break unroll_14940;
                }
                if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                    depth = path.depth = depth - 1;
                    continue unroll_14940;
                }
                if (Array.isArray(key$3)) {
                    if (++key$3.index === key$3.length) {
                        if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_14940;
                        }
                    } else {
                        depth = path.depth = depth;
                        break unroll_14940;
                    }
                }
                if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                    key$3[__OFFSET] = key$3.from;
                    depth = path.depth = depth - 1;
                    continue unroll_14940;
                }
                depth = path.depth = depth;
                break unroll_14940;
            } while (true);
        depth = depth;
    }
    return {
        'values': [{ json: jsons[offset - 1] }],
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathSetsAsJSON(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, value, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 2] = jsons;
    keysets[offset - 1] = offset - 1;
    for (var index = -1, count = pathValues.length; ++index < count;) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[index];
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_4970:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_5208:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_5208;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            nodeType = void 0;
                                            nodeValue = Object.create(null);
                                            nodeSize = node && node[$SIZE] || 0;
                                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                while (++i < nodeRefsLength) {
                                                    if ((ref$2 = node[__REF + i]) !== void 0) {
                                                        ref$2[__CONTEXT] = nodeValue;
                                                        nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                        node[__REF + i] = void 0;
                                                    }
                                                }
                                                nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                node[__REFS_LENGTH] = ref$2 = void 0;
                                                var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                        nodeParent,
                                                        invKey,
                                                        node
                                                    ], depth$2 = 0;
                                                while (depth$2 > -1) {
                                                    nodeParent = stack[offset$2 = depth$2 * 8];
                                                    invKey = stack[offset$2 + 1];
                                                    node = stack[offset$2 + 2];
                                                    if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                        childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                        isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                    }
                                                    if (isBranch === true) {
                                                        if ((keys = stack[offset$2 + 6]) === void 0) {
                                                            keys = stack[offset$2 + 6] = [];
                                                            index$2 = -1;
                                                            for (var childKey in node) {
                                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                            }
                                                        }
                                                        index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                        if (index$2 < keys.length) {
                                                            stack[offset$2 + 7] = index$2 + 1;
                                                            stack[offset$2 = ++depth$2 * 8] = node;
                                                            stack[offset$2 + 1] = invKey = keys[index$2];
                                                            stack[offset$2 + 2] = node[invKey];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                    if (ref$3 && Array.isArray(ref$3)) {
                                                        destination = ref$3[__CONTEXT];
                                                        if (destination) {
                                                            var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$2 <= n) {
                                                                destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                            }
                                                            destination[__REFS_LENGTH] = n;
                                                            ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                        }
                                                    }
                                                    if (node != null && typeof node === 'object') {
                                                        var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                        while (++i$3 < n$2) {
                                                            if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                            }
                                                        }
                                                        node[__REFS_LENGTH] = void 0;
                                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                                        node === head && (root$2.__head = root$2.__next = next);
                                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                                        node.__next = node.__prev = void 0;
                                                        head = tail = next = prev = void 0;
                                                        ;
                                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    }
                                                    ;
                                                    delete stack[offset$2 + 0];
                                                    delete stack[offset$2 + 1];
                                                    delete stack[offset$2 + 2];
                                                    delete stack[offset$2 + 3];
                                                    delete stack[offset$2 + 4];
                                                    delete stack[offset$2 + 5];
                                                    delete stack[offset$2 + 6];
                                                    delete stack[offset$2 + 7];
                                                    --depth$2;
                                                }
                                                nodeParent = invParent;
                                                node = invChild;
                                            }
                                            nodeParent[key$2] = node = nodeValue;
                                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                            var self = node, node$2;
                                            while (node$2 = node) {
                                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                    while (depth$3 > -1) {
                                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                            i$4 = k = -1;
                                                            n$3 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = ++__GENERATION_GUID;
                                                            if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                linkPaths[++k] = ref$5;
                                                            } else if (n$3 > 0) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3);
                                                            }
                                                            while (++i$4 < n$3) {
                                                                if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    linkPaths[++k] = ref$5;
                                                                }
                                                            }
                                                        }
                                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                            ++depth$3;
                                                        } else {
                                                            stack$2[depth$3--] = void 0;
                                                        }
                                                    }
                                                    node = self$2;
                                                }
                                                node = node$2[__PARENT];
                                            }
                                            node = self;
                                        }
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_5208;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_4970;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (key != null) {
                            var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                            nodeType = value && value[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                            newNode = value;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                delete nodeValue[$SIZE];
                                if (nodeType === SENTINEL) {
                                    nodeSize = 50 + (nodeValue.length || 1);
                                } else {
                                    nodeSize = nodeValue.length || 1;
                                }
                                newNode[$SIZE] = nodeSize;
                                nodeValue[__CONTAINER] = newNode;
                            } else if (nodeType === SENTINEL) {
                                newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            } else if (!(value != null && typeof value === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode = Object.create(null);
                                newNode[VALUE] = nodeValue;
                                newNode[$TYPE] = nodeType;
                                newNode[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode[$TYPE] = nodeType || GROUP;
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node !== newNode && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                while (++i$5 < nodeRefsLength$2) {
                                    if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                        ref$6[__CONTEXT] = newNode;
                                        newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                        node[__REF + i$5] = void 0;
                                    }
                                }
                                newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                node[__REFS_LENGTH] = ref$6 = void 0;
                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                        nodeParent,
                                        invKey$2,
                                        node
                                    ], depth$4 = 0;
                                while (depth$4 > -1) {
                                    nodeParent = stack$3[offset$3 = depth$4 * 8];
                                    invKey$2 = stack$3[offset$3 + 1];
                                    node = stack$3[offset$3 + 2];
                                    if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                        childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                        isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                    }
                                    if (isBranch$2 === true) {
                                        if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                            keys$2 = stack$3[offset$3 + 6] = [];
                                            index$3 = -1;
                                            for (var childKey$2 in node) {
                                                !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                            }
                                        }
                                        index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                        if (index$3 < keys$2.length) {
                                            stack$3[offset$3 + 7] = index$3 + 1;
                                            stack$3[offset$3 = ++depth$4 * 8] = node;
                                            stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                            stack$3[offset$3 + 2] = node[invKey$2];
                                            continue;
                                        }
                                    }
                                    var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$7 && Array.isArray(ref$7)) {
                                        destination$2 = ref$7[__CONTEXT];
                                        if (destination$2) {
                                            var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$6 <= n$4) {
                                                destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$4;
                                            ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                        while (++i$7 < n$5) {
                                            if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$3[offset$3 + 0];
                                    delete stack$3[offset$3 + 1];
                                    delete stack$3[offset$3 + 2];
                                    delete stack$3[offset$3 + 3];
                                    delete stack$3[offset$3 + 4];
                                    delete stack$3[offset$3 + 5];
                                    delete stack$3[offset$3 + 6];
                                    delete stack$3[offset$3 + 7];
                                    --depth$4;
                                }
                                nodeParent = invParent$2;
                                node = invChild$2;
                            }
                            nodeParent[key] = node = newNode;
                            nodeType = node && node[$TYPE] || void 0;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            sizeOffset = edgeSize - nodeSize;
                            var self$3 = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                    if (ref$9 && Array.isArray(ref$9)) {
                                        destination$3 = ref$9[__CONTEXT];
                                        if (destination$3) {
                                            var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                            while (++i$8 <= n$6) {
                                                destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                            }
                                            destination$3[__REFS_LENGTH] = n$6;
                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                        while (++i$9 < n$7) {
                                            if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                        next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                        prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                        node === head$3 && (root$4.__head = root$4.__next = next$3);
                                        node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                        node.__next = node.__prev = void 0;
                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                    while (depth$5 > -1) {
                                        if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                            i$10 = k$2 = -1;
                                            n$8 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                linkPaths$2[++k$2] = ref$11;
                                            } else if (n$8 > 0) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                            }
                                            while (++i$10 < n$8) {
                                                if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$2[++k$2] = ref$11;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                            ++depth$5;
                                        } else {
                                            stack$4[depth$5--] = void 0;
                                        }
                                    }
                                    node = self$4;
                                }
                            }
                            nodeParent = self$3;
                            node = child;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            hasValue = true;
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                if (node !== head$4) {
                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                    (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                    root$5.__head = root$5.__next = head$4 = node;
                                    head$4.__next = next$4;
                                    head$4.__prev = void 0;
                                }
                                if (tail$4 == null || node === tail$4) {
                                    root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                }
                                root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                            }
                            ;
                            var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                            while (++i$11 < n$9) {
                                copy[i$11] = requestedPath[i$11];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                            while (++i$12 < n$10) {
                                copy$2[i$12] = optimizedPath[i$12];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$13 = -1, n$11, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$11 = src.length);
                                                        while (++i$13 < n$11) {
                                                            dest[i$13] = src[i$13];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$14 = -1, n$12, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$12 = src$2.length);
                                                        while (++i$14 < n$12) {
                                                            dest$2[i$14] = src$2[i$14];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$15 = -1, n$13, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$13 = src$3.length);
                                                    while (++i$15 < n$13) {
                                                        dest$3[i$15] = src$3[i$15];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$16 = -1, n$14, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$14 = src$4.length);
                                                        while (++i$16 < n$14) {
                                                            dest$4[i$16] = src$4[i$16];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$17 = -1, n$15, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$15 = src$5.length);
                                                        while (++i$17 < n$15) {
                                                            dest$5[i$17] = src$5[i$17];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                if (node !== head$5) {
                                    next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                    prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                    root$6.__head = root$6.__next = head$5 = node;
                                    head$5.__next = next$5;
                                    head$5.__prev = void 0;
                                }
                                if (tail$5 == null || node === tail$5) {
                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                }
                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                            }
                            var pbv = Object.create(null), i$18 = -1, n$16 = requestedPath.length, val, copy$3 = new Array(n$16);
                            while (++i$18 < n$16) {
                                copy$3[i$18] = requestedPath[i$18];
                            }
                            var dest$6 = node, src$6 = dest$6, i$19 = -1, n$17, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$17 = src$6.length);
                                    while (++i$19 < n$17) {
                                        dest$6[i$19] = src$6[i$19];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$20 = -1, j = -1, l = 0, n$18 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                            while (++i$20 < n$18) {
                                req[i$20] = nodePath[i$20];
                            }
                            while (++j < k$3) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$20++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$18 + l + height - depth;
                            while (i$20 < m) {
                                req[i$20++] = path[l++];
                            }
                            req.length = i$20;
                            req.pathSetIndex = index;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$21 = -1, n$19 = optimizedPath.length, opt = new Array(n$19 + height - depth), j$2, x$8;
                            while (++i$21 < n$19) {
                                opt[i$21] = optimizedPath[i$21];
                            }
                            for (j$2 = depth, n$19 = height; j$2 < n$19;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$21++] = x$8;
                                }
                            }
                            opt.length = i$21;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_4970;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = isKeySet ? key : void 0;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$22 = -1, ref$12;
                                while (++i$22 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$22]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$22)] = ref$12;
                                        node[__REF + i$22] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$4 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$4 + 1];
                                    node = stack$5[offset$4 + 2];
                                    if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                            keys$3 = stack$5[offset$4 + 6] = [];
                                            index$4 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                            }
                                        }
                                        index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                        if (index$4 < keys$3.length) {
                                            stack$5[offset$4 + 7] = index$4 + 1;
                                            stack$5[offset$4 = ++depth$6 * 8] = node;
                                            stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                            stack$5[offset$4 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$23 = (ref$13[__REF_INDEX] || 0) - 1, n$20 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$23 <= n$20) {
                                                destination$4[__REF + i$23] = destination$4[__REF + (i$23 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$20;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$24 = -1, n$21 = node[__REFS_LENGTH] || 0;
                                        while (++i$24 < n$21) {
                                            if ((ref$14 = node[__REF + i$24]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$24] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$4 + 0];
                                    delete stack$5[offset$4 + 1];
                                    delete stack$5[offset$4 + 2];
                                    delete stack$5[offset$4 + 3];
                                    delete stack$5[offset$4 + 4];
                                    delete stack$5[offset$4 + 5];
                                    delete stack$5[offset$4 + 6];
                                    delete stack$5[offset$4 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$25, k$4, n$22;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$25 = k$4 = -1;
                                            n$22 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$22 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$22 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$22);
                                            }
                                            while (++i$25 < n$22) {
                                                if ((ref$15 = node[__REF + i$25]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                        // Only create a branch if:
                        //  1. The current key is a keyset.
                        //  2. The caller supplied a JSON root seed.
                        //  3. The path depth is past the bound path length.
                        //  4. The current node is a branch or reference.
                        if (isKeySet === true && jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        }
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_4970;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_5057:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_5057;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_5057;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_5057;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_5057;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_5057;
                    }
                    depth = path.depth = depth;
                    break unroll_5057;
                } while (true);
            depth = depth;
        }
        values && (values[index] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathSetsAsJSONG(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = true, path, value, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    jsons[offset - 1] = jsonRoot = values && values[0];
    for (var index = -1, count = pathValues.length; ++index < count;) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            json = jsonParent = jsons[depth - 1];
            depth = depth;
            follow_path_set_8259:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        /* Walk Link */
                        var key$2, isKeySet$2 = false;
                        linkHeight = linkPath.length;
                        node = nodeParent = nodeRoot;
                        json = jsonParent = jsonRoot;
                        linkDepth = linkDepth;
                        follow_link_8478:
                            do {
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                    if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                        nodeType = void 0;
                                        nodeValue = void 0;
                                        node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        requestedPath[requestedPath.length] = null;
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                        // Set up the hard-link so we don't have to do all
                                        // this work the next time we follow this linkPath.
                                        if (refContext === void 0) {
                                            var backRefs = node[__REFS_LENGTH] || 0;
                                            node[__REF + backRefs] = refContainer;
                                            node[__REFS_LENGTH] = backRefs + 1;
                                            // create a forward link
                                            refContainer[__REF_INDEX] = backRefs;
                                            refContainer[__CONTEXT] = node;
                                            refContainer = backRefs = void 0;
                                        }
                                    }
                                    node = node;
                                    break follow_link_8478;
                                }
                                key$2 = linkPath[linkDepth];
                                nodeParent = node;
                                jsonParent = json;
                                if (key$2 != null) {
                                    node = nodeParent && nodeParent[key$2];
                                    json = jsonParent && jsonParent[key$2];
                                    optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        nodeType = void 0;
                                        nodeValue = Object.create(null);
                                        nodeSize = node && node[$SIZE] || 0;
                                        if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                            while (++i < nodeRefsLength) {
                                                if ((ref$2 = node[__REF + i]) !== void 0) {
                                                    ref$2[__CONTEXT] = nodeValue;
                                                    nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                    node[__REF + i] = void 0;
                                                }
                                            }
                                            nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                            node[__REFS_LENGTH] = ref$2 = void 0;
                                            var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                    nodeParent,
                                                    invKey,
                                                    node
                                                ], depth$2 = 0;
                                            while (depth$2 > -1) {
                                                nodeParent = stack[offset$2 = depth$2 * 8];
                                                invKey = stack[offset$2 + 1];
                                                node = stack[offset$2 + 2];
                                                if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                    childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                    isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                }
                                                if (isBranch === true) {
                                                    if ((keys = stack[offset$2 + 6]) === void 0) {
                                                        keys = stack[offset$2 + 6] = [];
                                                        index$2 = -1;
                                                        for (var childKey in node) {
                                                            !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                        }
                                                    }
                                                    index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                    if (index$2 < keys.length) {
                                                        stack[offset$2 + 7] = index$2 + 1;
                                                        stack[offset$2 = ++depth$2 * 8] = node;
                                                        stack[offset$2 + 1] = invKey = keys[index$2];
                                                        stack[offset$2 + 2] = node[invKey];
                                                        continue;
                                                    }
                                                }
                                                var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                if (ref$3 && Array.isArray(ref$3)) {
                                                    destination = ref$3[__CONTEXT];
                                                    if (destination) {
                                                        var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$2 <= n) {
                                                            destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                        }
                                                        destination[__REFS_LENGTH] = n;
                                                        ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                    }
                                                }
                                                if (node != null && typeof node === 'object') {
                                                    var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                    while (++i$3 < n$2) {
                                                        if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                            ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                    next != null && typeof next === 'object' && (next.__prev = prev);
                                                    prev != null && typeof prev === 'object' && (prev.__next = next);
                                                    node === head && (root$2.__head = root$2.__next = next);
                                                    node === tail && (root$2.__tail = root$2.__prev = prev);
                                                    node.__next = node.__prev = void 0;
                                                    head = tail = next = prev = void 0;
                                                    ;
                                                    nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                }
                                                ;
                                                delete stack[offset$2 + 0];
                                                delete stack[offset$2 + 1];
                                                delete stack[offset$2 + 2];
                                                delete stack[offset$2 + 3];
                                                delete stack[offset$2 + 4];
                                                delete stack[offset$2 + 5];
                                                delete stack[offset$2 + 6];
                                                delete stack[offset$2 + 7];
                                                --depth$2;
                                            }
                                            nodeParent = invParent;
                                            node = invChild;
                                        }
                                        nodeParent[key$2] = node = nodeValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var self = node, node$2;
                                        while (node$2 = node) {
                                            if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                while (depth$3 > -1) {
                                                    if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                        i$4 = k = -1;
                                                        n$3 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = ++__GENERATION_GUID;
                                                        if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                            linkPaths[++k] = ref$5;
                                                        } else if (n$3 > 0) {
                                                            stack$2[depth$3] = linkPaths = new Array(n$3);
                                                        }
                                                        while (++i$4 < n$3) {
                                                            if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                linkPaths[++k] = ref$5;
                                                            }
                                                        }
                                                    }
                                                    if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                        ++depth$3;
                                                    } else {
                                                        stack$2[depth$3--] = void 0;
                                                    }
                                                }
                                                node = self$2;
                                            }
                                            node = node$2[__PARENT];
                                        }
                                        node = self;
                                    }
                                    // Create a JSONG branch, or insert the value if:
                                    //  1. The caller provided a JSONG root seed.
                                    //  2. The node is a branch or value, or materialized mode is on.
                                    if (jsonRoot != null) {
                                        if (node != null) {
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = node[$TYPE] === SENTINEL ? node[VALUE] : node;
                                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                if (boxed === true) {
                                                    var dest = node, src = dest, i$5 = -1, n$4, x;
                                                    if (dest != null && typeof dest === 'object') {
                                                        if (Array.isArray(src)) {
                                                            dest = new Array(n$4 = src.length);
                                                            while (++i$5 < n$4) {
                                                                dest[i$5] = src[i$5];
                                                            }
                                                        } else {
                                                            dest = Object.create(null);
                                                            for (x in src) {
                                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                            }
                                                        }
                                                    }
                                                    json = dest;
                                                } else {
                                                    var dest$2 = nodeValue, src$2 = dest$2, i$6 = -1, n$5, x$2;
                                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                                        if (Array.isArray(src$2)) {
                                                            dest$2 = new Array(n$5 = src$2.length);
                                                            while (++i$6 < n$5) {
                                                                dest$2[i$6] = src$2[i$6];
                                                            }
                                                        } else {
                                                            dest$2 = Object.create(null);
                                                            for (x$2 in src$2) {
                                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$2;
                                                }
                                            } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                                if ((json = jsonParent[key$2]) == null) {
                                                    json = Object.create(null);
                                                } else if (typeof json !== 'object') {
                                                    throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                                }
                                            } else if (materialized === true) {
                                                if (node == null) {
                                                    json = Object.create(null);
                                                    json[$TYPE] = SENTINEL;
                                                } else if (nodeValue === void 0) {
                                                    var dest$3 = node, src$3 = dest$3, i$7 = -1, n$6, x$3;
                                                    if (dest$3 != null && typeof dest$3 === 'object') {
                                                        if (Array.isArray(src$3)) {
                                                            dest$3 = new Array(n$6 = src$3.length);
                                                            while (++i$7 < n$6) {
                                                                dest$3[i$7] = src$3[i$7];
                                                            }
                                                        } else {
                                                            dest$3 = Object.create(null);
                                                            for (x$3 in src$3) {
                                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$3;
                                                } else {
                                                    var dest$4 = nodeValue, src$4 = dest$4, i$8 = -1, n$7, x$4;
                                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                                        if (Array.isArray(src$4)) {
                                                            dest$4 = new Array(n$7 = src$4.length);
                                                            while (++i$8 < n$7) {
                                                                dest$4[i$8] = src$4[i$8];
                                                            }
                                                        } else {
                                                            dest$4 = Object.create(null);
                                                            for (x$4 in src$4) {
                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$4;
                                                }
                                            } else if (boxed === true) {
                                                json = node;
                                            } else if (errorsAsValues === true || nodeType !== ERROR) {
                                                if (node != null) {
                                                    var dest$5 = nodeValue, src$5 = dest$5, i$9 = -1, n$8, x$5;
                                                    if (dest$5 != null && typeof dest$5 === 'object') {
                                                        if (Array.isArray(src$5)) {
                                                            dest$5 = new Array(n$8 = src$5.length);
                                                            while (++i$9 < n$8) {
                                                                dest$5[i$9] = src$5[i$9];
                                                            }
                                                        } else {
                                                            dest$5 = Object.create(null);
                                                            for (x$5 in src$5) {
                                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                            }
                                                        }
                                                    }
                                                    json = dest$5;
                                                } else {
                                                    json = void 0;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else if (materialized === true) {
                                            json = Object.create(null);
                                            json[$TYPE] = SENTINEL;
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[key$2] = json;
                                    }
                                }
                                node = node;
                                json = json;
                                linkDepth = linkDepth + 1;
                                continue follow_link_8478;
                            } while (true);
                        node = node;
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            json = json;
                            depth = depth;
                            continue follow_path_set_8259;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (key != null) {
                            var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                            nodeType = value && value[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                            newNode = value;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                delete nodeValue[$SIZE];
                                if (nodeType === SENTINEL) {
                                    nodeSize = 50 + (nodeValue.length || 1);
                                } else {
                                    nodeSize = nodeValue.length || 1;
                                }
                                newNode[$SIZE] = nodeSize;
                                nodeValue[__CONTAINER] = newNode;
                            } else if (nodeType === SENTINEL) {
                                newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            } else if (!(value != null && typeof value === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode = Object.create(null);
                                newNode[VALUE] = nodeValue;
                                newNode[$TYPE] = nodeType;
                                newNode[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode[$TYPE] = nodeType || GROUP;
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node !== newNode && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$10 = -1, ref$6;
                                while (++i$10 < nodeRefsLength$2) {
                                    if ((ref$6 = node[__REF + i$10]) !== void 0) {
                                        ref$6[__CONTEXT] = newNode;
                                        newNode[__REF + (destRefsLength$2 + i$10)] = ref$6;
                                        node[__REF + i$10] = void 0;
                                    }
                                }
                                newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                node[__REFS_LENGTH] = ref$6 = void 0;
                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                        nodeParent,
                                        invKey$2,
                                        node
                                    ], depth$4 = 0;
                                while (depth$4 > -1) {
                                    nodeParent = stack$3[offset$3 = depth$4 * 8];
                                    invKey$2 = stack$3[offset$3 + 1];
                                    node = stack$3[offset$3 + 2];
                                    if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                        childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                        isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                    }
                                    if (isBranch$2 === true) {
                                        if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                            keys$2 = stack$3[offset$3 + 6] = [];
                                            index$3 = -1;
                                            for (var childKey$2 in node) {
                                                !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                            }
                                        }
                                        index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                        if (index$3 < keys$2.length) {
                                            stack$3[offset$3 + 7] = index$3 + 1;
                                            stack$3[offset$3 = ++depth$4 * 8] = node;
                                            stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                            stack$3[offset$3 + 2] = node[invKey$2];
                                            continue;
                                        }
                                    }
                                    var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$7 && Array.isArray(ref$7)) {
                                        destination$2 = ref$7[__CONTEXT];
                                        if (destination$2) {
                                            var i$11 = (ref$7[__REF_INDEX] || 0) - 1, n$9 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$11 <= n$9) {
                                                destination$2[__REF + i$11] = destination$2[__REF + (i$11 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$9;
                                            ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$8, i$12 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                        while (++i$12 < n$10) {
                                            if ((ref$8 = node[__REF + i$12]) !== void 0) {
                                                ref$8[__CONTEXT] = node[__REF + i$12] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$3[offset$3 + 0];
                                    delete stack$3[offset$3 + 1];
                                    delete stack$3[offset$3 + 2];
                                    delete stack$3[offset$3 + 3];
                                    delete stack$3[offset$3 + 4];
                                    delete stack$3[offset$3 + 5];
                                    delete stack$3[offset$3 + 6];
                                    delete stack$3[offset$3 + 7];
                                    --depth$4;
                                }
                                nodeParent = invParent$2;
                                node = invChild$2;
                            }
                            nodeParent[key] = node = newNode;
                            nodeType = node && node[$TYPE] || void 0;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            sizeOffset = edgeSize - nodeSize;
                            var self$3 = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                    if (ref$9 && Array.isArray(ref$9)) {
                                        destination$3 = ref$9[__CONTEXT];
                                        if (destination$3) {
                                            var i$13 = (ref$9[__REF_INDEX] || 0) - 1, n$11 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                            while (++i$13 <= n$11) {
                                                destination$3[__REF + i$13] = destination$3[__REF + (i$13 + 1)];
                                            }
                                            destination$3[__REFS_LENGTH] = n$11;
                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$10, i$14 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                        while (++i$14 < n$12) {
                                            if ((ref$10 = node[__REF + i$14]) !== void 0) {
                                                ref$10[__CONTEXT] = node[__REF + i$14] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                        next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                        prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                        node === head$3 && (root$4.__head = root$4.__next = next$3);
                                        node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                        node.__next = node.__prev = void 0;
                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$15, k$2, n$13;
                                    while (depth$5 > -1) {
                                        if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                            i$15 = k$2 = -1;
                                            n$13 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$13 + 1);
                                                linkPaths$2[++k$2] = ref$11;
                                            } else if (n$13 > 0) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$13);
                                            }
                                            while (++i$15 < n$13) {
                                                if ((ref$11 = node[__REF + i$15]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$2[++k$2] = ref$11;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                            ++depth$5;
                                        } else {
                                            stack$4[depth$5--] = void 0;
                                        }
                                    }
                                    node = self$4;
                                }
                            }
                            nodeParent = self$3;
                            node = child;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            hasValue = true;
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                if (node !== head$4) {
                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                    (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                    root$5.__head = root$5.__next = head$4 = node;
                                    head$4.__next = next$4;
                                    head$4.__prev = void 0;
                                }
                                if (tail$4 == null || node === tail$4) {
                                    root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                }
                                root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                            }
                            ;
                            var i$16 = -1, n$14 = requestedPath.length, copy = new Array(n$14);
                            while (++i$16 < n$14) {
                                copy[i$16] = requestedPath[i$16];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$17 = -1, n$15 = optimizedPath.length, copy$2 = new Array(n$15);
                            while (++i$17 < n$15) {
                                copy$2[i$17] = optimizedPath[i$17];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Create a JSONG value if:
                            //  1. The caller provided a JSONG root seed.
                            //  2. The key isn't null.
                            //  3. The current node is a value or reference.
                            if (jsonRoot != null && key != null && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                if (materialized === true) {
                                    if (node == null) {
                                        json = Object.create(null);
                                        json[$TYPE] = SENTINEL;
                                    } else if (nodeValue === void 0) {
                                        var dest$6 = node, src$6 = dest$6, i$18 = -1, n$16, x$6;
                                        if (dest$6 != null && typeof dest$6 === 'object') {
                                            if (Array.isArray(src$6)) {
                                                dest$6 = new Array(n$16 = src$6.length);
                                                while (++i$18 < n$16) {
                                                    dest$6[i$18] = src$6[i$18];
                                                }
                                            } else {
                                                dest$6 = Object.create(null);
                                                for (x$6 in src$6) {
                                                    !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                                }
                                            }
                                        }
                                        json = dest$6;
                                    } else {
                                        var dest$7 = nodeValue, src$7 = dest$7, i$19 = -1, n$17, x$7;
                                        if (dest$7 != null && typeof dest$7 === 'object') {
                                            if (Array.isArray(src$7)) {
                                                dest$7 = new Array(n$17 = src$7.length);
                                                while (++i$19 < n$17) {
                                                    dest$7[i$19] = src$7[i$19];
                                                }
                                            } else {
                                                dest$7 = Object.create(null);
                                                for (x$7 in src$7) {
                                                    !(!(x$7[0] !== '_' || x$7[1] !== '_') || (x$7 === __SELF || x$7 === __PARENT || x$7 === __ROOT)) && (dest$7[x$7] = src$7[x$7]);
                                                }
                                            }
                                        }
                                        json = dest$7;
                                        if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                            json[$TYPE] = GROUP;
                                        }
                                    }
                                } else if (boxed === true) {
                                    var dest$8 = node, src$8 = dest$8, i$20 = -1, n$18, x$8;
                                    if (dest$8 != null && typeof dest$8 === 'object') {
                                        if (Array.isArray(src$8)) {
                                            dest$8 = new Array(n$18 = src$8.length);
                                            while (++i$20 < n$18) {
                                                dest$8[i$20] = src$8[i$20];
                                            }
                                        } else {
                                            dest$8 = Object.create(null);
                                            for (x$8 in src$8) {
                                                !(!(x$8[0] !== '_' || x$8[1] !== '_') || (x$8 === __SELF || x$8 === __PARENT || x$8 === __ROOT)) && (dest$8[x$8] = src$8[x$8]);
                                            }
                                        }
                                    }
                                    json = dest$8;
                                    if (nodeType === SENTINEL) {
                                        var dest$9 = nodeValue, src$9 = dest$9, i$21 = -1, n$19, x$9;
                                        if (dest$9 != null && typeof dest$9 === 'object') {
                                            if (Array.isArray(src$9)) {
                                                dest$9 = new Array(n$19 = src$9.length);
                                                while (++i$21 < n$19) {
                                                    dest$9[i$21] = src$9[i$21];
                                                }
                                            } else {
                                                dest$9 = Object.create(null);
                                                for (x$9 in src$9) {
                                                    !(!(x$9[0] !== '_' || x$9[1] !== '_') || (x$9 === __SELF || x$9 === __PARENT || x$9 === __ROOT)) && (dest$9[x$9] = src$9[x$9]);
                                                }
                                            }
                                        }
                                        json.value = dest$9;
                                    }
                                } else if (errorsAsValues === true || nodeType !== ERROR) {
                                    if (node != null) {
                                        var dest$10 = nodeValue, src$10 = dest$10, i$22 = -1, n$20, x$10;
                                        if (dest$10 != null && typeof dest$10 === 'object') {
                                            if (Array.isArray(src$10)) {
                                                dest$10 = new Array(n$20 = src$10.length);
                                                while (++i$22 < n$20) {
                                                    dest$10[i$22] = src$10[i$22];
                                                }
                                            } else {
                                                dest$10 = Object.create(null);
                                                for (x$10 in src$10) {
                                                    !(!(x$10[0] !== '_' || x$10[1] !== '_') || (x$10 === __SELF || x$10 === __PARENT || x$10 === __ROOT)) && (dest$10[x$10] = src$10[x$10]);
                                                }
                                            }
                                        }
                                        json = dest$10;
                                        if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                            json[$TYPE] = GROUP;
                                        }
                                    } else {
                                        json = void 0;
                                    }
                                } else {
                                    json = void 0;
                                }
                                jsonParent[key] = json;
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                if (node !== head$5) {
                                    next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                    prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                    root$6.__head = root$6.__next = head$5 = node;
                                    head$5.__next = next$5;
                                    head$5.__prev = void 0;
                                }
                                if (tail$5 == null || node === tail$5) {
                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                }
                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                            }
                            var pbv = Object.create(null), i$23 = -1, n$21 = requestedPath.length, val, copy$3 = new Array(n$21);
                            while (++i$23 < n$21) {
                                copy$3[i$23] = requestedPath[i$23];
                            }
                            var dest$11 = node, src$11 = dest$11, i$24 = -1, n$22, x$11;
                            if (dest$11 != null && typeof dest$11 === 'object') {
                                if (Array.isArray(src$11)) {
                                    dest$11 = new Array(n$22 = src$11.length);
                                    while (++i$24 < n$22) {
                                        dest$11[i$24] = src$11[i$24];
                                    }
                                } else {
                                    dest$11 = Object.create(null);
                                    for (x$11 in src$11) {
                                        !(!(x$11[0] !== '_' || x$11[1] !== '_') || (x$11 === __SELF || x$11 === __PARENT || x$11 === __ROOT)) && (dest$11[x$11] = src$11[x$11]);
                                    }
                                }
                            }
                            val = dest$11;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$25 = -1, j = -1, l = 0, n$23 = nodePath.length, k$3 = requestedPath.length, m, x$12, y, req = [];
                            while (++i$25 < n$23) {
                                req[i$25] = nodePath[i$25];
                            }
                            while (++j < k$3) {
                                if ((x$12 = requestedPath[j]) != null) {
                                    req[i$25++] = (y = path[l++]) != null && typeof y === 'object' && [x$12] || x$12;
                                }
                            }
                            m = n$23 + l + height - depth;
                            while (i$25 < m) {
                                req[i$25++] = path[l++];
                            }
                            req.length = i$25;
                            req.pathSetIndex = index;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$26 = -1, n$24 = optimizedPath.length, opt = new Array(n$24 + height - depth), j$2, x$13;
                            while (++i$26 < n$24) {
                                opt[i$26] = optimizedPath[i$26];
                            }
                            for (j$2 = depth, n$24 = height; j$2 < n$24;) {
                                if ((x$13 = path[j$2++]) != null) {
                                    opt[i$26++] = x$13;
                                }
                            }
                            opt.length = i$26;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_8259;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    jsons[depth - 1] = jsonParent = json;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        json = jsonParent && jsonParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$27 = -1, ref$12;
                                while (++i$27 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$27]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$27)] = ref$12;
                                        node[__REF + i$27] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$4 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$4 + 1];
                                    node = stack$5[offset$4 + 2];
                                    if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                            keys$3 = stack$5[offset$4 + 6] = [];
                                            index$4 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                            }
                                        }
                                        index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                        if (index$4 < keys$3.length) {
                                            stack$5[offset$4 + 7] = index$4 + 1;
                                            stack$5[offset$4 = ++depth$6 * 8] = node;
                                            stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                            stack$5[offset$4 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$28 = (ref$13[__REF_INDEX] || 0) - 1, n$25 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$28 <= n$25) {
                                                destination$4[__REF + i$28] = destination$4[__REF + (i$28 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$25;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$29 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                        while (++i$29 < n$26) {
                                            if ((ref$14 = node[__REF + i$29]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$29] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$4 + 0];
                                    delete stack$5[offset$4 + 1];
                                    delete stack$5[offset$4 + 2];
                                    delete stack$5[offset$4 + 3];
                                    delete stack$5[offset$4 + 4];
                                    delete stack$5[offset$4 + 5];
                                    delete stack$5[offset$4 + 6];
                                    delete stack$5[offset$4 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$30, k$4, n$27;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$30 = k$4 = -1;
                                            n$27 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$27 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$27 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$27);
                                            }
                                            while (++i$30 < n$27) {
                                                if ((ref$15 = node[__REF + i$30]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                        // Create a JSONG branch or insert a reference if:
                        //  1. The caller provided a JSONG root seed.
                        //  2. The current node is a branch or reference.
                        if (jsonRoot != null) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                if (boxed === true) {
                                    var dest$12 = node, src$12 = dest$12, i$31 = -1, n$28, x$14;
                                    if (dest$12 != null && typeof dest$12 === 'object') {
                                        if (Array.isArray(src$12)) {
                                            dest$12 = new Array(n$28 = src$12.length);
                                            while (++i$31 < n$28) {
                                                dest$12[i$31] = src$12[i$31];
                                            }
                                        } else {
                                            dest$12 = Object.create(null);
                                            for (x$14 in src$12) {
                                                !(!(x$14[0] !== '_' || x$14[1] !== '_') || (x$14 === __SELF || x$14 === __PARENT || x$14 === __ROOT)) && (dest$12[x$14] = src$12[x$14]);
                                            }
                                        }
                                    }
                                    json = dest$12;
                                } else {
                                    var dest$13 = nodeValue, src$13 = dest$13, i$32 = -1, n$29, x$15;
                                    if (dest$13 != null && typeof dest$13 === 'object') {
                                        if (Array.isArray(src$13)) {
                                            dest$13 = new Array(n$29 = src$13.length);
                                            while (++i$32 < n$29) {
                                                dest$13[i$32] = src$13[i$32];
                                            }
                                        } else {
                                            dest$13 = Object.create(null);
                                            for (x$15 in src$13) {
                                                !(!(x$15[0] !== '_' || x$15[1] !== '_') || (x$15 === __SELF || x$15 === __PARENT || x$15 === __ROOT)) && (dest$13[x$15] = src$13[x$15]);
                                            }
                                        }
                                    }
                                    json = dest$13;
                                }
                                jsonParent[key] = json;
                            } else if (nodeType === void 0 && (node != null && typeof node === 'object')) {
                                if ((json = jsonParent[key]) == null) {
                                    json = Object.create(null);
                                } else if (typeof json !== 'object') {
                                    throw new Error('Fatal Falcor Error: encountered value in branch position while building JSON Graph.');
                                }
                                jsonParent[key] = json;
                            }
                        }
                    }
                    node = node;
                    json = json;
                    depth = depth + 1;
                    continue follow_path_set_8259;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_8346:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_8346;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_8346;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_8346;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_8346;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_8346;
                    }
                    depth = path.depth = depth;
                    break unroll_8346;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && {
        jsong: jsons[offset - 1],
        paths: requestedPaths
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathSetsAsPathMap(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, value, hasValue = false, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], keysets = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, jsons = [], jsonRoot, jsonParent, json, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    keysets[offset - 1] = offset - 1;
    jsons[offset - 1] = jsonRoot = jsonParent = json = values && values[0];
    for (var index = -1, count = pathValues.length; ++index < count;) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        refs.length = 0;
        jsons.length = 0;
        keysets.length = 0;
        jsonParent = json = jsonRoot;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_11843:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_12080:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_12080;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            nodeType = void 0;
                                            nodeValue = Object.create(null);
                                            nodeSize = node && node[$SIZE] || 0;
                                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                while (++i < nodeRefsLength) {
                                                    if ((ref$2 = node[__REF + i]) !== void 0) {
                                                        ref$2[__CONTEXT] = nodeValue;
                                                        nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                        node[__REF + i] = void 0;
                                                    }
                                                }
                                                nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                node[__REFS_LENGTH] = ref$2 = void 0;
                                                var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                        nodeParent,
                                                        invKey,
                                                        node
                                                    ], depth$2 = 0;
                                                while (depth$2 > -1) {
                                                    nodeParent = stack[offset$2 = depth$2 * 8];
                                                    invKey = stack[offset$2 + 1];
                                                    node = stack[offset$2 + 2];
                                                    if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                        childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                        isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                    }
                                                    if (isBranch === true) {
                                                        if ((keys = stack[offset$2 + 6]) === void 0) {
                                                            keys = stack[offset$2 + 6] = [];
                                                            index$2 = -1;
                                                            for (var childKey in node) {
                                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                            }
                                                        }
                                                        index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                        if (index$2 < keys.length) {
                                                            stack[offset$2 + 7] = index$2 + 1;
                                                            stack[offset$2 = ++depth$2 * 8] = node;
                                                            stack[offset$2 + 1] = invKey = keys[index$2];
                                                            stack[offset$2 + 2] = node[invKey];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                    if (ref$3 && Array.isArray(ref$3)) {
                                                        destination = ref$3[__CONTEXT];
                                                        if (destination) {
                                                            var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$2 <= n) {
                                                                destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                            }
                                                            destination[__REFS_LENGTH] = n;
                                                            ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                        }
                                                    }
                                                    if (node != null && typeof node === 'object') {
                                                        var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                        while (++i$3 < n$2) {
                                                            if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                            }
                                                        }
                                                        node[__REFS_LENGTH] = void 0;
                                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                                        node === head && (root$2.__head = root$2.__next = next);
                                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                                        node.__next = node.__prev = void 0;
                                                        head = tail = next = prev = void 0;
                                                        ;
                                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    }
                                                    ;
                                                    delete stack[offset$2 + 0];
                                                    delete stack[offset$2 + 1];
                                                    delete stack[offset$2 + 2];
                                                    delete stack[offset$2 + 3];
                                                    delete stack[offset$2 + 4];
                                                    delete stack[offset$2 + 5];
                                                    delete stack[offset$2 + 6];
                                                    delete stack[offset$2 + 7];
                                                    --depth$2;
                                                }
                                                nodeParent = invParent;
                                                node = invChild;
                                            }
                                            nodeParent[key$2] = node = nodeValue;
                                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                            var self = node, node$2;
                                            while (node$2 = node) {
                                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                    while (depth$3 > -1) {
                                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                            i$4 = k = -1;
                                                            n$3 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = ++__GENERATION_GUID;
                                                            if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                linkPaths[++k] = ref$5;
                                                            } else if (n$3 > 0) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3);
                                                            }
                                                            while (++i$4 < n$3) {
                                                                if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    linkPaths[++k] = ref$5;
                                                                }
                                                            }
                                                        }
                                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                            ++depth$3;
                                                        } else {
                                                            stack$2[depth$3--] = void 0;
                                                        }
                                                    }
                                                    node = self$2;
                                                }
                                                node = node$2[__PARENT];
                                            }
                                            node = self;
                                        }
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_12080;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_11843;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (key != null) {
                            var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                            nodeType = value && value[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                            newNode = value;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                delete nodeValue[$SIZE];
                                if (nodeType === SENTINEL) {
                                    nodeSize = 50 + (nodeValue.length || 1);
                                } else {
                                    nodeSize = nodeValue.length || 1;
                                }
                                newNode[$SIZE] = nodeSize;
                                nodeValue[__CONTAINER] = newNode;
                            } else if (nodeType === SENTINEL) {
                                newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            } else if (!(value != null && typeof value === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode = Object.create(null);
                                newNode[VALUE] = nodeValue;
                                newNode[$TYPE] = nodeType;
                                newNode[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode[$TYPE] = nodeType || GROUP;
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node !== newNode && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                while (++i$5 < nodeRefsLength$2) {
                                    if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                        ref$6[__CONTEXT] = newNode;
                                        newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                        node[__REF + i$5] = void 0;
                                    }
                                }
                                newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                node[__REFS_LENGTH] = ref$6 = void 0;
                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                        nodeParent,
                                        invKey$2,
                                        node
                                    ], depth$4 = 0;
                                while (depth$4 > -1) {
                                    nodeParent = stack$3[offset$3 = depth$4 * 8];
                                    invKey$2 = stack$3[offset$3 + 1];
                                    node = stack$3[offset$3 + 2];
                                    if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                        childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                        isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                    }
                                    if (isBranch$2 === true) {
                                        if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                            keys$2 = stack$3[offset$3 + 6] = [];
                                            index$3 = -1;
                                            for (var childKey$2 in node) {
                                                !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                            }
                                        }
                                        index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                        if (index$3 < keys$2.length) {
                                            stack$3[offset$3 + 7] = index$3 + 1;
                                            stack$3[offset$3 = ++depth$4 * 8] = node;
                                            stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                            stack$3[offset$3 + 2] = node[invKey$2];
                                            continue;
                                        }
                                    }
                                    var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$7 && Array.isArray(ref$7)) {
                                        destination$2 = ref$7[__CONTEXT];
                                        if (destination$2) {
                                            var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$6 <= n$4) {
                                                destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$4;
                                            ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                        while (++i$7 < n$5) {
                                            if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$3[offset$3 + 0];
                                    delete stack$3[offset$3 + 1];
                                    delete stack$3[offset$3 + 2];
                                    delete stack$3[offset$3 + 3];
                                    delete stack$3[offset$3 + 4];
                                    delete stack$3[offset$3 + 5];
                                    delete stack$3[offset$3 + 6];
                                    delete stack$3[offset$3 + 7];
                                    --depth$4;
                                }
                                nodeParent = invParent$2;
                                node = invChild$2;
                            }
                            nodeParent[key] = node = newNode;
                            nodeType = node && node[$TYPE] || void 0;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            sizeOffset = edgeSize - nodeSize;
                            var self$3 = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                    if (ref$9 && Array.isArray(ref$9)) {
                                        destination$3 = ref$9[__CONTEXT];
                                        if (destination$3) {
                                            var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                            while (++i$8 <= n$6) {
                                                destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                            }
                                            destination$3[__REFS_LENGTH] = n$6;
                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                        while (++i$9 < n$7) {
                                            if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                        next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                        prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                        node === head$3 && (root$4.__head = root$4.__next = next$3);
                                        node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                        node.__next = node.__prev = void 0;
                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                    while (depth$5 > -1) {
                                        if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                            i$10 = k$2 = -1;
                                            n$8 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                linkPaths$2[++k$2] = ref$11;
                                            } else if (n$8 > 0) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                            }
                                            while (++i$10 < n$8) {
                                                if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$2[++k$2] = ref$11;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                            ++depth$5;
                                        } else {
                                            stack$4[depth$5--] = void 0;
                                        }
                                    }
                                    node = self$4;
                                }
                            }
                            nodeParent = self$3;
                            node = child;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            hasValue = true;
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                if (node !== head$4) {
                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                    (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                    root$5.__head = root$5.__next = head$4 = node;
                                    head$4.__next = next$4;
                                    head$4.__prev = void 0;
                                }
                                if (tail$4 == null || node === tail$4) {
                                    root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                }
                                root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                            }
                            ;
                            var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                            while (++i$11 < n$9) {
                                copy[i$11] = requestedPath[i$11];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                            while (++i$12 < n$10) {
                                copy$2[i$12] = optimizedPath[i$12];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            // Insert the JSON value if:
                            //  1. The caller supplied a JSON root seed.
                            //  2. The path depth is past the bound path length.
                            //  3. The current node is a leaf or reference.
                            if (jsonRoot != null && depth >= offset && (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                var jsonKey = void 0, jsonDepth = depth;
                                do {
                                    if (jsonKey == null) {
                                        jsonKey = keysets[jsonDepth];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth]) != null && jsonKey != null) {
                                        if (materialized === true) {
                                            if (node == null) {
                                                json = Object.create(null);
                                                json[$TYPE] = SENTINEL;
                                            } else if (nodeValue === void 0) {
                                                var dest = node, src = dest, i$13 = -1, n$11, x;
                                                if (dest != null && typeof dest === 'object') {
                                                    if (Array.isArray(src)) {
                                                        dest = new Array(n$11 = src.length);
                                                        while (++i$13 < n$11) {
                                                            dest[i$13] = src[i$13];
                                                        }
                                                    } else {
                                                        dest = Object.create(null);
                                                        for (x in src) {
                                                            !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                                        }
                                                    }
                                                }
                                                json = dest;
                                            } else {
                                                var dest$2 = nodeValue, src$2 = dest$2, i$14 = -1, n$12, x$2;
                                                if (dest$2 != null && typeof dest$2 === 'object') {
                                                    if (Array.isArray(src$2)) {
                                                        dest$2 = new Array(n$12 = src$2.length);
                                                        while (++i$14 < n$12) {
                                                            dest$2[i$14] = src$2[i$14];
                                                        }
                                                    } else {
                                                        dest$2 = Object.create(null);
                                                        for (x$2 in src$2) {
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                }
                                                json = dest$2;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            }
                                        } else if (boxed === true) {
                                            var dest$3 = node, src$3 = dest$3, i$15 = -1, n$13, x$3;
                                            if (dest$3 != null && typeof dest$3 === 'object') {
                                                if (Array.isArray(src$3)) {
                                                    dest$3 = new Array(n$13 = src$3.length);
                                                    while (++i$15 < n$13) {
                                                        dest$3[i$15] = src$3[i$15];
                                                    }
                                                } else {
                                                    dest$3 = Object.create(null);
                                                    for (x$3 in src$3) {
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                            }
                                            json = dest$3;
                                            if (nodeType === SENTINEL) {
                                                var dest$4 = nodeValue, src$4 = dest$4, i$16 = -1, n$14, x$4;
                                                if (dest$4 != null && typeof dest$4 === 'object') {
                                                    if (Array.isArray(src$4)) {
                                                        dest$4 = new Array(n$14 = src$4.length);
                                                        while (++i$16 < n$14) {
                                                            dest$4[i$16] = src$4[i$16];
                                                        }
                                                    } else {
                                                        dest$4 = Object.create(null);
                                                        for (x$4 in src$4) {
                                                            !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                                        }
                                                    }
                                                }
                                                json.value = dest$4;
                                            }
                                        } else if (errorsAsValues === true || nodeType !== ERROR) {
                                            if (node != null) {
                                                var dest$5 = nodeValue, src$5 = dest$5, i$17 = -1, n$15, x$5;
                                                if (dest$5 != null && typeof dest$5 === 'object') {
                                                    if (Array.isArray(src$5)) {
                                                        dest$5 = new Array(n$15 = src$5.length);
                                                        while (++i$17 < n$15) {
                                                            dest$5[i$17] = src$5[i$17];
                                                        }
                                                    } else {
                                                        dest$5 = Object.create(null);
                                                        for (x$5 in src$5) {
                                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                                        }
                                                    }
                                                }
                                                json = dest$5;
                                                if (json != null && typeof json === 'object' && !Array.isArray(json)) {
                                                    json[$TYPE] = GROUP;
                                                }
                                            } else {
                                                json = void 0;
                                            }
                                        } else {
                                            json = void 0;
                                        }
                                        jsonParent[jsonKey] = json;
                                        break;
                                    }
                                } while (jsonDepth >= offset - 2);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                if (node !== head$5) {
                                    next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                    prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                    root$6.__head = root$6.__next = head$5 = node;
                                    head$5.__next = next$5;
                                    head$5.__prev = void 0;
                                }
                                if (tail$5 == null || node === tail$5) {
                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                }
                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                            }
                            var pbv = Object.create(null), i$18 = -1, n$16 = requestedPath.length, val, copy$3 = new Array(n$16);
                            while (++i$18 < n$16) {
                                copy$3[i$18] = requestedPath[i$18];
                            }
                            var dest$6 = node, src$6 = dest$6, i$19 = -1, n$17, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$17 = src$6.length);
                                    while (++i$19 < n$17) {
                                        dest$6[i$19] = src$6[i$19];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val = dest$6;
                            pbv.path = copy$3;
                            pbv.value = val;
                            errors[errors.length] = pbv;
                        } else if (refreshing === true || node == null) {
                            var i$20 = -1, j = -1, l = 0, n$18 = nodePath.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                            while (++i$20 < n$18) {
                                req[i$20] = nodePath[i$20];
                            }
                            while (++j < k$3) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$20++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$18 + l + height - depth;
                            while (i$20 < m) {
                                req[i$20++] = path[l++];
                            }
                            req.length = i$20;
                            req.pathSetIndex = index;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$21 = -1, n$19 = optimizedPath.length, opt = new Array(n$19 + height - depth), j$2, x$8;
                            while (++i$21 < n$19) {
                                opt[i$21] = optimizedPath[i$21];
                            }
                            for (j$2 = depth, n$19 = height; j$2 < n$19;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$21++] = x$8;
                                }
                            }
                            opt.length = i$21;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_11843;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    keysets[keysets.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$22 = -1, ref$12;
                                while (++i$22 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$22]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$22)] = ref$12;
                                        node[__REF + i$22] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$4 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$4 + 1];
                                    node = stack$5[offset$4 + 2];
                                    if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                            keys$3 = stack$5[offset$4 + 6] = [];
                                            index$4 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                            }
                                        }
                                        index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                        if (index$4 < keys$3.length) {
                                            stack$5[offset$4 + 7] = index$4 + 1;
                                            stack$5[offset$4 = ++depth$6 * 8] = node;
                                            stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                            stack$5[offset$4 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$23 = (ref$13[__REF_INDEX] || 0) - 1, n$20 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$23 <= n$20) {
                                                destination$4[__REF + i$23] = destination$4[__REF + (i$23 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$20;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$24 = -1, n$21 = node[__REFS_LENGTH] || 0;
                                        while (++i$24 < n$21) {
                                            if ((ref$14 = node[__REF + i$24]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$24] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$4 + 0];
                                    delete stack$5[offset$4 + 1];
                                    delete stack$5[offset$4 + 2];
                                    delete stack$5[offset$4 + 3];
                                    delete stack$5[offset$4 + 4];
                                    delete stack$5[offset$4 + 5];
                                    delete stack$5[offset$4 + 6];
                                    delete stack$5[offset$4 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$25, k$4, n$22;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$25 = k$4 = -1;
                                            n$22 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$22 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$22 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$22);
                                            }
                                            while (++i$25 < n$22) {
                                                if ((ref$15 = node[__REF + i$25]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                        // Only create a branch if:
                        //  1. The caller supplied a JSON root seed.
                        //  2. The path depth is past the bound path length.
                        //  3. The current node is a branch or reference.
                        if (jsonRoot != null && depth >= offset) {
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            if (!nodeType && (node != null && typeof node === 'object') || (!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                var jsonKey$2 = void 0, jsonDepth$2 = depth;
                                do {
                                    if (jsonKey$2 == null) {
                                        jsonKey$2 = keysets[jsonDepth$2];
                                    }
                                    if ((jsonParent = jsons[--jsonDepth$2]) != null && jsonKey$2 != null) {
                                        if ((json = jsonParent[jsonKey$2]) == null) {
                                            json = jsonParent[jsonKey$2] = Object.create(null);
                                        } else if (typeof json !== 'object') {
                                            throw new Error('Fatal Falcor Error: encountered value in branch position while building Path Map.');
                                        }
                                        json[__KEY] = jsonKey$2;
                                        json[__GENERATION] = node[__GENERATION] || 0;
                                        jsonParent = json;
                                        break;
                                    }
                                } while (jsonDepth$2 >= offset - 2);
                                jsons[depth] = jsonParent;
                            }
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_11843;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_11930:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_11930;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_11930;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_11930;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_11930;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_11930;
                    }
                    depth = path.depth = depth;
                    break unroll_11930;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = !(hasValue = !hasValue) && { json: jsons[offset - 1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathSetsAsValues(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var onNext;
    if (Array.isArray(values)) {
        values.length = 0;
    } else {
        onNext = values;
        values = undefined;
    }
    var root = model._root, expired = root.expired, boxed = model._boxed || false, refreshing = model._refreshing || false, materialized = model._materialized || false;
    errorSelector = errorSelector || model._errorSelector;
    var errorsAsValues = model._errorsAsValues || false, path, value, depth = 0, linkDepth = 0, height = 0, linkHeight = 0, linkPath, linkIndex = 0, requestedPath = [], requestedPaths = [], requestedMissingPaths = [], optimizedPath = [], optimizedPaths = [], optimizedMissingPaths = [], errors = [], refs = [], nodeLoc = getBoundPath(model), nodePath = nodeLoc.path, nodes = [], nodeRoot = model._cache, nodeParent = nodeLoc.value, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var offset = boundPath && boundPath.length || 0;
    refs[-1] = nodePath;
    nodes[-1] = nodeParent;
    for (var index = -1, count = pathValues.length; ++index < count;) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        refs.length = 0;
        while (depth > -1) {
            var ref = linkIndex = depth;
            refs.length = depth + 1;
            while (linkIndex >= -1) {
                if (!!(ref = refs[linkIndex])) {
                    ~linkIndex || ++linkIndex;
                    linkHeight = ref.length;
                    var i = 0, j = 0;
                    while (i < linkHeight) {
                        optimizedPath[j++] = ref[i++];
                    }
                    i = linkIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    requestedPath.length = i;
                    optimizedPath.length = j;
                    break;
                }
                --linkIndex;
            }
            /* Walk Path Set */
            var key = void 0, isKeySet = false;
            height = path.length;
            node = nodeParent = nodes[depth - 1];
            depth = depth;
            follow_path_set_14822:
                do {
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    if (depth < height && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue))) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        linkPath = nodeValue;
                        linkIndex = depth;
                        refs[linkIndex] = linkPath;
                        optimizedPath.length = 0;
                        linkDepth = 0;
                        linkHeight = 0;
                        var location, container = linkPath[__CONTAINER] || linkPath;
                        if ((location = container[__CONTEXT]) !== void 0) {
                            node = location;
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            linkHeight = linkPath.length;
                            while (linkDepth < linkHeight) {
                                optimizedPath[linkDepth] = linkPath[linkDepth++];
                            }
                            optimizedPath.length = linkDepth;
                        } else {
                            /* Walk Link */
                            var key$2, isKeySet$2 = false;
                            linkHeight = linkPath.length;
                            node = nodeParent = nodeRoot;
                            linkDepth = linkDepth;
                            follow_link_15057:
                                do {
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    if (linkDepth === linkHeight || (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue))) {
                                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                                            nodeType = void 0;
                                            nodeValue = void 0;
                                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            requestedPath[requestedPath.length] = null;
                                        }
                                        if (node != null && typeof node === 'object') {
                                            var refContainer = linkPath[__CONTAINER] || linkPath, refContext = refContainer[__CONTEXT];
                                            // Set up the hard-link so we don't have to do all
                                            // this work the next time we follow this linkPath.
                                            if (refContext === void 0) {
                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                node[__REF + backRefs] = refContainer;
                                                node[__REFS_LENGTH] = backRefs + 1;
                                                // create a forward link
                                                refContainer[__REF_INDEX] = backRefs;
                                                refContainer[__CONTEXT] = node;
                                                refContainer = backRefs = void 0;
                                            }
                                        }
                                        node = node;
                                        break follow_link_15057;
                                    }
                                    key$2 = linkPath[linkDepth];
                                    nodeParent = node;
                                    if (key$2 != null) {
                                        node = nodeParent && nodeParent[key$2];
                                        optimizedPath[optimizedPath.length = linkDepth] = key$2;
                                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                            nodeType = void 0;
                                            nodeValue = Object.create(null);
                                            nodeSize = node && node[$SIZE] || 0;
                                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                                var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = nodeValue[__REFS_LENGTH] || 0, i = -1, ref$2;
                                                while (++i < nodeRefsLength) {
                                                    if ((ref$2 = node[__REF + i]) !== void 0) {
                                                        ref$2[__CONTEXT] = nodeValue;
                                                        nodeValue[__REF + (destRefsLength + i)] = ref$2;
                                                        node[__REF + i] = void 0;
                                                    }
                                                }
                                                nodeValue[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                                                node[__REFS_LENGTH] = ref$2 = void 0;
                                                var invParent = nodeParent, invChild = node, invKey = key$2, keys, index$2, offset$2, childType, childValue, isBranch, stack = [
                                                        nodeParent,
                                                        invKey,
                                                        node
                                                    ], depth$2 = 0;
                                                while (depth$2 > -1) {
                                                    nodeParent = stack[offset$2 = depth$2 * 8];
                                                    invKey = stack[offset$2 + 1];
                                                    node = stack[offset$2 + 2];
                                                    if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                                                        childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch = stack[offset$2 + 5]) === void 0) {
                                                        isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                                    }
                                                    if (isBranch === true) {
                                                        if ((keys = stack[offset$2 + 6]) === void 0) {
                                                            keys = stack[offset$2 + 6] = [];
                                                            index$2 = -1;
                                                            for (var childKey in node) {
                                                                !(!(childKey[0] !== '_' || childKey[1] !== '_') || (childKey === __SELF || childKey === __PARENT || childKey === __ROOT) || childKey[0] === '$') && (keys[++index$2] = childKey);
                                                            }
                                                        }
                                                        index$2 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                                                        if (index$2 < keys.length) {
                                                            stack[offset$2 + 7] = index$2 + 1;
                                                            stack[offset$2 = ++depth$2 * 8] = node;
                                                            stack[offset$2 + 1] = invKey = keys[index$2];
                                                            stack[offset$2 + 2] = node[invKey];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                                    if (ref$3 && Array.isArray(ref$3)) {
                                                        destination = ref$3[__CONTEXT];
                                                        if (destination) {
                                                            var i$2 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$2 <= n) {
                                                                destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                                            }
                                                            destination[__REFS_LENGTH] = n;
                                                            ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                                        }
                                                    }
                                                    if (node != null && typeof node === 'object') {
                                                        var ref$4, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                                        while (++i$3 < n$2) {
                                                            if ((ref$4 = node[__REF + i$3]) !== void 0) {
                                                                ref$4[__CONTEXT] = node[__REF + i$3] = void 0;
                                                            }
                                                        }
                                                        node[__REFS_LENGTH] = void 0;
                                                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                                        next != null && typeof next === 'object' && (next.__prev = prev);
                                                        prev != null && typeof prev === 'object' && (prev.__next = next);
                                                        node === head && (root$2.__head = root$2.__next = next);
                                                        node === tail && (root$2.__tail = root$2.__prev = prev);
                                                        node.__next = node.__prev = void 0;
                                                        head = tail = next = prev = void 0;
                                                        ;
                                                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    }
                                                    ;
                                                    delete stack[offset$2 + 0];
                                                    delete stack[offset$2 + 1];
                                                    delete stack[offset$2 + 2];
                                                    delete stack[offset$2 + 3];
                                                    delete stack[offset$2 + 4];
                                                    delete stack[offset$2 + 5];
                                                    delete stack[offset$2 + 6];
                                                    delete stack[offset$2 + 7];
                                                    --depth$2;
                                                }
                                                nodeParent = invParent;
                                                node = invChild;
                                            }
                                            nodeParent[key$2] = node = nodeValue;
                                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                            var self = node, node$2;
                                            while (node$2 = node) {
                                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var self$2 = node, stack$2 = [], depth$3 = 0, linkPaths, ref$5, i$4, k, n$3;
                                                    while (depth$3 > -1) {
                                                        if ((linkPaths = stack$2[depth$3]) === void 0) {
                                                            i$4 = k = -1;
                                                            n$3 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = ++__GENERATION_GUID;
                                                            if ((ref$5 = node[__PARENT]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3 + 1);
                                                                linkPaths[++k] = ref$5;
                                                            } else if (n$3 > 0) {
                                                                stack$2[depth$3] = linkPaths = new Array(n$3);
                                                            }
                                                            while (++i$4 < n$3) {
                                                                if ((ref$5 = node[__REF + i$4]) !== void 0 && ref$5[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    linkPaths[++k] = ref$5;
                                                                }
                                                            }
                                                        }
                                                        if ((node = linkPaths && linkPaths.pop()) !== void 0) {
                                                            ++depth$3;
                                                        } else {
                                                            stack$2[depth$3--] = void 0;
                                                        }
                                                    }
                                                    node = self$2;
                                                }
                                                node = node$2[__PARENT];
                                            }
                                            node = self;
                                        }
                                    }
                                    node = node;
                                    linkDepth = linkDepth + 1;
                                    continue follow_link_15057;
                                } while (true);
                            node = node;
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            key = null;
                            node = node;
                            depth = depth;
                            continue follow_path_set_14822;
                        }
                    } else if (depth === height || !!nodeType || !(node != null && typeof node === 'object')) {
                        if ((nodeExpires = (node && node[$EXPIRES]) != null) && (nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < now())) || node != null && node[__INVALIDATED] === true) {
                            nodeType = void 0;
                            nodeValue = void 0;
                            node = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if (key != null) {
                            var newNode, sizeOffset, edgeSize = node && node[$SIZE] || 0;
                            nodeType = value && value[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                            newNode = value;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                delete nodeValue[$SIZE];
                                if (nodeType === SENTINEL) {
                                    nodeSize = 50 + (nodeValue.length || 1);
                                } else {
                                    nodeSize = nodeValue.length || 1;
                                }
                                newNode[$SIZE] = nodeSize;
                                nodeValue[__CONTAINER] = newNode;
                            } else if (nodeType === SENTINEL) {
                                newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            } else if (!(value != null && typeof value === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode = Object.create(null);
                                newNode[VALUE] = nodeValue;
                                newNode[$TYPE] = nodeType;
                                newNode[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode[$TYPE] = nodeType || GROUP;
                                newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node !== newNode && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = newNode[__REFS_LENGTH] || 0, i$5 = -1, ref$6;
                                while (++i$5 < nodeRefsLength$2) {
                                    if ((ref$6 = node[__REF + i$5]) !== void 0) {
                                        ref$6[__CONTEXT] = newNode;
                                        newNode[__REF + (destRefsLength$2 + i$5)] = ref$6;
                                        node[__REF + i$5] = void 0;
                                    }
                                }
                                newNode[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                node[__REFS_LENGTH] = ref$6 = void 0;
                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                        nodeParent,
                                        invKey$2,
                                        node
                                    ], depth$4 = 0;
                                while (depth$4 > -1) {
                                    nodeParent = stack$3[offset$3 = depth$4 * 8];
                                    invKey$2 = stack$3[offset$3 + 1];
                                    node = stack$3[offset$3 + 2];
                                    if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                        childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                        isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                    }
                                    if (isBranch$2 === true) {
                                        if ((keys$2 = stack$3[offset$3 + 6]) === void 0) {
                                            keys$2 = stack$3[offset$3 + 6] = [];
                                            index$3 = -1;
                                            for (var childKey$2 in node) {
                                                !(!(childKey$2[0] !== '_' || childKey$2[1] !== '_') || (childKey$2 === __SELF || childKey$2 === __PARENT || childKey$2 === __ROOT) || childKey$2[0] === '$') && (keys$2[++index$3] = childKey$2);
                                            }
                                        }
                                        index$3 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                        if (index$3 < keys$2.length) {
                                            stack$3[offset$3 + 7] = index$3 + 1;
                                            stack$3[offset$3 = ++depth$4 * 8] = node;
                                            stack$3[offset$3 + 1] = invKey$2 = keys$2[index$3];
                                            stack$3[offset$3 + 2] = node[invKey$2];
                                            continue;
                                        }
                                    }
                                    var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                    if (ref$7 && Array.isArray(ref$7)) {
                                        destination$2 = ref$7[__CONTEXT];
                                        if (destination$2) {
                                            var i$6 = (ref$7[__REF_INDEX] || 0) - 1, n$4 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                            while (++i$6 <= n$4) {
                                                destination$2[__REF + i$6] = destination$2[__REF + (i$6 + 1)];
                                            }
                                            destination$2[__REFS_LENGTH] = n$4;
                                            ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$2 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$8, i$7 = -1, n$5 = node[__REFS_LENGTH] || 0;
                                        while (++i$7 < n$5) {
                                            if ((ref$8 = node[__REF + i$7]) !== void 0) {
                                                ref$8[__CONTEXT] = node[__REF + i$7] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                        next$2 != null && typeof next$2 === 'object' && (next$2.__prev = prev$2);
                                        prev$2 != null && typeof prev$2 === 'object' && (prev$2.__next = next$2);
                                        node === head$2 && (root$3.__head = root$3.__next = next$2);
                                        node === tail$2 && (root$3.__tail = root$3.__prev = prev$2);
                                        node.__next = node.__prev = void 0;
                                        head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        ;
                                        nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$3[offset$3 + 0];
                                    delete stack$3[offset$3 + 1];
                                    delete stack$3[offset$3 + 2];
                                    delete stack$3[offset$3 + 3];
                                    delete stack$3[offset$3 + 4];
                                    delete stack$3[offset$3 + 5];
                                    delete stack$3[offset$3 + 6];
                                    delete stack$3[offset$3 + 7];
                                    --depth$4;
                                }
                                nodeParent = invParent$2;
                                node = invChild$2;
                            }
                            nodeParent[key] = node = newNode;
                            nodeType = node && node[$TYPE] || void 0;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            sizeOffset = edgeSize - nodeSize;
                            var self$3 = nodeParent, child = node;
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - sizeOffset) <= 0 && nodeParent) {
                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                    if (ref$9 && Array.isArray(ref$9)) {
                                        destination$3 = ref$9[__CONTEXT];
                                        if (destination$3) {
                                            var i$8 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                            while (++i$8 <= n$6) {
                                                destination$3[__REF + i$8] = destination$3[__REF + (i$8 + 1)];
                                            }
                                            destination$3[__REFS_LENGTH] = n$6;
                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$10, i$9 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                        while (++i$9 < n$7) {
                                            if ((ref$10 = node[__REF + i$9]) !== void 0) {
                                                ref$10[__CONTEXT] = node[__REF + i$9] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                        next$3 != null && typeof next$3 === 'object' && (next$3.__prev = prev$3);
                                        prev$3 != null && typeof prev$3 === 'object' && (prev$3.__next = next$3);
                                        node === head$3 && (root$4.__head = root$4.__next = next$3);
                                        node === tail$3 && (root$4.__tail = root$4.__prev = prev$3);
                                        node.__next = node.__prev = void 0;
                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        ;
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$4 = node, stack$4 = [], depth$5 = 0, linkPaths$2, ref$11, i$10, k$2, n$8;
                                    while (depth$5 > -1) {
                                        if ((linkPaths$2 = stack$4[depth$5]) === void 0) {
                                            i$10 = k$2 = -1;
                                            n$8 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$11 = node[__PARENT]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8 + 1);
                                                linkPaths$2[++k$2] = ref$11;
                                            } else if (n$8 > 0) {
                                                stack$4[depth$5] = linkPaths$2 = new Array(n$8);
                                            }
                                            while (++i$10 < n$8) {
                                                if ((ref$11 = node[__REF + i$10]) !== void 0 && ref$11[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$2[++k$2] = ref$11;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$2 && linkPaths$2.pop()) !== void 0) {
                                            ++depth$5;
                                        } else {
                                            stack$4[depth$5--] = void 0;
                                        }
                                    }
                                    node = self$4;
                                }
                            }
                            nodeParent = self$3;
                            node = child;
                        }
                        if (materialized === true || nodeValue !== void 0 && (errorsAsValues === true || nodeType !== ERROR)) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                if (node !== head$4) {
                                    next$4 != null && typeof next$4 === 'object' && (next$4.__prev = prev$4);
                                    prev$4 != null && typeof prev$4 === 'object' && (prev$4.__next = next$4);
                                    (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                    root$5.__head = root$5.__next = head$4 = node;
                                    head$4.__next = next$4;
                                    head$4.__prev = void 0;
                                }
                                if (tail$4 == null || node === tail$4) {
                                    root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                }
                                root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                            }
                            ;
                            var i$11 = -1, n$9 = requestedPath.length, copy = new Array(n$9);
                            while (++i$11 < n$9) {
                                copy[i$11] = requestedPath[i$11];
                            }
                            requestedPaths[requestedPaths.length] = copy;
                            var i$12 = -1, n$10 = optimizedPath.length, copy$2 = new Array(n$10);
                            while (++i$12 < n$10) {
                                copy$2[i$12] = optimizedPath[i$12];
                            }
                            optimizedPaths[optimizedPaths.length] = copy$2;
                            var pbv = Object.create(null), i$13 = -1, n$11 = requestedPath.length, val, copy$3 = new Array(n$11);
                            while (++i$13 < n$11) {
                                copy$3[i$13] = requestedPath[i$13];
                            }
                            if (materialized === true) {
                                if (node == null) {
                                    val = Object.create(null);
                                    val[$TYPE] = SENTINEL;
                                } else if (nodeValue === void 0) {
                                    var dest = node, src = dest, i$14 = -1, n$12, x;
                                    if (dest != null && typeof dest === 'object') {
                                        if (Array.isArray(src)) {
                                            dest = new Array(n$12 = src.length);
                                            while (++i$14 < n$12) {
                                                dest[i$14] = src[i$14];
                                            }
                                        } else {
                                            dest = Object.create(null);
                                            for (x in src) {
                                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (dest[x] = src[x]);
                                            }
                                        }
                                    }
                                    val = dest;
                                } else {
                                    var dest$2 = nodeValue, src$2 = dest$2, i$15 = -1, n$13, x$2;
                                    if (dest$2 != null && typeof dest$2 === 'object') {
                                        if (Array.isArray(src$2)) {
                                            dest$2 = new Array(n$13 = src$2.length);
                                            while (++i$15 < n$13) {
                                                dest$2[i$15] = src$2[i$15];
                                            }
                                        } else {
                                            dest$2 = Object.create(null);
                                            for (x$2 in src$2) {
                                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (dest$2[x$2] = src$2[x$2]);
                                            }
                                        }
                                    }
                                    val = dest$2;
                                }
                            } else if (boxed === true) {
                                var dest$3 = node, src$3 = dest$3, i$16 = -1, n$14, x$3;
                                if (dest$3 != null && typeof dest$3 === 'object') {
                                    if (Array.isArray(src$3)) {
                                        dest$3 = new Array(n$14 = src$3.length);
                                        while (++i$16 < n$14) {
                                            dest$3[i$16] = src$3[i$16];
                                        }
                                    } else {
                                        dest$3 = Object.create(null);
                                        for (x$3 in src$3) {
                                            !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (dest$3[x$3] = src$3[x$3]);
                                        }
                                    }
                                }
                                val = dest$3;
                                if (nodeType === SENTINEL) {
                                    var dest$4 = nodeValue, src$4 = dest$4, i$17 = -1, n$15, x$4;
                                    if (dest$4 != null && typeof dest$4 === 'object') {
                                        if (Array.isArray(src$4)) {
                                            dest$4 = new Array(n$15 = src$4.length);
                                            while (++i$17 < n$15) {
                                                dest$4[i$17] = src$4[i$17];
                                            }
                                        } else {
                                            dest$4 = Object.create(null);
                                            for (x$4 in src$4) {
                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (dest$4[x$4] = src$4[x$4]);
                                            }
                                        }
                                    }
                                    val.value = dest$4;
                                }
                            } else {
                                var dest$5 = nodeValue, src$5 = dest$5, i$18 = -1, n$16, x$5;
                                if (dest$5 != null && typeof dest$5 === 'object') {
                                    if (Array.isArray(src$5)) {
                                        dest$5 = new Array(n$16 = src$5.length);
                                        while (++i$18 < n$16) {
                                            dest$5[i$18] = src$5[i$18];
                                        }
                                    } else {
                                        dest$5 = Object.create(null);
                                        for (x$5 in src$5) {
                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (dest$5[x$5] = src$5[x$5]);
                                        }
                                    }
                                }
                                val = dest$5;
                            }
                            pbv.path = copy$3;
                            pbv.value = val;
                            if (values) {
                                values[values.length] = pbv;
                            } else if (onNext) {
                                onNext(pbv);
                            }
                        } else if (nodeType === ERROR) {
                            if (node != null && (node && node[$EXPIRES]) !== 1) {
                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                if (node !== head$5) {
                                    next$5 != null && typeof next$5 === 'object' && (next$5.__prev = prev$5);
                                    prev$5 != null && typeof prev$5 === 'object' && (prev$5.__next = next$5);
                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                    root$6.__head = root$6.__next = head$5 = node;
                                    head$5.__next = next$5;
                                    head$5.__prev = void 0;
                                }
                                if (tail$5 == null || node === tail$5) {
                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                }
                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                            }
                            var pbv$2 = Object.create(null), i$19 = -1, n$17 = requestedPath.length, val$2, copy$4 = new Array(n$17);
                            while (++i$19 < n$17) {
                                copy$4[i$19] = requestedPath[i$19];
                            }
                            var dest$6 = node, src$6 = dest$6, i$20 = -1, n$18, x$6;
                            if (dest$6 != null && typeof dest$6 === 'object') {
                                if (Array.isArray(src$6)) {
                                    dest$6 = new Array(n$18 = src$6.length);
                                    while (++i$20 < n$18) {
                                        dest$6[i$20] = src$6[i$20];
                                    }
                                } else {
                                    dest$6 = Object.create(null);
                                    for (x$6 in src$6) {
                                        !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest$6[x$6] = src$6[x$6]);
                                    }
                                }
                            }
                            val$2 = dest$6;
                            pbv$2.path = copy$4;
                            pbv$2.value = val$2;
                            errors[errors.length] = pbv$2;
                        } else if (refreshing === true || node == null) {
                            var i$21 = -1, j = -1, l = 0, n$19 = height.length, k$3 = requestedPath.length, m, x$7, y, req = [];
                            while (++i$21 < n$19) {
                                req[i$21] = height[i$21];
                            }
                            while (++j < k$3) {
                                if ((x$7 = requestedPath[j]) != null) {
                                    req[i$21++] = (y = path[l++]) != null && typeof y === 'object' && [x$7] || x$7;
                                }
                            }
                            m = n$19 + l + offset - index;
                            while (i$21 < m) {
                                req[i$21++] = path[l++];
                            }
                            req.length = i$21;
                            req.pathSetIndex = nodePath;
                            requestedMissingPaths[requestedMissingPaths.length] = req;
                            var i$22 = -1, n$20 = optimizedPath.length, opt = new Array(n$20 + height - depth), j$2, x$8;
                            while (++i$22 < n$20) {
                                opt[i$22] = optimizedPath[i$22];
                            }
                            for (j$2 = depth, n$20 = height; j$2 < n$20;) {
                                if ((x$8 = path[j$2++]) != null) {
                                    opt[i$22++] = x$8;
                                }
                            }
                            opt.length = i$22;
                            optimizedMissingPaths[optimizedMissingPaths.length] = opt;
                        }
                        node = node;
                        break follow_path_set_14822;
                    }
                    key = path[depth];
                    if (isKeySet = key != null && typeof key === 'object') {
                        if (Array.isArray(key)) {
                            if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        } else {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    }
                    if (key === __NULL) {
                        key = null;
                    }
                    nodes[depth - 1] = nodeParent = node;
                    requestedPath[requestedPath.length = depth] = key;
                    if (key != null) {
                        node = nodeParent && nodeParent[key];
                        optimizedPath[optimizedPath.length = depth + (linkHeight - linkIndex)] = key;
                        if (node == null || typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                            nodeType = void 0;
                            nodeValue = Object.create(null);
                            nodeSize = node && node[$SIZE] || 0;
                            if (node !== nodeValue && (node != null && typeof node === 'object')) {
                                var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$23 = -1, ref$12;
                                while (++i$23 < nodeRefsLength$3) {
                                    if ((ref$12 = node[__REF + i$23]) !== void 0) {
                                        ref$12[__CONTEXT] = nodeValue;
                                        nodeValue[__REF + (destRefsLength$3 + i$23)] = ref$12;
                                        node[__REF + i$23] = void 0;
                                    }
                                }
                                nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                node[__REFS_LENGTH] = ref$12 = void 0;
                                var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key, keys$3, index$4, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                        nodeParent,
                                        invKey$3,
                                        node
                                    ], depth$6 = 0;
                                while (depth$6 > -1) {
                                    nodeParent = stack$5[offset$4 = depth$6 * 8];
                                    invKey$3 = stack$5[offset$4 + 1];
                                    node = stack$5[offset$4 + 2];
                                    if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                        childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                        isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                    }
                                    if (isBranch$3 === true) {
                                        if ((keys$3 = stack$5[offset$4 + 6]) === void 0) {
                                            keys$3 = stack$5[offset$4 + 6] = [];
                                            index$4 = -1;
                                            for (var childKey$3 in node) {
                                                !(!(childKey$3[0] !== '_' || childKey$3[1] !== '_') || (childKey$3 === __SELF || childKey$3 === __PARENT || childKey$3 === __ROOT) || childKey$3[0] === '$') && (keys$3[++index$4] = childKey$3);
                                            }
                                        }
                                        index$4 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                        if (index$4 < keys$3.length) {
                                            stack$5[offset$4 + 7] = index$4 + 1;
                                            stack$5[offset$4 = ++depth$6 * 8] = node;
                                            stack$5[offset$4 + 1] = invKey$3 = keys$3[index$4];
                                            stack$5[offset$4 + 2] = node[invKey$3];
                                            continue;
                                        }
                                    }
                                    var ref$13 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                    if (ref$13 && Array.isArray(ref$13)) {
                                        destination$4 = ref$13[__CONTEXT];
                                        if (destination$4) {
                                            var i$24 = (ref$13[__REF_INDEX] || 0) - 1, n$21 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                            while (++i$24 <= n$21) {
                                                destination$4[__REF + i$24] = destination$4[__REF + (i$24 + 1)];
                                            }
                                            destination$4[__REFS_LENGTH] = n$21;
                                            ref$13[__REF_INDEX] = ref$13[__CONTEXT] = destination$4 = void 0;
                                        }
                                    }
                                    if (node != null && typeof node === 'object') {
                                        var ref$14, i$25 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                        while (++i$25 < n$22) {
                                            if ((ref$14 = node[__REF + i$25]) !== void 0) {
                                                ref$14[__CONTEXT] = node[__REF + i$25] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                        next$6 != null && typeof next$6 === 'object' && (next$6.__prev = prev$6);
                                        prev$6 != null && typeof prev$6 === 'object' && (prev$6.__next = next$6);
                                        node === head$6 && (root$7.__head = root$7.__next = next$6);
                                        node === tail$6 && (root$7.__tail = root$7.__prev = prev$6);
                                        node.__next = node.__prev = void 0;
                                        head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        ;
                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    ;
                                    delete stack$5[offset$4 + 0];
                                    delete stack$5[offset$4 + 1];
                                    delete stack$5[offset$4 + 2];
                                    delete stack$5[offset$4 + 3];
                                    delete stack$5[offset$4 + 4];
                                    delete stack$5[offset$4 + 5];
                                    delete stack$5[offset$4 + 6];
                                    delete stack$5[offset$4 + 7];
                                    --depth$6;
                                }
                                nodeParent = invParent$3;
                                node = invChild$3;
                            }
                            nodeParent[key] = node = nodeValue;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = ++__GENERATION_GUID) && node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            var self$5 = node, node$3;
                            while (node$3 = node) {
                                if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var self$6 = node, stack$6 = [], depth$7 = 0, linkPaths$3, ref$15, i$26, k$4, n$23;
                                    while (depth$7 > -1) {
                                        if ((linkPaths$3 = stack$6[depth$7]) === void 0) {
                                            i$26 = k$4 = -1;
                                            n$23 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = ++__GENERATION_GUID;
                                            if ((ref$15 = node[__PARENT]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$23 + 1);
                                                linkPaths$3[++k$4] = ref$15;
                                            } else if (n$23 > 0) {
                                                stack$6[depth$7] = linkPaths$3 = new Array(n$23);
                                            }
                                            while (++i$26 < n$23) {
                                                if ((ref$15 = node[__REF + i$26]) !== void 0 && ref$15[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    linkPaths$3[++k$4] = ref$15;
                                                }
                                            }
                                        }
                                        if ((node = linkPaths$3 && linkPaths$3.pop()) !== void 0) {
                                            ++depth$7;
                                        } else {
                                            stack$6[depth$7--] = void 0;
                                        }
                                    }
                                    node = self$6;
                                }
                                node = node$3[__PARENT];
                            }
                            node = self$5;
                        }
                    }
                    node = node;
                    depth = depth + 1;
                    continue follow_path_set_14822;
                } while (true);
            node = node;
            var key$3;
            depth = depth - 1;
            unroll_14909:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_14909;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_14909;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_14909;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_14909;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_14909;
                    }
                    depth = path.depth = depth;
                    break unroll_14909;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}